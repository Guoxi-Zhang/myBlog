{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/SEReview.md","hash":"832477c9ac55ab0c2e1bffaf6c90c7c12168d3f9","modified":1673788943972},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1673764061200},{"_id":"source/_data/link.yml","hash":"938fbdffafbab977af55eb51b386103c322cd021","modified":1673771459593},{"_id":"source/_posts/hello-hexo.md","hash":"a41d5a2a0ea3ef0a49fea40c75d0c53f02891bb8","modified":1673764825053},{"_id":"source/tags/index.md","hash":"a7f7590f471505d7d25ad8ef25977439af40429c","modified":1673769347872},{"_id":"source/_posts/test.md","hash":"09afcd16bbd2d779a882e689b53363ed4fa4c485","modified":1673788829635},{"_id":"source/categories/index.md","hash":"44cfadf24bf87035df8e80fc416b745b9ab75ec6","modified":1673769335330},{"_id":"source/link/index.md","hash":"03880304df1a1b3a1dca2a961c8171109328f360","modified":1673774692105},{"_id":"source/_posts/SEReview/image-20221012140248086.png","hash":"51b958e1885b00cf8eab716be746e5c9e1bab2de","modified":1665554568106},{"_id":"source/_posts/SEReview/image-20221012140314730.png","hash":"be2030a66bcf517f028878ccda98c43271c2a2bf","modified":1665554594752},{"_id":"source/_posts/SEReview/image-20221012140310071.png","hash":"7d62b3f4e4bda44943a0185fb173f69edf3a935e","modified":1665554590095},{"_id":"source/_posts/SEReview/image-20221012140439333.png","hash":"3417626af80216340a714daedc78d005aa5938d4","modified":1665554679360},{"_id":"source/_posts/SEReview/image-20221026150156120.png","hash":"44ba9afbabe77994b4abb010f0d48613d348c7cb","modified":1666767716144},{"_id":"source/_posts/SEReview/image-20221210144633032-16706547958251.png","hash":"d3f71fa1060783bce42ba40978e55c83461c176c","modified":1670654795835},{"_id":"source/_posts/SEReview/image-20221210144633032.png","hash":"d3f71fa1060783bce42ba40978e55c83461c176c","modified":1670654793045},{"_id":"source/_posts/SEReview/image-20221210151413472.png","hash":"572d175af37e381232d4b3df2e011d8fdb00233a","modified":1670656453496},{"_id":"source/_posts/SEReview/image-20221214160934681.png","hash":"6c557e6afdd23bc38f8b52d2fe425bcfd3adb835","modified":1671005374693},{"_id":"source/_posts/SEReview/image-20221214162408194.png","hash":"869df18a25d13da0f76fa965b174982f4295b083","modified":1671006248207},{"_id":"source/_posts/SEReview/image-20221214162419950.png","hash":"56a24f8b4d36705bed788af8894e98f58fd5bbcf","modified":1671006259954},{"_id":"source/_posts/SEReview/image-20221214162433369.png","hash":"fdfa7573e44b1352a2372103690fe6dde398f184","modified":1671006273396},{"_id":"source/_posts/SEReview/image-20221214162414853.png","hash":"6941963e24cc4168383af6ab91f0af1bf62676ce","modified":1671006254859},{"_id":"source/_posts/SEReview/image-20221214162439934.png","hash":"b1f947f98e93c0714bf1b107487d3beb55a4923f","modified":1671006279936},{"_id":"source/_posts/SEReview/image-20221012135918954.png","hash":"6b1ae0ecf7fa838efd2bc848217934e5efc272d0","modified":1665554358986},{"_id":"source/_posts/SEReview/image-20221012140409612.png","hash":"4535b4827716149d6f15890adde02cde1958583d","modified":1665554649655},{"_id":"source/_posts/SEReview/image-20221012140549113.png","hash":"c509266a4aa62a2669028ed4f70ddd4e74d42499","modified":1665554749149},{"_id":"source/_posts/SEReview/image-20221012140630219.png","hash":"8907ad111769a2152a810805fe975e34ab7b47fc","modified":1665554790250},{"_id":"source/_posts/SEReview/image-20221012140533502.png","hash":"83149cf152673d35fe5b84b3e9d13dac7a8f74f7","modified":1665554733535},{"_id":"source/_posts/SEReview/image-20221012140506865.png","hash":"799b64af06dec1f7c2c240f2ce0f92dd563b30af","modified":1665554706904},{"_id":"source/_posts/SEReview/image-20221012140858481.png","hash":"2716eca209c11acc1c5773f4802e95dfe071a3d1","modified":1665554938523},{"_id":"source/_posts/SEReview/image-20221012140948540.png","hash":"aa7be288119d3c575df1dd81de769999944e1e44","modified":1665554988583},{"_id":"source/_posts/SEReview/image-20221210144807793.png","hash":"ce4d1cb0e7999fbd3094c7ce922e2792e24f8af1","modified":1670654887845},{"_id":"source/_posts/SEReview/image-20221210152614210.png","hash":"34265a25084819326a7a2747ef6f3982e0c9c085","modified":1670657174233},{"_id":"source/_posts/SEReview/image-20221210165247462.png","hash":"9aa5815f913f08d7c74a7cda30d3e21cdbb5ed82","modified":1670662367481},{"_id":"source/_posts/SEReview/image-20221214151259439.png","hash":"aaf2301cf430385ebdd441948f4ddb47e8b43097","modified":1671001979468},{"_id":"source/_posts/SEReview/image-20221214152126659.png","hash":"5b771449b31e9e03602817b7780cadb9549ca074","modified":1671002486685},{"_id":"source/_posts/SEReview/image-20221214155932626.png","hash":"e02d3daba933b86c66e2d83c9165c79097dce768","modified":1671004772647},{"_id":"source/_posts/SEReview/image-20221214160939104.png","hash":"3135c98ffe7ebfa5053316adccc43d9333b96c33","modified":1671005379125},{"_id":"source/_posts/SEReview/image-20221214161539773.png","hash":"11d121fe813a99f0821525ff3c83c075b5cb32fd","modified":1671005739806},{"_id":"source/_posts/SEReview/image-20221228152205055.png","hash":"884ed9d0ffa9726e56a8bc6087da57d0a8b3b3d9","modified":1672212125088},{"_id":"source/_posts/SEReview/image-20221012140424181.png","hash":"4ec7485ec40ced8c2bb1a4573ab6f4818a300907","modified":1665554664238},{"_id":"source/_posts/SEReview/image-20221012140748468.png","hash":"4f5058a776607e95eb149b8fe87a445df9d6d4ab","modified":1665554868519},{"_id":"source/_posts/SEReview/image-20221012140837195.png","hash":"21ab65440a883e93f0df1715b662e3b6c76b7f9e","modified":1665554917246},{"_id":"source/_posts/SEReview/image-20221019161158995.png","hash":"54bb2cde0cdd4ed830fb00f20d6124f8f713bb22","modified":1666167119045},{"_id":"source/_posts/SEReview/image-20221019160823423.png","hash":"0777d29dac66e5a2648874142638ce6f3c8cc2fe","modified":1666166903510},{"_id":"source/_posts/SEReview/image-20221210134301873.png","hash":"ed5ee9ad6a771bb1930b582908ae404e5be5517f","modified":1670650981921},{"_id":"source/_posts/SEReview/image-20221210142236309.png","hash":"f7559005beebdf515c70258540422ad7e51a52c4","modified":1670653356354},{"_id":"source/_posts/SEReview/image-20221210141113852.png","hash":"f0a2cb061bc1ef3ec5949f77e4aa0493833751ac","modified":1670652673884},{"_id":"source/_posts/SEReview/image-20221210143134777.png","hash":"52772d295234b58bbd5646b9021a5b690ef6697a","modified":1670653894823},{"_id":"source/_posts/SEReview/image-20221210144917207.png","hash":"5c337f87b3b32d6bf2daf27a764e71ebd5127516","modified":1670654957245},{"_id":"source/_posts/SEReview/image-20221214151330971.png","hash":"94e13a496b7a14d1729a51bdbbfa8fe82e1eb375","modified":1671002011010},{"_id":"source/_posts/SEReview/image-20221214161155755.png","hash":"ca64c70b723882a80b129de79873c754525636f4","modified":1671005515779},{"_id":"source/_posts/SEReview/image-20221214161201230.png","hash":"e748a1ecdcfbf6a5d422f9102a3d7a0532054dad","modified":1671005521252},{"_id":"source/_posts/SEReview/image-20221228152746207.png","hash":"9aa97e99d37d14da07aabe0043cde861c55f0d69","modified":1672212466245},{"_id":"source/_posts/SEReview/image-20221228153727751.png","hash":"5bb46c7c80f3f030f30e1a7c26f1342962fe1327","modified":1672213047778},{"_id":"source/_posts/SEReview/image-20221019160521548.png","hash":"0b694f6e509ad7dc7cb801622d4ca79d2e23e738","modified":1666166721613},{"_id":"source/_posts/SEReview/image-20221019155252489.png","hash":"11650b360503d0b0fb4358cabe507699172824e7","modified":1666165972576},{"_id":"source/_posts/SEReview/image-20221210135053957.png","hash":"e1533505901202d350c532498219de9149aa905a","modified":1670651454005},{"_id":"source/_posts/SEReview/image-20221210145132156.png","hash":"f2bd2c415a532b6170a005de33eade8405242563","modified":1670655092222},{"_id":"source/_posts/SEReview/image-20221214155441736.png","hash":"44f4ff7f747155312f6690914db313852f794ad7","modified":1671004481787},{"_id":"source/_posts/SEReview/image-20221214160040929.png","hash":"58a88c28a9a8ad82902a972e11bca6c541795510","modified":1671004840974},{"_id":"source/_posts/SEReview/image-20221214160510145.png","hash":"0a820a69d5a4d9b5df469b53180ccbb7a63e026c","modified":1671005110226},{"_id":"source/_posts/SEReview/image-20221214161006496.png","hash":"906f277f70e9d3dc257507ef23ae04527c50a7c5","modified":1671005406522},{"_id":"source/_posts/SEReview/image-20221214161151723.png","hash":"ef6dcecc645887f2479d5c23b098ecf788b3705a","modified":1671005511749},{"_id":"source/_posts/SEReview/image-20221228153224604.png","hash":"9d35536dfbdb33099f1fef7120fcf452a00311ce","modified":1672212744655},{"_id":"source/_posts/SEReview/image-20221228153416006.png","hash":"59ea33d3df4430d0b12d48ba589be472b75ca9b6","modified":1672212856063},{"_id":"source/_posts/SEReview/image-20221228153458124.png","hash":"599b492918be2a0c816e89a55adfc16cf0930b6e","modified":1672212898172},{"_id":"source/_posts/SEReview/image-20221228153813086.png","hash":"4da97d14518fc4cecfa6b6552495209c6069cb10","modified":1672213093142},{"_id":"source/_posts/SEReview/image-20221012140929999.png","hash":"ab44a354235b7ff2640f1262f583cfa46ec7b3f6","modified":1665554970122},{"_id":"source/_posts/SEReview/image-20221019150622381.png","hash":"dc6f1ce5422ed1ba62744846147b8fe0fb4bbffc","modified":1666163182521},{"_id":"source/_posts/SEReview/image-20221019150716649.png","hash":"dc6f1ce5422ed1ba62744846147b8fe0fb4bbffc","modified":1666163236783},{"_id":"source/_posts/SEReview/image-20221019150720887.png","hash":"71b96e04667e9b1841eff0ea2323769cf439ee84","modified":1666163240976},{"_id":"source/_posts/SEReview/image-20221214151457611.png","hash":"42d9915452bd519c8b0b4b626b3e903095a6cb29","modified":1671002097665},{"_id":"source/_posts/SEReview/image-20221214161011172.png","hash":"f733db9da9903dcfa0b9299900b7b6aba7f848d4","modified":1671005411210},{"_id":"source/_posts/SEReview/image-20221012140842657.png","hash":"933ebb569caffb8a67b9296a267c73f6eaf0c2e8","modified":1665554922791},{"_id":"source/_posts/SEReview/image-20221210165149285.png","hash":"c473a6c6a0cd3ea30eb185f5a7a5edfe9d950aa2","modified":1670662309340},{"_id":"source/_posts/SEReview/image-20221026145144103.png","hash":"9b6a18220112b981c9078e911658fbc1f9d3e2bb","modified":1666767104362},{"_id":"source/_posts/SEReview/image-20221019162512098.png","hash":"db90fea167475d95d4d040729bf2249c0c35e0d8","modified":1666167912296},{"_id":"source/_posts/SEReview/image-20221210135030701.png","hash":"5a0c41a8bd70cc3acab0d1e67b62cb0b3dcaa837","modified":1670651430801},{"_id":"source/_posts/SEReview/image-20221210142751755.png","hash":"a5fc514c7e6d8db4ceab261f9ab944a9f4840645","modified":1670653671904},{"_id":"source/_posts/SEReview/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png","hash":"eaa4fb35b85b11d1881b608d11952718a8997b79","modified":1666679188284},{"_id":"source/_posts/SEReview/image-20221214155233138.png","hash":"b720f020155f9f909e4c5caa24b3efc23c9b2d3d","modified":1671004353268},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1673768603817},{"_id":"themes/butterfly/package.json","hash":"766181f2d556741a7285fea3b170a9a0c67dbc0c","modified":1673768603848},{"_id":"themes/butterfly/_config.yml","hash":"6f4e20da80e4410bf0eb39ea52af67e881241d9e","modified":1673774635704},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1673768603817},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1673768603817},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1673768603817},{"_id":"themes/butterfly/plugins.yml","hash":"8e3b5e44ff0e7e9c5779234bf21e1e70aeec5ae8","modified":1673768603848},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1673768603817},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1673768603817},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1673768603817},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1673768603817},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1673768603817},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1673768603848},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1673768603817},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1673768603848},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1673768603848},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1673768603817},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1673768603817},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1673768603848},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1673768603817},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"bfc28cb79e81f55c09672fb8e4372a71e0994761","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"25cd2d7c4d3f6836a157b73a2442a7712ff40b34","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1673768603832},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1673768603832},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1673768603848},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1673768603848},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1673768603848},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1673768603848},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1673768603848},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1673768603863},{"_id":"themes/butterfly/source/css/var.styl","hash":"63f12a6a847738b1479ce782c8caac5e0cf16a6b","modified":1673768603879},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1673768603879},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1673768603848},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1673768603879},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1673768603879},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1673768603848},{"_id":"themes/butterfly/source/js/main.js","hash":"f049b166073c4bcdccc6d8348774941a4e2c6d7b","modified":1673768603879},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1673768603848},{"_id":"themes/butterfly/source/js/utils.js","hash":"7ec0fcd0b8ee1612c5ad8ba004753d95c51249fb","modified":1673768603879},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1673768603848},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"1ae9561ea27fd9f929a9a67f1b1025303ca4370f","modified":1673768603879},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"40f85785d041b976f47a2828b0dc54346dcb62b0","modified":1673768603848},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1673768603848},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ade8ce15cc7f41587e616f8e40f565081aee1c37","modified":1673768603848},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1673768603848},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1673768603848},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f147de205e3f554d2cc6f94b6f01938c4eb9cb4c","modified":1673768603848},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1673768603848},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1673768603848},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1673768603863},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1673768603863},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1673768603817},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1673768603863},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1673768603817},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"0b406dcb12e78934e3795192189cc4a07c10dca8","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"f413e0269fb4bd260acb62adad03aaf2e242a910","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1673768603817},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1673768603848},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1673768603848},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1673768603848},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"7a12719a1ef2bce7d4056f2241251a71e92cd72c","modified":1673768603863},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c424b1a3119ffb8396d80bb3585f48bd6777c917","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"55bee81fbb27092daa65b9ade8163ae250615c3d","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1673768603863},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1673768603863},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"e3e1b234a2595824576b8c9ed87af6d933f4e125","modified":1673768603863},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1673768603863},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1673768603863},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1673768603863},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"72a38c1dad7f55564b02c7a23e6ef39219edcd80","modified":1673768603863},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1673768603879},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1673768603863},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1673768603863},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1673768603863},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"44b6d3fb2c9b437d85de751d83e2e92a0830451d","modified":1673768603879},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1673768603832},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1673768603863},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"2a39dd634a80a735359206a2481f8468f34a0b5c","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1673768603832},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1673768603848},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1673768603863},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1673768603848},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1673768603863},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1673768603848},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1673768603848},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1673768603863},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1673768603863},{"_id":"source/_posts/SEReview/image-20221026150428993.png","hash":"1c1351367c590f65cfbb0edc5a8708c801b4db53","modified":1666767869246},{"_id":"source/_posts/test/bg.png","hash":"efad4dc115ee0552cca2b8bd984fb52defd80f3e","modified":1673788827199},{"_id":"public/tags/index.html","hash":"7caefac82d032fbdd8ca391b1ee64ed300683dd1","modified":1673788967258},{"_id":"public/categories/index.html","hash":"457cecd87e6f4302149f026669682bf7379830dc","modified":1673788967258},{"_id":"public/categories/软件工程/index.html","hash":"12b70dda2afc64291e43d8f0dcf126b5b47cf7e9","modified":1673788967258},{"_id":"public/link/index.html","hash":"36b54949a87e3833eaf3bc175807d98fd102ca26","modified":1673788967258},{"_id":"public/2023/01/15/test/index.html","hash":"f5e84b0e74854af36dae537043e983e8a633dbb5","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/index.html","hash":"2bc5f86099331b3f5b77eee5ef3b8a657bd9ed51","modified":1673788967258},{"_id":"public/2023/01/15/hello-hexo/index.html","hash":"b5acc45cf438dc222b6098aafefdc664536802af","modified":1673788967258},{"_id":"public/2023/01/15/hello-world/index.html","hash":"688e5d6481590400aa961ca1a24fe12df82db4e6","modified":1673788967258},{"_id":"public/archives/index.html","hash":"185ee13d0130dcb8125ac1032421c6af664b6d80","modified":1673788967258},{"_id":"public/archives/2023/index.html","hash":"d602ac29b46e19fc393932a5091ab248175344c9","modified":1673788967258},{"_id":"public/index.html","hash":"460818d5660f507679cadac2770f4d8e34d8335c","modified":1673788967258},{"_id":"public/archives/2023/01/index.html","hash":"4037e3210b1c32038a4b52672818aaa51d8efe00","modified":1673788967258},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1673788967258},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1673788967258},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140248086.png","hash":"51b958e1885b00cf8eab716be746e5c9e1bab2de","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140314730.png","hash":"be2030a66bcf517f028878ccda98c43271c2a2bf","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140310071.png","hash":"7d62b3f4e4bda44943a0185fb173f69edf3a935e","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140439333.png","hash":"3417626af80216340a714daedc78d005aa5938d4","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012135918954.png","hash":"6b1ae0ecf7fa838efd2bc848217934e5efc272d0","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221026150156120.png","hash":"44ba9afbabe77994b4abb010f0d48613d348c7cb","modified":1673788967258},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1673788967258},{"_id":"public/js/utils.js","hash":"79876c382713765c7705361f44ae9e64b5f0f32f","modified":1673788967258},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1673788967258},{"_id":"public/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1673788967258},{"_id":"public/css/index.css","hash":"2bfeeeace361d30257c4bcc8e8ca4e533b7699d6","modified":1673788967258},{"_id":"public/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1673788967258},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210144633032-16706547958251.png","hash":"d3f71fa1060783bce42ba40978e55c83461c176c","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210144633032.png","hash":"d3f71fa1060783bce42ba40978e55c83461c176c","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210151413472.png","hash":"572d175af37e381232d4b3df2e011d8fdb00233a","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214160934681.png","hash":"6c557e6afdd23bc38f8b52d2fe425bcfd3adb835","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214162408194.png","hash":"869df18a25d13da0f76fa965b174982f4295b083","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214162414853.png","hash":"6941963e24cc4168383af6ab91f0af1bf62676ce","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214162419950.png","hash":"56a24f8b4d36705bed788af8894e98f58fd5bbcf","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214162439934.png","hash":"b1f947f98e93c0714bf1b107487d3beb55a4923f","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214162433369.png","hash":"fdfa7573e44b1352a2372103690fe6dde398f184","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140409612.png","hash":"4535b4827716149d6f15890adde02cde1958583d","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140506865.png","hash":"799b64af06dec1f7c2c240f2ce0f92dd563b30af","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140533502.png","hash":"83149cf152673d35fe5b84b3e9d13dac7a8f74f7","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140549113.png","hash":"c509266a4aa62a2669028ed4f70ddd4e74d42499","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140630219.png","hash":"8907ad111769a2152a810805fe975e34ab7b47fc","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140858481.png","hash":"2716eca209c11acc1c5773f4802e95dfe071a3d1","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140948540.png","hash":"aa7be288119d3c575df1dd81de769999944e1e44","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210144807793.png","hash":"ce4d1cb0e7999fbd3094c7ce922e2792e24f8af1","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210152614210.png","hash":"34265a25084819326a7a2747ef6f3982e0c9c085","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210165247462.png","hash":"9aa5815f913f08d7c74a7cda30d3e21cdbb5ed82","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214151259439.png","hash":"aaf2301cf430385ebdd441948f4ddb47e8b43097","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214152126659.png","hash":"5b771449b31e9e03602817b7780cadb9549ca074","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214155932626.png","hash":"e02d3daba933b86c66e2d83c9165c79097dce768","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214160939104.png","hash":"3135c98ffe7ebfa5053316adccc43d9333b96c33","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161539773.png","hash":"11d121fe813a99f0821525ff3c83c075b5cb32fd","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228152205055.png","hash":"884ed9d0ffa9726e56a8bc6087da57d0a8b3b3d9","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140424181.png","hash":"4ec7485ec40ced8c2bb1a4573ab6f4818a300907","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140748468.png","hash":"4f5058a776607e95eb149b8fe87a445df9d6d4ab","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140837195.png","hash":"21ab65440a883e93f0df1715b662e3b6c76b7f9e","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019161158995.png","hash":"54bb2cde0cdd4ed830fb00f20d6124f8f713bb22","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019160823423.png","hash":"0777d29dac66e5a2648874142638ce6f3c8cc2fe","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210134301873.png","hash":"ed5ee9ad6a771bb1930b582908ae404e5be5517f","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210142236309.png","hash":"f7559005beebdf515c70258540422ad7e51a52c4","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210141113852.png","hash":"f0a2cb061bc1ef3ec5949f77e4aa0493833751ac","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210143134777.png","hash":"52772d295234b58bbd5646b9021a5b690ef6697a","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210144917207.png","hash":"5c337f87b3b32d6bf2daf27a764e71ebd5127516","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214151330971.png","hash":"94e13a496b7a14d1729a51bdbbfa8fe82e1eb375","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161155755.png","hash":"ca64c70b723882a80b129de79873c754525636f4","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161201230.png","hash":"e748a1ecdcfbf6a5d422f9102a3d7a0532054dad","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228152746207.png","hash":"9aa97e99d37d14da07aabe0043cde861c55f0d69","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228153727751.png","hash":"5bb46c7c80f3f030f30e1a7c26f1342962fe1327","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019155252489.png","hash":"11650b360503d0b0fb4358cabe507699172824e7","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019160521548.png","hash":"0b694f6e509ad7dc7cb801622d4ca79d2e23e738","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210135053957.png","hash":"e1533505901202d350c532498219de9149aa905a","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210145132156.png","hash":"f2bd2c415a532b6170a005de33eade8405242563","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214155441736.png","hash":"44f4ff7f747155312f6690914db313852f794ad7","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214160040929.png","hash":"58a88c28a9a8ad82902a972e11bca6c541795510","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214160510145.png","hash":"0a820a69d5a4d9b5df469b53180ccbb7a63e026c","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161006496.png","hash":"906f277f70e9d3dc257507ef23ae04527c50a7c5","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161151723.png","hash":"ef6dcecc645887f2479d5c23b098ecf788b3705a","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228153224604.png","hash":"9d35536dfbdb33099f1fef7120fcf452a00311ce","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228153416006.png","hash":"59ea33d3df4430d0b12d48ba589be472b75ca9b6","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228153458124.png","hash":"599b492918be2a0c816e89a55adfc16cf0930b6e","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221228153813086.png","hash":"4da97d14518fc4cecfa6b6552495209c6069cb10","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140929999.png","hash":"ab44a354235b7ff2640f1262f583cfa46ec7b3f6","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019150716649.png","hash":"dc6f1ce5422ed1ba62744846147b8fe0fb4bbffc","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019150622381.png","hash":"dc6f1ce5422ed1ba62744846147b8fe0fb4bbffc","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019150720887.png","hash":"71b96e04667e9b1841eff0ea2323769cf439ee84","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214151457611.png","hash":"42d9915452bd519c8b0b4b626b3e903095a6cb29","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214161011172.png","hash":"f733db9da9903dcfa0b9299900b7b6aba7f848d4","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221012140842657.png","hash":"933ebb569caffb8a67b9296a267c73f6eaf0c2e8","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210165149285.png","hash":"c473a6c6a0cd3ea30eb185f5a7a5edfe9d950aa2","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221026145144103.png","hash":"9b6a18220112b981c9078e911658fbc1f9d3e2bb","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221019162512098.png","hash":"db90fea167475d95d4d040729bf2249c0c35e0d8","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210142751755.png","hash":"a5fc514c7e6d8db4ceab261f9ab944a9f4840645","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221210135030701.png","hash":"5a0c41a8bd70cc3acab0d1e67b62cb0b3dcaa837","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png","hash":"eaa4fb35b85b11d1881b608d11952718a8997b79","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221214155233138.png","hash":"b720f020155f9f909e4c5caa24b3efc23c9b2d3d","modified":1673788967258},{"_id":"public/2023/01/15/SEReview/image-20221026150428993.png","hash":"1c1351367c590f65cfbb0edc5a8708c801b4db53","modified":1673788967258},{"_id":"public/2023/01/15/test/bg.png","hash":"efad4dc115ee0552cca2b8bd984fb52defd80f3e","modified":1673788967258}],"Category":[{"name":"软件工程","_id":"clcxeqjfc0007m8umd0fnaizf"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"友情链接","date":"2023-01-15T07:56:01.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2023-01-15 15:56:01\ntype: \"link\"\n---\n","updated":"2023-01-15T09:24:52.105Z","path":"link/index.html","comments":1,"layout":"page","_id":"clcxeqjf00000m8umf1x16rvp","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2023-01-15T07:54:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-01-15 15:54:14\ntype: \"tags\"\n---\n","updated":"2023-01-15T07:55:47.872Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clcxeqjf50002m8um41eqgg62","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"分类","date":"2023-01-15T07:55:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-01-15 15:55:17\ntype: \"categories\"\n---\n","updated":"2023-01-15T07:55:35.330Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clcxeqjf70004m8umbtll607a","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-01-15T06:27:41.200Z","updated":"2023-01-15T06:27:41.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcxeqjf20001m8um702e7ged","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hello hexo","date":"2023-01-15T06:40:08.000Z","_content":"\n# test\n\naaaaaaaaaaa\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: hello hexo\ndate: 2023-01-15 14:40:08\ntags:\n---\n\n# test\n\naaaaaaaaaaa\n","slug":"hello-hexo","published":1,"updated":"2023-01-15T06:40:25.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcxeqjf60003m8umdke91zax","content":"<h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1><p>aaaaaaaaaaa</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h1><p>aaaaaaaaaaa</p>\n"},{"title":"软件工程知识点复习总结","date":"2023-01-15T09:25:53.413Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":true,"summary":null,"_content":"\n\n\n**Software：**\n\n（1）指令的集合，通过执行这些指令可以满足预期的特征、功能和性能需求；\n\n（2）数据结构，使得程序可以合理利用信息\n\n（3）软件描述信息，它以硬拷贝和虚拟形式存在，用来描述程序操作和使用\n\n| **出错名称**                 | **系统输出信息**             | **处理方法**         |\n| ---------------------------- | ---------------------------- | -------------------- |\n| 用户名输入错误               | 用户名或密码错误             | 返回登录界面         |\n| 密码输入错误                 | 用户名或密码错误             | 返回登录界面         |\n| 输入格式错误                 | 输入格式错误，请重新输入     | 返回输入界面         |\n| 数据库连接失败               | 数据库连接失败，请检查连接   | 返回操作前的页面     |\n| TCP连接错误                  | 连接超时，请检查连接         | 返回操作前的页面     |\n| 不允许为空的输入框输入空字符 | 输入为空，请输入             | 弹回原输入页面输入处 |\n| 系统故障                     | 服务器出现故障，请联系管理员 | 立刻启用备用机       |\n\n# **Software Engineering：**\n\n软件工程是：\n\n（1）将系统化的、规范化、可量化的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。\n\n（2）在（1）中所述方法的研究\n\n## **What the difference between software and hardware?**\n\n1.软件是设计开发的，而不是传统意义上生产制造的。\n\n2.软件不会“磨损”\n\n3.大多数软件根据实际的顾客需求定制的。\n\n## **Why does software need Change or Evolved?**\n\n **遗留软件（legacy software）：**\n\n> 遗留软件系统……在几十年前开发，它们不断被修改以满足商业需要和计算平台的变化。这类系统的繁衍使得大型机构十分头痛，因为它们的维护代价高昂且系统演化风险较高。\n\n**发生原因：**\n\n- 软件需要进行**适应性调整（adapt）**，从而可以满足新的计算环境或者技术的需求。\n- 软件必须**升级（update）**以实现新的商业需求。\n- 软件必须**扩展（extend）**使之具有与更多新的系统和数据库的互操作能力。\n- 软件架构必须进行**改建（re-architect）**使之能适应多样化的网络环境。\n\n## 层次化技术\n\n![image-20221012135918954](./SEReview/image-20221012135918954.png)\n\n支持软件工程的根基在于**质量关注点（quality focus）**：是对软件的组织承诺，是支持软件工程的基石\n\n软件工程的基础是**过程（process）层**。软件过程将各个技术层次结合在一起，使得合理、及时地开发计算机软件成为可能。\n\n软件工程**方法（method）**为构建软件提供技术上的解决方法。方法包括：沟通、需求分析、设计模型、编程、测试和技术支持。\n\n# **Software Process ：**\n\n**软件过程：**软件过程是工作产品构建时所执行的一系列活动、动作和任务的集合。层次关系：\n\n- 软件过程\n  - 过程框架\n    - 普适性活动\n      - 框架活动\n        - 软件工程动作\n          - 任务集\n            - 质量保证点、项目里程碑等\n\n## **Generic Framework Activity(通用框架活动)**\n\n适用于所有软件项目，无论其规模和复杂程度如何：\n\n**1. 沟通（Communication）：**目的是理解利益相关者的项目目标，并收集需求以定义软件特性和功能。\n\n**2. 策划（Planning）：**定义和描述了软件工程工作，包括需要执行的技术任务、可能的风险、资源需求、工作产品和工作进度计划。\n\n**3. 建模（Modeling）：**利用模型哎更好地理解软件需求并完成符合这些需求的软件设计。\n\n**4. 构建（Construction）：**它包括编码和测试以发现编码中的错误。\n\n**5. 部署（Deployment）：**软件交付到用户，用户对其进行评测并给出反馈意见。\n\n在项目的多次迭代过程中，沟通、策划、建模、构建、部署等活动不断重复。每次==项目迭代==都会产生一个软**件增量( software increment)**，每个软件增量实现了部分的软件特性和功能。随着每一次增量的产生，软件逐渐完善。\n\n## **Umbrella Activities（普适性活动）：**\n\n**普适性活动贯穿软件项目始终。**\n\n**1.软件项目跟踪和控制：**项目根据计划评估项目进度，并且采取必要的措施保证项目按进度计划进行。\n\n**2.风险管理：**对可能影响项目成果或者产品质量的风险进行评估。\n\n**3.软件质量保证：**确定和执行软件质量保证的活动\n\n**4.技术评估：**评估软件工程产品、尽量在错误传播到下一个活动之前，发现并清除错误。\n\n**5.测量：**定义和收集过程、项目和产品的度量，以帮助团队在发布软件的时候满足利益相关者要求。同时，测量还可以与其他框架活动和普适性活动配合使用。\n\n**6.软件配置管理：**在整个软件工程中，管理变更所带来的影响。\n\n**7.可复用管理：**定义产品复用的标准，并且建立构建复用机制。\n\n**8.工作产品的准备和生产：**包括了生产产品所必需的活动。\n\n## **Process Flow**\n\n**过程流：**描述了在执行顺序和执时间上，如何组织框架中的活动，动作，任务。\n\n- **线性过程流（Liner process flow）：**从沟通到部署顺序执行五个框架活动。\n\n- **迭代过程流（iterative process flow）：**在执行下一个活动前重复执行之前一个或多个活动。\n\n  ![image-20221012140248086](./SEReview/image-20221012140248086.png)\n\n- **演化过程流（evolution process flow）：**采取循环的方式执行各个活动。![image-20221012140310071](./SEReview/image-20221012140310071.png)\n\n- **并行过程流（parallel process flow）：**将一个或是多个活动与其他活动并行执行。![image-20221012140314730](./SEReview/image-20221012140314730.png)\n\n## **过程模式（process pattern）**\n\n描述了软件工程工作中遇到的过程相关的问题、明确了问题环境并给出了针对该问题的一种或几种可证明的解决方式。\n\n## **Process Model**\n\n惯用过程模型是为了改变软件开发的混乱状态，促使软件开发更加有序。\n\n### **瀑布模型（waterfall model）**\n\n**又被称为经典生命周期（classic life cycle），它提出了一个系统的、顺序的软件开发方法。**\n\n**优点：**\n\n有利于大型软件开发过程中人员的组织、管理，从而提高了大型软件项目开发的质量和效\n\n率。\n\n当需求确定、工作采用线性的方式完成的时候瀑布模型是一个很有用的过程模型。\n\n一个有用的过程模型，其中需求是固定的，工作将以线性方式完成。\n\n**缺点:**\n\n过于理想，缺乏灵活性，容易产生需求偏差。\n\n实际的项目很少遵守瀑布模型提出的顺序。\n\n客户通常很难清除的描述所有的需求。\n\n客户必须要有耐心，因为只有在项目接近尾声的时候，他们才能的带执行的程序。\n\n**适用范围：**需求确定，工作能够采用线性的方式完成的软件。\n\n![image-20221012140409612](./SEReview/image-20221012140409612.png)\n\n### **V 模型（V-model）：**\n\n描述了质量保证动作同沟通、建模相关动作以及早期构建相关的动作之间的关系。\n\nV 模型强调软件开发的协作和速度，将软件实现和验证有机地结合起来，在保证较高的软\n\n件质量情况下缩短开发周期。\n\n**优点：**适合工程量小、人力资源少并且开发过程中改动不大的项目\n\n**缺点：**错误发现时间迟，产生的风险代价高\n\n![image-20221012140424181](./SEReview/image-20221012140424181.png)\n\n### **增量过程模型（Incremental Model）**\n\n增量过程模型侧重于每一个增量都提交一个可以运行的产品。\n\n**优点：**\n\n1. 能在较短的时间内向用户提交可完成部分工作的产品。\n\n2. 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。\n\n3. 规避技术风险\n\n4. 可并行开发构件，加快开发的进度\n\n5. 对于在业务截止日期之前完全实施的人员配置非常有用。\n\n**缺点：**\n\n（1）并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构；\n\n（2）增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模\n\n型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。\n\n**适用范围：**\n\n（1）进行已有产品升级或新版本开发，增量模型是非常适合的；\n\n（2）对完成期限严格要求的产品，可以使用增量模型；\n\n（3）对所开发的领域比较熟悉而且已有原型系统，增量模型也是非常适合的。（4） 项目在既定的商业要求期限之前不可能找到足够的开发人员\n\n![image-20221012140439333](./SEReview/image-20221012140439333.png)\n\n### **演化过程模型（Evolutionary Model）**\n\n演化模型是迭代的过程模型。\n\n**原型开发（prototyping ）**：当需求很模糊的时候，原型开发可以帮助软件开发人员和利益相关者更好地理解究竟需要做什么。\n\n**优点：**\n\n1. 开发者与用户充分交流，可以澄清模糊需求，需求定义比其他 模型好得多\n2. 开发过程与用户培训过程同步\n\n3. 为用户需求的改变提供了充分的余地\n\n4. 开发风险低，产品柔性好\n\n5. 开发费用低，时间短\n\n6. 系统易维护，对用户更友好\n\n\n**缺点：**\n\n1. 没有考虑软件的整体质量和长期的可维护性。\n\n2. 大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为它的方便，还有不合适的操作系统被选择等等。\n\n3. 由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计。\n\n**适用范围：**\n\n尽管原型可以用作独立的流程模型，但它更常用作一种可以在任何流模型的上下文中实现的技术。\n\n![image-20221012140506865](./SEReview/image-20221012140506865.png)\n\n### **螺旋模型（Spiral Model）**\n\n螺旋模型是一种风险驱动型的过程模型生成器，对于软件集中的系统，它可以指导多个利益相关者的协同工作。\n\n**优点：**\n\n它结合了原型的迭代性质和瀑布模型的系统性和可控性特点。\n\n1. 强调风险\n\n2. 强调阶段质量\n\n3. 提供纠错的机会\n\n4. 使用原型作为风险降低机制，进一步使开发人员能够在产品演变的任何阶段应用原型方法。\n\n**缺点：**\n\n1. 每个阶段都要提出被选方案，进行风险分析，研发周期长，效率低\n\n2. 必须要转业的风险分析人员的参与\n\n3. 如果没有发现和管理重大风险，问题无疑将会发生。\n\n**适用范围：**大型项目\n\n![image-20221012140533502](./SEReview/image-20221012140533502.png)\n\n### **协同模型（concurrent development model）**\n\n有时候又称为协同工程，它允许软件团队表述本章所描述的任何模型中的迭代和并发元素。\n\n协同建模提供了项目当前状态的准确画面。\n\n**适用范围**：所有类型的软件开发，协同模型通常更适合涉及不同工程团队的产品工程项目。\n\n![image-20221012140549113](./SEReview/image-20221012140549113.png)\n\n### **统一过程模型（Unified Process）**\n\n统一过程模型是一种“用例驱动、以体系结构为核心、迭代及增量”的软件 过程框架，由UML 方法和工具支持。它是一种增量模型，定义了五个阶段：\n\na、起始阶段，包括用户沟通和计划活动，强调定义和细化用例\n\nb、 细化阶段，包括用户沟通和建模活动，重点是创建分析和设计模型。\n\nc、构件阶段，细化模型设计，并将设计模型转化为软件构件实现\n\nd、 转化阶段，将软件从开发人员传递给最终用户，并由用户完成 beta 测试和验收测试\n\ne、生产阶段，持续地监控软件的运行，并提供技术支持。\n\n**优点：**\n\n1. 任何功能开发后就进入测试过程，及早进行验证\n\n2. 早期风险识别，采取预防措施\n\n**缺点：**\n\n1. 需求必须在开始之前完全弄清楚，否怎有可能在架构上出现错误\n\n2. 必须有严格的过程管理，以免使过程退化为原始的试→错→改模式\n\n3. 如果不加控制的让用户过早接触没有测试完全，版本不稳定的产品可能对用 户和开发团队都带来负面的影响。\n\n   ![image-20221012140630219](./SEReview/image-20221012140630219.png)\n\n# **Agile Development**\n\n## 敏捷与敏捷过程\n\n不管怎么定义敏捷，一定离不开**「短周期地频繁交付」**\n\n**敏捷宣言（Agile development manifesto）：**\n\n- 个人和这些个人之间的交流胜过了开发过程和工具\n- 可运行的软件胜过了宽泛的文档\n- 客户合作胜过了合同谈判\n\n- 对变更的良好响应胜过了按部就班地遵循计划\n\n## **极限编程（Extreme Programming (XP)）**\n\n> **极限编程中的「极限(Extreme)」是指将我们认同的有效软件开发原理和实践应用到极限，频繁地去实践，**\n>\n> 极限编程核心是测试驱动开发、持续集成、用户故事等具体落地的实践\n\n极限编程是敏捷软件开发使用最广泛的一个方法。\n\n**极限编程过程:**\n\n**1.策划：**\n\n1. 开始创造“用户故事”\n\n2. 敏捷团队评估每个故事并分配一个成本（开发周数）\n\n3. 故事被分组到一个可交付增量\n\n4. 承诺在交付日期进行\n\n5. 在第一次递增之后，“项目速度”用于帮助估计后续发行版本的发布日期和进度安排，确定是否对整个开发项目中的所有故事有过分承诺。\n\n\n**2.设计**\n\n1. 遵循 KIS（保持简洁）原则\n\n2. 鼓励使用 CRC（类-责任-协作者）卡（见第 8 章）\n\n3. 对于困难的设计问题，建议创建“尖峰解决方案”——一个设计原型\n\n4. 鼓励“重构”： 重构是以不改变代码外部行为而改进其内部结构的方式来修改软件系统的过程。\n\n\n**3.编码**\n\n1. 在编码开始之前，建议对故事进行单元测试\n\n2. 鼓励“结队编程”\n\n\n**4.测试**\n\n1. 所有的单元测试每天都执行\n\n2. “验收测试”，由客户规定技术条件，并且着眼于客户可见的、可评审的系统级的特征和功能。\n\n\n![image-20221012140748468](./SEReview/image-20221012140748468.png)\n\n## **工业极限编程（Industrial XP （IPX））**\n\nIXP 是 XP 的一种有机进化。它由 XP 的最低限要求、以客户为中心、测试驱动精神组成。\n\nIXP 和 XP 的主要差别在于其管理具有更大的包容性，它扩大了用户角色，升级了技术实践。\n\nIXP 合并了**六个新实践**：\n\nReadiness assessment(项目准备)\n\nProject community(项目社区)\n\nProject chartering（项目承租）\n\nTest-driven management （测试驱动管理）\n\nRetrospectives.（回顾）\n\nContinuous learning （持续学习）\n\n## Scrum\n\n## Kanban\n\n## DevOps\n\n\n\n#  Recommended Process Model \n\n\n\n# **Human Aspects of Software** Engineering\n\n# 指导实践的原则\n\n# **Understanding Requirements**\n\n## **需求工程（Requirement engineering）**\n\n**七个任务**\n\n**1.起始（Inception）：**在项目起始阶段，要建立基本的理解，包括对问题、谁需要解决方案、所期望解决方案的性质、与项目利益相关者和开发人员之间达成初步交流合作的效果。\n\n**2.导出（Elicitation –gathering requirements）：**询问客户、用户和其他人，系统或产品的目标是什么，想要实现什么，系统和产品如何满足业务的要求，最终系统或产品如何利用于日常工作。\n\n**3.精化（Elaboration-requirement modeling）：**在起始和导出阶段获得的信息将在精化阶段进行扩展和提炼该任务集中于开发一个精确的需求模型。\n\n**4.协商（Negotiation-win-win）：**使用迭代的方法给需求排序，评估每项需求对项目产生的成本和风险，表述内部冲突，删除、组合和修改需求，以便参与各方均能达到一定的满意度，实现双赢。\n\n**5.规格说明（Specification-document，Model，prototype）：**一个规格说明可以是一份写好的文档、一套图形化的模型、一个形式化的数学模型、一组使用场景、一个原型或上述各项的任意组合。\n\n**6.确认（Validation-Quality assess）：**在确认这一步对需求工程的工作产品进行质量评估。\n\n**7.需求管理（Management-Change）：**基于计算机的系统其需求会变更，并且变更的要求贯穿于系统的整个生存期。需求管理是用于帮助项目组在项目进展中标识、控制和跟踪需求以及需求变更的一组活动。\n\n## **需求建模的元素**\n\n![image-20221012140837195](./SEReview/image-20221012140837195.png)\n\n![image-20221012140842657](./SEReview/image-20221012140842657.png)\n\n# 需求建模—推荐的方法\n\n## 基于场景(Scenario-Based)建模（功能）\n\n使用基于场景的方法可以从用户的视角描述系统。\n\n开发**用例图**时，应列出特定参与者执行的功能或活动。\n\n例：\n\n![image-20221012140858481](./SEReview/image-20221012140858481.png)\n\n![img](软件工程知识点复习总结.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png)\n\n### 用例模板：\n\n|       **用例**       | 在ATM上取款                                                  |\n| :------------------: | :----------------------------------------------------------- |\n|      **参与者**      | 取款人                                                       |\n|       **目标**       | 从ATM中取到钱                                                |\n|     **前提条件**     | ATM机正常工作，取款人持银行卡取款。                          |\n|     **触发条件**     | 取款人将卡插入卡槽                                           |\n|    **基本事件流**    | 1.     触发条件：取款人将卡插入卡槽。<br>  2.     取款人将卡插入卡槽。<br/>  3.     取款人输入密码。 <br/> 4.     取款人选择“取款”。  <br/>5.     取款人取钱。  <br/>6.     取款人选择“退出”。 |\n|    **异常事件流**    | 1. 卡无效或自动柜员机没有所需现金。<br/>  2. 密码不正确:重新输入正确的密码。<br/>  3. 选择提款时ATM机里的现金不足，提款人取不到钱。 <br/> 4. 选择退出时ATM出现问题，卡被吞 |\n|     **后置条件**     | ATM机恢复待机状态，后台数据库更新用户余额，短信提醒取钱成功与剩余余额 |\n|      **优先级**      | 必须执行                                                     |\n|      **可用时**      | 第一个增量                                                   |\n|     **使用频率**     | 每天多次                                                     |\n|    **参与者渠道**    | 通过操作面板。                                               |\n|    **次要参与者**    | 记录数据库                                                   |\n| **次要参与者的渠道** | 记录数据库、互联网                                           |\n|     **开放问题**     | 要有防止用户卡被机器吞食的保护机制。<br>定义一个固定的时间长度，取款可以停留在操作界面上而不进行任何操作 |\n\n## **基于类的建模**\n\n基于类建模表示了系统操作的对象、应用于对象间能有效控制的操作、这些对象间的关系以及已定义类之间的协作。\n\n基于类的分析模型包括类和对象、属性、操作、类的职责协作者（CRC）模型、协作图和包。\n\n### **识别分析类**\n\n7种可能的类：\n\n**外部实体**（其他系统、设备、人员），产生或实验基于计算机系统的信息。\n\n**事物**（报告、显示、字母、信号），问题信息域的一部分。\n\n**偶发事件或事件**（所有权转移或完成机器人的一组移动动作），在系统操作环境内发生。\n\n**角色**（经理，工程师，销售人员），由和系统交互的人员扮演\n\n**组织单元**（部门，组，团队），和某个应用系统相关\n\n**场地**（制作车间或码头），建立问题的环境和系统的整体功能\n\n**结构**（传感器、交通工具、计算机），定义了对象的类或与对象相关的类。\n\n\n\n### **类-职责-协作者建模（*Class-responsibility-collaborator* CRC）**\n\nCRC 模型实际上是表示类的标准索引卡片的集合。每个类一个卡片\n\n**三部分：**顶部写类名，左侧列出类的职责，右侧部分列出了类的协作者。\n\n<img src=\"image-20221019150622381.png\" alt=\"image-20221019150622381\" style=\"zoom:50%;\" />\n\n**类：**\n\nEntity classes **实体类**：一般代表保存在数据库中和贯穿应用程序的事物。\n\nBoundary classes **边界类**：创建用户可见的和在使用软件时交互的接口\n\nController classes **控制类**：管理“控制单元”\n\n**职责：**\n\n职责的基本原则：\n\n**属性**：描述了已经选择包含在需求模型中的类\n\n**操作**：定义了某个对象的行为。\n\n5 个指导原则：\n\n1.智能系统应分布所有类中以求地满足问题的需求。\n\n2.每个职责的说明应尽可能具有普遍性。\n\n3.信息和与之相关的信息应局限于一个类中而不要分布在多个类中。\n\n4.信息和与之相关的行为应该放在同一类中。\n\n5.适合时，职责应由相关类共享。\n\n### UML 图示例\n\n**UML类图**：\n\n类的关系：\n\n- 关联：实例有关系，一对多，一对一等关系\n- 泛化：is kind of,**继承**，空心三角\n- 聚合：is part of，空心菱形\n\n![image-20221214151330971](./SEReview/image-20221214151330971.png)\n\nUML**活动图**在特定场景通过提供迭代流的图形表示来补充用例。例：\n\n- 并行使用同步条\n- 可以用来替代程序流程图，反过来不行\n\n<img src=\"image-20221019161158995.png\" alt=\"image-20221019161158995\" style=\"zoom: 80%;\" />\n\n**UML时序图：**作为时间的函数，表示事件如何从一个对象流向另一个对象。\n\n<img src=\"image-20221019155252489.png\" alt=\"image-20221019155252489\" style=\"zoom:80%;\" />\n\nUML**泳道图**是**活动图的一种有用变化**，可以让建模人员表示用例所描述的活动流，同时指示哪个参与者或分析类是由活动矩形所描述的活动来负责。\n\n<img src=\"image-20221019160521548.png\" alt=\"image-20221019160521548\" style=\"zoom:80%;\" />\n\n## **基于行为模型**\n\n生成行为模型的步骤：\n\n1.评估所有的用例，以保证完全理解系统内的交互顺序\n\n2.识别驱动交互顺序的事件，并理解这些事件如何与特定的对象相互关联\n\n3.为每个用例生成序列\n\n4.创建系统状态图\n\n5.评审行为模型以验证准确性和一致性。\n\n**状态图：**\n\n**UML 状态图**就是一种行为模型，该图为每个类呈现了主动状态和导致这些主动状态变化的事件。\n\n例:\n\n![image-20221214151457611](./SEReview/image-20221214151457611.png)\n\n<img src=\"image-20221019160823423.png\" alt=\"image-20221019160823423\" style=\"zoom:67%;\" />\n\n**时序图**：\n\n![image-20221214152126659](./SEReview/image-20221214152126659.png)\n\n**泳道图：**\n\n\n\n# **设计概念(Design Concepts)**\n\n## 软工语境下的设计\n\n**软件工程设计：**\n\n- 数据/类设计——将分析类转换为实现类和数据结构。\n- 架构设计——定义主要软件结构元素之间的关系。\n- 接口设计——定义软件元素、硬件元素和终端用户之间的通信方式。\n- 组件级设计——将结构元素转换为软件组件的过程描述。\n\n**将需求模型映射到设计模型:**\n\n<img src=\"image-20221019162512098.png\" alt=\"image-20221019162512098\" style=\"zoom: 67%;\" />\n\n## 设计过程\n\n\n\n## 设计原则\n\n1. **抽象（Abstraction）：**\n\n   **过程抽象**是指具有明确和有限的指令序列（描述动作）\n\n   **数据抽象**是描述数据对象的冠名数据集合（描述动作怎么做）\n\n2. **体系结构（Architecture）**：软件的整体结构和这种结构为系统提供概念完整方式。构件表示主要的系统元素及其交互。\n\n3. **模式（Patterns）**：模式承载了已证实的解决方案的精髓。设计模式描述了在某个特定场景与可能影响模式应用和使用方法的“影响力”中解决某个特定的设计问题的设计结构。\n\n4. **关注点分离（Separation of concerns）**：它表明任何复杂问题如果被分解为可以独立解决和优化的若干块，该复杂问题能够更容易的被处理。\n\n5. **模块化（Modularity）**：模块化是关注点分离最常见的表现。模块化设计使得开发工作更易规划。\n\n   <img src=\"image-20221026145144103.png\" alt=\"image-20221026145144103\" style=\"zoom: 50%;\" />\n\n6. **信息隐蔽（Hiding）**信息隐蔽原则[Par72]建议模块应该“具有的特征是：每个模块对其它所有模块都隐藏自己的设计决策”。隐蔽定义并加强了对模块内过程细节的访问约束和对模块所使用的任何局部数据结构的访问约束。\n\n7. **功能独立（Functional independence）**：开发具有“专一”功能和低耦合性的模块即可实现功能独立。\n\n8. **逐步求精（Stepwise refinement）**：通过连续精化过程细节层次来实现程序的开发，通过逐步分解功能的宏观陈述直到形成程序设计语言的语句来进行层次开发。\n\n   <img src=\"image-20221026150156120.png\" alt=\"image-20221026150156120\" style=\"zoom:67%;\" />\n\n   <font>抽象和逐步求精是互补的概念。</font>\n\n9. **方面（Aspects）**：一个方面作为一个独立的模块进行实施，而不是作为“分割的”或者和许多构件“纠缠的”软件片段进行实施。设计体系结构应当支持定义一个方面，该方面即一个模块，该模块能够使该关注点经过它横切的所有其他关注点而得到实施。\n\n10. **重构（Refactoring）**：重构是使用这样一种方式改变软件系统的过程：不改变代码的外部行为而是改进其内部结构。\n\n11. **面向对象的设计概念（OO design concepts）:**面向对象概念（类、对象、继承、消息和多态）\n\n12. **设计类（Design Class**）：提供设计细节，使程序得以实施。\n\n    1. 完整（Complete）—（包括所有必要的属性和方法)和充分(只包含实现类意图所需的方法)。\n    2. 原生性（Primitiveness）——每个类方法都专注于提供一个服务。\n    3. 高内聚（High cohesion）——小的，集中的，专注的class。\n    4. 低耦合（Low coupling）——类的协作保持在最小值\n\n\n**设计概念强调了：**\n\n1. 抽象的必要性，它提供了一种创造可重用软件构件的方法\n2. 体系结构的重要性，它使得能够更好地理解系统整体结构\n3. 基于模式的工程的有益性，它是一项用于已证明能力的软件的设计技术\n4. 关注点分离和有效的模块化的价值，他们使得软件更容易理解、更容易测试以及更容易维护。\n5. 信息隐藏的直接作用，当错误发生时，它能够减少负面影响的传播\n6. 功能独立的影响，他是构造有效模块的标准\n7. 求精作为一种设计方法的作用\n8. 横切系统需求方面的考虑\n9. 重构的应用，他是为了优化已导出的设计\n10. 面向对象的类和与类相关特征的重要性\n\n## 设计模型\n\n![image-20221026150428993](./SEReview/image-20221026150428993.png)\n\n**数据设计元素**：数据设计创建在高级抽象级上表示的数据模型和信息模型。\n\n**体系结构设计元素**：体系结构设计元素通常描述为一组相互关联系统的子系统，且常常从需求模型中的分析包中派生出来。\n\n**接口设计元素**：软件接口设计元素描述了信息如何流入和流出系统以及被定义为体系结构一部分的构件之间是如何通信的。\n\n==接口设计有 3 个重要的元素：==\n\n（1）用户界面\n\n（2）和其他系统、设备、网络或其他信息生成者或使用者的外部接口\n\n（3）各种设计构件之间的内部接口\n\n**构件级设计元素**：软件的构件级设计完整地描述了每个软件构件的内部细节。构件级设计为所以局部数据对象定义数据结构，为所有在构件内发生的处理定义算法细节，并定义允许访问所有构件操作的接口。\n\n**部署级设计元素：**部署级设计元素指明软件功能和子系统将如何在支持软件的物理计算环境内分布。\n\n# **体系结构设计**Architectural Design – A Recommended Approach\n\n## 软件体系结构\n\n### 定义\n\n**程序或计算机系统的软件体系结构是指系统的一个或者多个结构，它包括==软件构件==、==构件的外部可见属性==以及==它们之间的相互联系==**。\n\n**体系结构==并非可运行的程序==。**\n\n确切的说，它是一种表达,是能够：\n\n1. 对设计在满足既定需求方面的**有效性进行分析**\n2. 在设计变更相对容易的阶段，考虑体系结构**可能的替换方案**\n3. **降低**与软件构造相关的**风险**\n\n### **体系结构重要的 3 个关键原因**\n\n1. 软件体系结构的表示有助于对计算机系统开发感兴趣的各方展开交流。\n2. 体系结构突出了早期的设计决策，这些决策对随后所有的软件工程工作有深远影响，同时对系统作为一个可运行实体的最后成功有重要作用\n3. 体系结构“构建了一个相对小的、易于理解的模型，该模型描述了系统如何构成以及其构件如何一起工作\n\n### **体系结构风格**\n\n1. 以数据为中心的体系结构。\n2. 数据流体系结构。\n3. 调用和返回体系结构\n4. 面向对象体系结构\n5. 层次体系结构\n\n### **体系结构环境图（ACD）**\n\n上级系统：这些系统把目标系统作为某些高层处理方案的一部分\n\n下级系统：这些系统被目标系统使用，并为完成目标系统的功能提供必要的数据和处理\n\n同级系统：这些系统在对等的基础上相互作用\n\n参与者：通过产生和消耗必要处理所需的信息，实现与目标系统交互的实体（人，设备）\n\n![image-20221210134301873](./SEReview/image-20221210134301873.png)\n\n# **Component-Level Design**\n\n- 体系设计——建筑平面图、结构、房间和外部环境之间的连接机制\n\n- 构件级设计——每个房间的内部**细节设计**\n\n## 概念\n\n1. 构件是计算机软件中的一个模块化的构造块。\n\n2. OMG 定义构件：系统中模块化的、可部署的和可替换的部件，该部件封装了实现并暴露一组接口。\n\n关于什么是组件的三个重要观点：\n\n- **面向对象的观点（Object-Oriented view）：**构件包括一组协作的类。\n\n\t![image-20221210135030701](./SEReview/image-20221210135030701.png)\n\n- **传统观点（Traditional View）：**一个构件就是程序的一个功能要素，程序由处理逻辑及实现处理逻辑所需的每部数据结构以及能够保证构件被调用和实现数据传递的结构构成。\n\n\t![image-20221210135053957](./SEReview/image-20221210135053957.png)\n\n- **流程相关的观点（Process-related view）**：构建使用现有软件组件或设计模式的系统。\n\n## 设计基于类的构建\n\n### **基本设计原则**\n\n**4个基本设计原则和3个附加打包原则：**\n\n1. **开闭原则（Open-Closed Principle ，OCP）：**模块应该对外延具有开放性，对修改具有封闭性。符合开放封闭原则的模块都有两个主要特性：\n\t1. **它们 \"面向扩展开放（Open For Extension）\"：**也就是说模块的行为是能够被扩展的。当应用程序的需求变化时，我们可以使模块表现出全新的或与以往不同的行为，以满足新的需求。\n\t2. **它们 \"面向修改封闭（Closed For Modification）\"：**模块的源代码是不能被侵犯的，任何人都不允许修改已有源代码。\n2. **依赖倒置原则（Dependency Inversion Principle ，DIP）：**依赖于抽象，而非具体实现。\n3. **Liskov 替换原则（Liskov Substitution Principle (LSP)）：**子类可以替换他们的基类。\n4. **接口分离原则（The Interface Segregation Principle (ISP)）：**多个客户专用接口比一个通用接口好\n5. **发布复用等价性原则（The Release Reuse Equivalency Principle，REP）：**复用的粒度就是发布的粒度\n6. **共同封装原则（The Common Closure Principle (CCP)）：**一同变更的类应该合在一起\n7. **共同复用原则（The Common Reuse Principle (CRP））：**不能一起复用的类不能被分到一组\n\n### 设计准则\n\n- **内聚性（Cohesion）：**内聚性意味着构件或者类只封装那些相互关联密切，以及与构件或类自身有亲密关系的属性和操作。\n\n\t- 功能内聚：主要通过操作来体现，当一个模块只完成某一组特定操作并返回结果时，就称此模块是功能内聚的。\n\n\t- 分层内聚：高层能够访问低层的服务，但低层不能访问高层的服务。\n\n\n\t- 通信内聚：访问相同数据的所有操作被定义在同一个类中。（数据的查询，访问，存储）\n\n\n- **耦合性（Coupling）：**从高到低\n- 耦合是类之间彼此联系程度的一种定性度量。随着类（构件）相互依赖越来越多，类之间的耦合程度亦会增加。\n\t\n- 内容耦合：暗中修改其他构件的内部数据，这违反了信息隐蔽原则\n\t\n- 公用耦合：当大量的构件都要使用同一个全局变量时发生这种耦合\n\t\n- 控制耦合：当操作 A 调用操作 B，并向 B 传递控制标记时，就会发生这种耦合。\n\t\n- 标记耦合：当类 B 被声明为类 A 某一操作中的一个参数类型时，就会发生这种耦合。\n\t\n- 数据耦合：当操作需要传递长串的数据参数时，就会发生这种耦合。\n\t\n- 例程调用耦合：当一个操作调用另一个操作时，就会发生这种耦合。\n\t\n- 类型使用耦合：当构件 A 使用了在构件 B 中定义的一个数据类型时，就会发生这种耦合。\n\t\n- 包含或者导入耦合：当构件 A 引入或者包含一个构件 B 的包或者内容时，就会发生这种耦合。\n\t\n- 外部耦合：当一个构件和基础设施构件进行通信和协作时，就会发生这种耦合。\n\n\n**为什么要高内聚?**\n\n模块之间的关系越紧密,出错就越少!\n\n**为什么要低耦合?**\n\n子程序间的关系越复杂,就会产生更多的意想不到的错误!会给以后的维护工作带来很多麻烦!\n\n高内聚低耦合，是软件工程中的概念，是判断设计好坏的标准，主要是面向对象的设计，主要是看类的内聚性是否高，耦合度是否低。\n\n## 基于O-O的组件设计\n\n![image-20221214155233138](./SEReview/image-20221214155233138.png)\n\n静态类图\n\n动态协作图（等价于时序图）\n\n## 传统组件级设计\n\n![image-20221214155441736](./SEReview/image-20221214155441736.png)\n\n## 执行组件级设计\n\n### 组件级设计\n\n1. 确定与问题域对应的所有设计类。\n\n2. 确定与基础架构域对应的所有设计类。\n\n3. 详细说明所有没有作为可重用组件获得的设计类。\n\n\t1. 指定类或组件协作时的消息细节。\n\t2. 为每个组件确定适当的接口。\n\t3. 详细说明属性并定义实现它们所需的数据类型和数据结构。\n\t4. 详细描述每个操作中的处理流程。\n\n4. 描述持久数据源(数据库和文件)并确定管理它们所需的类。\n\n5. 开发并详细描述一个类或组件的行为表示。\n\n6. 精心设计部署图，以提供额外的实现细节。\n\n\t![image-20221210141113852](./SEReview/image-20221210141113852.png)\n\n7. 考虑每个组件级设计表示形式，并始终考虑备选方案。\n\n## 专门的组件级设计\n\n### WebApps的组件级设计\n\n**WebApp组件是:**\n\n- 定义良好的内聚函数，用于操作内容或为最终用户提供计算或数据处理。\n\n- 内容和功能的内聚包，为最终用户提供一些所需的功能。\n\n## 组件重构（Component refactoring）\n\n# User Experience Design.\n\n## 用户体验元素\n\n![image-20221210142236309](./SEReview/image-20221210142236309.png)\n\n- 信息架构\n- 用户界面设计\n- 可用性工程\n- 可视化设计\n\n![image-20221210142751755](./SEReview/image-20221210142751755.png)\n\n## 黄金原则\n\n### 用户操纵控制\n\n（1）以不强迫用户进入不必要的或不希望的动作的方式来定义交互模式\n\n（2）允许用户交互被中断和撤销\n\n（3）当技能级别增长时可以使交互流线化并允许定制交互\n\n（4）使用用户与内部技术细节隔离开来\n\n（5）设计应允许用户与出现在屏幕上的对象直接交互\n\n### **减少用户的记忆负担**\n\n（1）减少对短期记忆的要求\n\n（2）建立有意义的缺省\n\n（3）定义直观的快捷方式\n\n（4）以不断进展的方式揭晓信息\n\n### **保持界面一致**\n\n（1）允许用户当前任务放入有意义的环境中\n\n（2）在应用系统家族内保持一致性\n\n（3）如果过去的交互模型已经建立起了用户期望，除非有迫不得已的理由，doze 不要改变它。\n\n## UI分析与设计\n\n### UI分析任务\n\n![image-20221214155932626](./SEReview/image-20221214155932626.png)\n\n### UI设计模型\n\n工程师建立**用户模型**。软件工程师创建**设计模型**。最终用户在脑海中对界面产生映像，称为用户的**心理模型**或系统感觉。系统的实现者创建**实现模型**。\n\n- **用户模型：**确定了系统最终用户的轮廓。\n- **设计模型：**用户界面的设计\n- **心理模型：**最终用户在脑海里对系统产生的印象。\n- **实现模型：**组合了计算机系统的外在表现，结合了所有用来描述系统语法和语言的支撑信息。\n\n### 流程\n\n用户界面的分析和设计过程是迭代的，用户界面分析和设计过程**开始于螺旋模型的内部**，并且包括 4 个阶段：\n\n- 界面分析及建模。\n- 界面设计。\n- 界面构造。\n- 界面确认。\n\n![image-20221210143134777](./SEReview/image-20221210143134777.png)\n\n界面设计的目标是定义一组界面对象和动作，使得用户能够以满足系统所定义的每个使用目标的方式完成所有定义对的任务。\n\n## UX分析与设计\n\n## UI设计\n\n### **接口设计步骤**\n\n1. 使用在接口分析期间开发的信息，**定义接口对象和操作**。\n2. 定义将导致用户界面状态改变的事件**(用户操作)**。模仿这种行为。\n3. **描述每个界面状态**，就像它将实际地看给最终用户一样。\n4. 指示用户如何从接口提供的信息中解释系统的状态。\n\n### 例子*SafeHome*\n\n- **用例：**为了远程访问SafeHome，房主提供一个标识符和一个密码。这些定义了访问的级别（如并非所有用户均可以重新配置系统）并提供安全保证。一旦确认身份，用户（具有全部访问权限）检查系统状态并通过启动或关闭系统改变状态。用户通过显示房子的建筑平面图、观察每个安全传感器、显示每个当前配置区域以及必要时修改区域而重新配置系统。用户通过策略地放置的摄像头观察房子内部。用户可以摇动和变焦每个摄像头而提供房子内部的不同视角。\n\n- **定义对象和动作**：\n\n\t![image-20221210144633032](./SEReview/image-20221210144633032-16706547958251.png)\n\n- **分类对象：**\n\n\t![image-20221210144807793](./SEReview/image-20221210144807793.png)\n\n- **屏幕布局：**\n\n\t![image-20221210144917207](./SEReview/image-20221210144917207.png)\n\n\t\n\n### **UI设计模式**\n\n设计模式是为特定的、有良好边界的设计问题规定设计解决方案的一种抽象。\n\n**界面设计模板（win, android, os）**\n\n- 鼠标，滚动条，下拉菜单，弹出窗口，状态栏，图标，进度条，树形列表，触摸操作\n\n## 设计评价\n\n![image-20221210145132156](./SEReview/image-20221210145132156.png)\n\n## 可用性和可访问性\n\n可用性是指用户在使用高科技产品所提供的功能和特性时，对使用的容易程度和有效程度的定量测量。\n\n## 传统软件的用户体验和移动性\n\n# Design for Mobility.\n\n## 挑战\n\n## 移动开发生命周期\n\n## 移动架构设计\n\n## 上下文感知APP\n\n## 网页设计金字塔\n\n## 组件级别设计\n\n## 移动设计质量\n\n质量属性（quality attributes ）\n\n![image-20221210165149285](./SEReview/image-20221210165149285.png)\n\n![image-20221210165247462](./SEReview/image-20221210165247462.png)\n\n**六个特性：功能性、可靠性、易用性、效率、维护性、可移植性**\n\n1. **功能性：**当软件在指定条件下使用时，软件产品提供满足明确和隐含要求的功能的能力\n\t1. 适合性：软件产品为指定的任务和用户目标提供一组合适的功能的能力\n\t2. 准确性：软件产品提供具有所需精度的正确或相符的结果或效果的能力\n\t3. 互操作性：软件产品与一个或更多的规定系统进行交互的能力\n\t4. 安全保密性：软件产品保护信息和数据的能力\n2. **可靠性：**在指定条件使用时，软件产品维护规定的性能级别的能力\n\t1. 成熟性：软件产品为避免由软件中故障而导致失效的能力\n\t2. 容错性：在软件出现故障或者违反其指定接口的情况下，软件产品维持规定的性能级别的能力\n\t3. 易恢复性：在失效发生的情况下，软件产品重建规定的性能级别并恢复受直接影响的数据的能力\n3. **易用性：**在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力\n\t1. 易理解性：使用用户能理解软件是否合适及如何能将软件用于特定的任务的能力\n\t2. 易学性：使用用户能学习其应用的能力\n\t3. 易操作性：使用户能操作和控制它的能力\n\t4. 吸引性：软件产品吸引用户的能力\t\n4. **效率：**在规定条件下，相对于所用资源的数量，软件产品可提供适当性能的能力\n\t1. 时间特性：软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力\n\t2. 资源利用性：软件执行其功能时，使用合适数量和类别的资源的能力\n5. **维护性：**软件产品可被修改的能力。包括纠正、改进或对环境、需求和功能规格说明变化的适应\n\t1. 易分析性：诊断软件中的缺陷或失效原因或识别待修改部分的能力\n\t2. 易改变性：使指定的修改可以被实现的能力\n\t3. 稳定性：避免由于软件修改而造成意外结果的能力\n\t4. 易测试性：使已修改软件能被确认的能力\n6. **可移植性：**软件产品从一种环境迁移到另外一种环境的能力\n\t1. 适应性：无需采用额外的活动或手段就可适应不同指定环境的能力\n\t2. 易安装性：软件产品在指定环境中被安装的能力\n\t3. 共存性：在公共环境中同与其分享公共资源的其他独立软件共存的能力\n\t4. 易替换性：在同样的环境下，替代另一个相同用途的指定软件产品的能力\n\n# Pattern-Based Design\n\n## Design Pattern\n\n## 基于模式的软件设计\n\n## 体系结构设计\n\n## 组件级设计模式\n\n## Anti-patterns\n\n## 移动设计模式\n\n\n\n# **Software Testing Strategies**\n\n## 概述\n\n**测试：**测试是在交付给最终用户之前以特定意图找出错误为目的来执行程序的过程。\n\n**验证与确认**（Verification and Validation，V&V）：\n\n- **验证**是指确保软件正确地实现某一特定功能的一系列活动。\n- **确认**是指确保开发的软件可追溯到客户需求的另外一系列活动。\n\n![image-20221210151413472](./SEReview/image-20221210151413472.png)\n\n## 测试策略：从小到大\n\n![image-20221214160040929](./SEReview/image-20221214160040929.png)\n\n\n\n# **Testing Conventional Applications**\n\n## **单元测试**\n\n### 概念\n\n**侧重点：**\n\n- 单元测试侧重于软件设计的**最小单元（软件构件或模块）的验证工作**。\n\n- 单元测试侧重于**构件的内部处理逻辑和数据结构**。\n\n\n可以对多个构件并行执行。\n\n测试模块的接口是为了保证被测试程序单元的信息能够正常地流入和流出；\n\n检查局部数据结构以确保临时存储的数据在算法的整个执行过程中能维持其完善性。\n\n执行控制结构中的所有独立路径（基本路径）以确保模块中的所有语句至少执行一次。\n\n测试边界条件确保模块在到达边界值得极限或受限处理的情形下仍能正确执行。\n\n最后要对所有的错误处理路径进行测试。\n\n在单元测试期间，选择测试的执行路径是最基本的任务。\n\n边界测试时最重要的单元测试任务之一。\n\n### **单元测试过程**\n\n![image-20221210152614210](./SEReview/image-20221210152614210.png)\n\n**驱动模块：**接收测试用例数据，将这些数据传递给被测模块，并输出结果。\n\n**桩：**替换那些从属于被测模块的模块\n\n当设计高内聚的构件时，就可以简化单元测试。当构件只强调一个功能时，测试用例数就会降低，且比较容易预见错误和发现错误。\n\n## **集成测试**\n\n### 概念\n\n集成测试时构造软件体系结构的系统化技术，同时也是进行一些旨在发现与接口相关的错误的测试。\n\n**集成测试的目标是利用单元测试的构件建立设计中描述的程序结构。**\n\n- **自顶向下集成：**自顶向下集成测试是一种构造软件体系结构的增量方法。\n- **深度优先：**深度优先集成是首先集成位于程序结构中主控路径上的所有控件。\n\n- **广度优先：**广度优先集成首先沿水平方向，将属于同一层的构件集成起来。\n\n### **自顶向下集成过程：**\n\n1. 主控模块作为测试驱动模块，用桩模块代替直接附属的下层模块；\n2. 根据所选的集成策略（深度优先/广度优先），每次用一个实际模块替换一个桩模块；\n\n3. 每集成一个模块都进行测试；\n4. 完成每个测试集之后，用实际模块替换另一个桩模块；\n\n5. 可以进行回归测试（即全部或部分地重复已做过的测试），以避免引入新错误。\n\n6. 回到第 2 步继续执行此过程，直到完成整个程序结构的构造。\n\n\n### **自底向上集成测试：**\n\n就是从原子模块（程序结构的最底层构件）开始进行构造和测试。\n\n**自底向上集成测试过程：**\n\n1.连接底层构件以构成完成特定子功能的簇。\n\n2.编写驱动模块（测试的控制程序）以协调测试用例的输入和输出\n\n3.测试簇\n\n4.去掉驱动程序，沿着程序结构向上逐步连接簇\n\n![image-20221214160510145](./SEReview/image-20221214160510145.png)\n\n## **回归测试**\n\n回归测试重新执行已测试过的某些子集，以确保变更没有传播不期望的副作用。\n\n回归测试有助于保证变更不引入无意思行为或额外的错误。\n\n回归测试可以手工进行，方法是重新执行所以测试用例的子集，或者利用捕捉/回放工具自\n\n动进行。\n\n# **Testing Object-Oriented Applications**\n\n## **面向对象软件的测试策略**\n\n面向对象软件的**类测试**等同于传统软件的**单元测试**。\n\n不同的是：\n\n- 传统软件单元测试侧重于**模块的算法细节和模块接口数据**；\n\n- 面向对象类的测试侧重于封装在该类中的**操作和类的状态行为**。\n\n封装的类是单元测试的重点，但不再孤立地对单个操作进行测试，而是将其作为类的一部分。\n\n簇测试是面向对象软件集成测试中的一个步骤。\n\n## **确认测试（Validation Testing）**\n\n确认测试准则：**软件确认是通过一系列表明与软件需求相符合的测试而获得的。**\n\n### **α测试（Alpha testing）内部测试：**\n\nα测试测试是由代表性的最终用户**在开发者的场所进行**。软件在自然的环境下使用，开发者站在用户的后面观看，并记录错误和使用问题。α测试在受控的环境下测试。\n\n### **β测试（Beta testing）外部测试：**\n\n又称**客户验收测试，Acceptance testing：**β测试在一个或多个最终用户场所进行。与α测试不同，开发者通常不在场，因此，β测试是在不为开发者控制的环境下软件的“现场”应用。是在不可控的环境下测试。\n\n## **系统测试**\n\n系统测试实际上是对整个基于计算机的系统进行一系列不同考验的测试。所有测试都是为了验证系统成分已经正确地集成在一起，并且完成了指派的功能。\n\n**恢复测试（Recovery testing）:**通过各种方式强制让软件以各种方式失败并验证恢复是否正确执行。\n\n**安全测试（Security testing）：**安全测试验证建立在系统内的保护机制是否能够实际保护系统不受非法入侵。\n\n**压力测试（Stress testing）：**压力测试的目的是是软件面对非正常的情形。是一种要求以非正常数量、频率或容量的方式进行彻底评估。\n\n**性能测试（Performance testing）：**性能测试用来测试软件在集成环境中的运行性能。\n\n**部署测试（Deployment testing）：**部有时也将署测试称为配置测试，是在软件将要在其中运行的每一种环境中测试软件。\n\n## **测试技术**\n\n### **白盒测试：**\n\n白盒测试有时也称为玻璃盒测试，是一种测试用例设计方法，它利用作为构件层设计的一部分描述的控制结构来生成测试用例。\n\n白盒测试是在了解模块内部结构的情况下进行的测试。\n\n利用白盒测试方法导出的测试用例可以：\n\n（1）保证一个模块中的所有独立路径至少被执行一次。\n\n（2）对所有的逻辑判定均需要测试取真和取假两个方面。\n\n（3）在上下边界及可操作的范围内执行所有的循环。\n\n（4）检验内部数据结构以确保其有效性。\n\n#### **基本路径测试（Basic path testing）**\n\n基本路径测试时由 TOM 首先提出的一种白盒测试技术。\n\n流图（程序图）是一种简单的控制流表示方法。流程图用于描述程序的控制结构，流程图映射为相应的流图。\n\n- **圆称为流图结点（flow graph node）**，表示一个或多个过程语句。\n- 处理框序列和一个菱形判定框可以映射为单个节点。\n\n- 流图中的箭头称为边或者连接，标识控制刘，类似于流程图中的箭头。\n\n- 由边和结点限定的区域称为域。当计算域时，将图的外部作为一个域。\n\n- 包含条件的结点称为判定结点，其特征是由它发射出两条或多条边。\n\n![image-20221214160934681](./SEReview/image-20221214160934681.png)\n\n![image-20221214160939104](./SEReview/image-20221214160939104.png)\n\n\n\n**独立路径：**是指任何贯穿程序的、至少引入一组新语句或一个新条件的路径。\n\n如果设计测试用例强迫执行这些路径（基本集合），就可以保证程序中的每条语句至少执行一次，同时，每个条件判断的真和假都被执行。\n\n![image-20221214161006496](./SEReview/image-20221214161006496.png)\n\n**环复杂度（Cyclomatic Complexity ）**计算方法：\n\n![image-20221214161011172](./SEReview/image-20221214161011172.png)\n\nV（G）的值提供了组成基本集合的独立路径的上街，并由此得出覆盖所有程序语句所需设计和运行的测试数量的上界。\n\n### **黑盒测试**\n\n\n\n黑盒测试也称为行为测试，侧重软件的功能需求。\n\n黑盒测试使软件工程师能设计出将测试程序所有功能需求的输入条件集。\n\n黑盒测试不是白盒测试的替代品，而是作为发现其他类型错误的辅助方法。\n\n黑盒测试试图发现以下类型的错误：\n\n（1）不正确或遗漏的功能\n\n（2）接口错误\n\n（3）数据用在测试的后期阶段\n\n（4）行为或性能错误\n\n（5）初始化和终止错误\n\n黑盒测试的方法：\n\nGraph-based testing methods 基于图的测试方法\n\nEquivalence partitioning 等价类划分\n\nBoundary value analysis 边界值分析\n\nOrthogonal array testing 正交数组测试\n\n黑盒测试的例子：\n\n![image-20221214161151723](./SEReview/image-20221214161151723.png)\n\n![image-20221214161155755](./SEReview/image-20221214161155755.png)\n\n![image-20221214161201230](./SEReview/image-20221214161201230.png)\n\n# 期末\n\n- 闭卷英文，有部分注解（熟悉状态图、体系结构、部署图、时序图等名称）\n\n- 题型：开放，灵活，无名词解释\n\n\t- 单选20 * 1\n\n\t- 判断分析 2 * 5\n\n\t- 看图分析L:irerative, scrum, XP, stgly等。解释图中原因\n\n\t- 问答 5 * 6：题型丰富，灵活应用。\n\n\t\t- 例如:public string, 违反封装（信息隐藏）概念\n\n\t- 30分：2 * 10 ， 2 * 5，10分开放题，20分画图+答题（活动图、程序流程、类图，UI界面（黄金原则），计算独立路径等）\n\n\t\t- 等价划分\n\n\t\t\t![image-20221228152205055](./SEReview/image-20221228152205055.png)\n\n\n## 重点\n\n![image-20221228152746207](./SEReview/image-20221228152746207.png)\n\n![image-20221228153224604](./SEReview/image-20221228153224604.png)\n\n![image-20221228153416006](./SEReview/image-20221228153416006.png)\n\n![image-20221228153458124](./SEReview/image-20221228153458124.png)\n\n![image-20221228153727751](./SEReview/image-20221228153727751.png)\n\n![image-20221228153813086](./SEReview/image-20221228153813086.png)\n\n![image-20221214162408194](./SEReview/image-20221214162408194.png)\n\n![image-20221214162414853](./SEReview/image-20221214162414853.png)\n\n![image-20221214162419950](./SEReview/image-20221214162419950.png)\n\n![image-20221214162433369](./SEReview/image-20221214162433369.png)\n\n![image-20221214162439934](./SEReview/image-20221214162439934.png)\n","source":"_posts/SEReview.md","raw":"---\ntitle: 软件工程知识点复习总结\ndate: {{ date }}\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: true\nsummary:\ntags:\ncategories: 软件工程\n---\n\n\n\n**Software：**\n\n（1）指令的集合，通过执行这些指令可以满足预期的特征、功能和性能需求；\n\n（2）数据结构，使得程序可以合理利用信息\n\n（3）软件描述信息，它以硬拷贝和虚拟形式存在，用来描述程序操作和使用\n\n| **出错名称**                 | **系统输出信息**             | **处理方法**         |\n| ---------------------------- | ---------------------------- | -------------------- |\n| 用户名输入错误               | 用户名或密码错误             | 返回登录界面         |\n| 密码输入错误                 | 用户名或密码错误             | 返回登录界面         |\n| 输入格式错误                 | 输入格式错误，请重新输入     | 返回输入界面         |\n| 数据库连接失败               | 数据库连接失败，请检查连接   | 返回操作前的页面     |\n| TCP连接错误                  | 连接超时，请检查连接         | 返回操作前的页面     |\n| 不允许为空的输入框输入空字符 | 输入为空，请输入             | 弹回原输入页面输入处 |\n| 系统故障                     | 服务器出现故障，请联系管理员 | 立刻启用备用机       |\n\n# **Software Engineering：**\n\n软件工程是：\n\n（1）将系统化的、规范化、可量化的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。\n\n（2）在（1）中所述方法的研究\n\n## **What the difference between software and hardware?**\n\n1.软件是设计开发的，而不是传统意义上生产制造的。\n\n2.软件不会“磨损”\n\n3.大多数软件根据实际的顾客需求定制的。\n\n## **Why does software need Change or Evolved?**\n\n **遗留软件（legacy software）：**\n\n> 遗留软件系统……在几十年前开发，它们不断被修改以满足商业需要和计算平台的变化。这类系统的繁衍使得大型机构十分头痛，因为它们的维护代价高昂且系统演化风险较高。\n\n**发生原因：**\n\n- 软件需要进行**适应性调整（adapt）**，从而可以满足新的计算环境或者技术的需求。\n- 软件必须**升级（update）**以实现新的商业需求。\n- 软件必须**扩展（extend）**使之具有与更多新的系统和数据库的互操作能力。\n- 软件架构必须进行**改建（re-architect）**使之能适应多样化的网络环境。\n\n## 层次化技术\n\n![image-20221012135918954](./SEReview/image-20221012135918954.png)\n\n支持软件工程的根基在于**质量关注点（quality focus）**：是对软件的组织承诺，是支持软件工程的基石\n\n软件工程的基础是**过程（process）层**。软件过程将各个技术层次结合在一起，使得合理、及时地开发计算机软件成为可能。\n\n软件工程**方法（method）**为构建软件提供技术上的解决方法。方法包括：沟通、需求分析、设计模型、编程、测试和技术支持。\n\n# **Software Process ：**\n\n**软件过程：**软件过程是工作产品构建时所执行的一系列活动、动作和任务的集合。层次关系：\n\n- 软件过程\n  - 过程框架\n    - 普适性活动\n      - 框架活动\n        - 软件工程动作\n          - 任务集\n            - 质量保证点、项目里程碑等\n\n## **Generic Framework Activity(通用框架活动)**\n\n适用于所有软件项目，无论其规模和复杂程度如何：\n\n**1. 沟通（Communication）：**目的是理解利益相关者的项目目标，并收集需求以定义软件特性和功能。\n\n**2. 策划（Planning）：**定义和描述了软件工程工作，包括需要执行的技术任务、可能的风险、资源需求、工作产品和工作进度计划。\n\n**3. 建模（Modeling）：**利用模型哎更好地理解软件需求并完成符合这些需求的软件设计。\n\n**4. 构建（Construction）：**它包括编码和测试以发现编码中的错误。\n\n**5. 部署（Deployment）：**软件交付到用户，用户对其进行评测并给出反馈意见。\n\n在项目的多次迭代过程中，沟通、策划、建模、构建、部署等活动不断重复。每次==项目迭代==都会产生一个软**件增量( software increment)**，每个软件增量实现了部分的软件特性和功能。随着每一次增量的产生，软件逐渐完善。\n\n## **Umbrella Activities（普适性活动）：**\n\n**普适性活动贯穿软件项目始终。**\n\n**1.软件项目跟踪和控制：**项目根据计划评估项目进度，并且采取必要的措施保证项目按进度计划进行。\n\n**2.风险管理：**对可能影响项目成果或者产品质量的风险进行评估。\n\n**3.软件质量保证：**确定和执行软件质量保证的活动\n\n**4.技术评估：**评估软件工程产品、尽量在错误传播到下一个活动之前，发现并清除错误。\n\n**5.测量：**定义和收集过程、项目和产品的度量，以帮助团队在发布软件的时候满足利益相关者要求。同时，测量还可以与其他框架活动和普适性活动配合使用。\n\n**6.软件配置管理：**在整个软件工程中，管理变更所带来的影响。\n\n**7.可复用管理：**定义产品复用的标准，并且建立构建复用机制。\n\n**8.工作产品的准备和生产：**包括了生产产品所必需的活动。\n\n## **Process Flow**\n\n**过程流：**描述了在执行顺序和执时间上，如何组织框架中的活动，动作，任务。\n\n- **线性过程流（Liner process flow）：**从沟通到部署顺序执行五个框架活动。\n\n- **迭代过程流（iterative process flow）：**在执行下一个活动前重复执行之前一个或多个活动。\n\n  ![image-20221012140248086](./SEReview/image-20221012140248086.png)\n\n- **演化过程流（evolution process flow）：**采取循环的方式执行各个活动。![image-20221012140310071](./SEReview/image-20221012140310071.png)\n\n- **并行过程流（parallel process flow）：**将一个或是多个活动与其他活动并行执行。![image-20221012140314730](./SEReview/image-20221012140314730.png)\n\n## **过程模式（process pattern）**\n\n描述了软件工程工作中遇到的过程相关的问题、明确了问题环境并给出了针对该问题的一种或几种可证明的解决方式。\n\n## **Process Model**\n\n惯用过程模型是为了改变软件开发的混乱状态，促使软件开发更加有序。\n\n### **瀑布模型（waterfall model）**\n\n**又被称为经典生命周期（classic life cycle），它提出了一个系统的、顺序的软件开发方法。**\n\n**优点：**\n\n有利于大型软件开发过程中人员的组织、管理，从而提高了大型软件项目开发的质量和效\n\n率。\n\n当需求确定、工作采用线性的方式完成的时候瀑布模型是一个很有用的过程模型。\n\n一个有用的过程模型，其中需求是固定的，工作将以线性方式完成。\n\n**缺点:**\n\n过于理想，缺乏灵活性，容易产生需求偏差。\n\n实际的项目很少遵守瀑布模型提出的顺序。\n\n客户通常很难清除的描述所有的需求。\n\n客户必须要有耐心，因为只有在项目接近尾声的时候，他们才能的带执行的程序。\n\n**适用范围：**需求确定，工作能够采用线性的方式完成的软件。\n\n![image-20221012140409612](./SEReview/image-20221012140409612.png)\n\n### **V 模型（V-model）：**\n\n描述了质量保证动作同沟通、建模相关动作以及早期构建相关的动作之间的关系。\n\nV 模型强调软件开发的协作和速度，将软件实现和验证有机地结合起来，在保证较高的软\n\n件质量情况下缩短开发周期。\n\n**优点：**适合工程量小、人力资源少并且开发过程中改动不大的项目\n\n**缺点：**错误发现时间迟，产生的风险代价高\n\n![image-20221012140424181](./SEReview/image-20221012140424181.png)\n\n### **增量过程模型（Incremental Model）**\n\n增量过程模型侧重于每一个增量都提交一个可以运行的产品。\n\n**优点：**\n\n1. 能在较短的时间内向用户提交可完成部分工作的产品。\n\n2. 逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。\n\n3. 规避技术风险\n\n4. 可并行开发构件，加快开发的进度\n\n5. 对于在业务截止日期之前完全实施的人员配置非常有用。\n\n**缺点：**\n\n（1）并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构；\n\n（2）增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模\n\n型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。\n\n**适用范围：**\n\n（1）进行已有产品升级或新版本开发，增量模型是非常适合的；\n\n（2）对完成期限严格要求的产品，可以使用增量模型；\n\n（3）对所开发的领域比较熟悉而且已有原型系统，增量模型也是非常适合的。（4） 项目在既定的商业要求期限之前不可能找到足够的开发人员\n\n![image-20221012140439333](./SEReview/image-20221012140439333.png)\n\n### **演化过程模型（Evolutionary Model）**\n\n演化模型是迭代的过程模型。\n\n**原型开发（prototyping ）**：当需求很模糊的时候，原型开发可以帮助软件开发人员和利益相关者更好地理解究竟需要做什么。\n\n**优点：**\n\n1. 开发者与用户充分交流，可以澄清模糊需求，需求定义比其他 模型好得多\n2. 开发过程与用户培训过程同步\n\n3. 为用户需求的改变提供了充分的余地\n\n4. 开发风险低，产品柔性好\n\n5. 开发费用低，时间短\n\n6. 系统易维护，对用户更友好\n\n\n**缺点：**\n\n1. 没有考虑软件的整体质量和长期的可维护性。\n\n2. 大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为它的方便，还有不合适的操作系统被选择等等。\n\n3. 由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计。\n\n**适用范围：**\n\n尽管原型可以用作独立的流程模型，但它更常用作一种可以在任何流模型的上下文中实现的技术。\n\n![image-20221012140506865](./SEReview/image-20221012140506865.png)\n\n### **螺旋模型（Spiral Model）**\n\n螺旋模型是一种风险驱动型的过程模型生成器，对于软件集中的系统，它可以指导多个利益相关者的协同工作。\n\n**优点：**\n\n它结合了原型的迭代性质和瀑布模型的系统性和可控性特点。\n\n1. 强调风险\n\n2. 强调阶段质量\n\n3. 提供纠错的机会\n\n4. 使用原型作为风险降低机制，进一步使开发人员能够在产品演变的任何阶段应用原型方法。\n\n**缺点：**\n\n1. 每个阶段都要提出被选方案，进行风险分析，研发周期长，效率低\n\n2. 必须要转业的风险分析人员的参与\n\n3. 如果没有发现和管理重大风险，问题无疑将会发生。\n\n**适用范围：**大型项目\n\n![image-20221012140533502](./SEReview/image-20221012140533502.png)\n\n### **协同模型（concurrent development model）**\n\n有时候又称为协同工程，它允许软件团队表述本章所描述的任何模型中的迭代和并发元素。\n\n协同建模提供了项目当前状态的准确画面。\n\n**适用范围**：所有类型的软件开发，协同模型通常更适合涉及不同工程团队的产品工程项目。\n\n![image-20221012140549113](./SEReview/image-20221012140549113.png)\n\n### **统一过程模型（Unified Process）**\n\n统一过程模型是一种“用例驱动、以体系结构为核心、迭代及增量”的软件 过程框架，由UML 方法和工具支持。它是一种增量模型，定义了五个阶段：\n\na、起始阶段，包括用户沟通和计划活动，强调定义和细化用例\n\nb、 细化阶段，包括用户沟通和建模活动，重点是创建分析和设计模型。\n\nc、构件阶段，细化模型设计，并将设计模型转化为软件构件实现\n\nd、 转化阶段，将软件从开发人员传递给最终用户，并由用户完成 beta 测试和验收测试\n\ne、生产阶段，持续地监控软件的运行，并提供技术支持。\n\n**优点：**\n\n1. 任何功能开发后就进入测试过程，及早进行验证\n\n2. 早期风险识别，采取预防措施\n\n**缺点：**\n\n1. 需求必须在开始之前完全弄清楚，否怎有可能在架构上出现错误\n\n2. 必须有严格的过程管理，以免使过程退化为原始的试→错→改模式\n\n3. 如果不加控制的让用户过早接触没有测试完全，版本不稳定的产品可能对用 户和开发团队都带来负面的影响。\n\n   ![image-20221012140630219](./SEReview/image-20221012140630219.png)\n\n# **Agile Development**\n\n## 敏捷与敏捷过程\n\n不管怎么定义敏捷，一定离不开**「短周期地频繁交付」**\n\n**敏捷宣言（Agile development manifesto）：**\n\n- 个人和这些个人之间的交流胜过了开发过程和工具\n- 可运行的软件胜过了宽泛的文档\n- 客户合作胜过了合同谈判\n\n- 对变更的良好响应胜过了按部就班地遵循计划\n\n## **极限编程（Extreme Programming (XP)）**\n\n> **极限编程中的「极限(Extreme)」是指将我们认同的有效软件开发原理和实践应用到极限，频繁地去实践，**\n>\n> 极限编程核心是测试驱动开发、持续集成、用户故事等具体落地的实践\n\n极限编程是敏捷软件开发使用最广泛的一个方法。\n\n**极限编程过程:**\n\n**1.策划：**\n\n1. 开始创造“用户故事”\n\n2. 敏捷团队评估每个故事并分配一个成本（开发周数）\n\n3. 故事被分组到一个可交付增量\n\n4. 承诺在交付日期进行\n\n5. 在第一次递增之后，“项目速度”用于帮助估计后续发行版本的发布日期和进度安排，确定是否对整个开发项目中的所有故事有过分承诺。\n\n\n**2.设计**\n\n1. 遵循 KIS（保持简洁）原则\n\n2. 鼓励使用 CRC（类-责任-协作者）卡（见第 8 章）\n\n3. 对于困难的设计问题，建议创建“尖峰解决方案”——一个设计原型\n\n4. 鼓励“重构”： 重构是以不改变代码外部行为而改进其内部结构的方式来修改软件系统的过程。\n\n\n**3.编码**\n\n1. 在编码开始之前，建议对故事进行单元测试\n\n2. 鼓励“结队编程”\n\n\n**4.测试**\n\n1. 所有的单元测试每天都执行\n\n2. “验收测试”，由客户规定技术条件，并且着眼于客户可见的、可评审的系统级的特征和功能。\n\n\n![image-20221012140748468](./SEReview/image-20221012140748468.png)\n\n## **工业极限编程（Industrial XP （IPX））**\n\nIXP 是 XP 的一种有机进化。它由 XP 的最低限要求、以客户为中心、测试驱动精神组成。\n\nIXP 和 XP 的主要差别在于其管理具有更大的包容性，它扩大了用户角色，升级了技术实践。\n\nIXP 合并了**六个新实践**：\n\nReadiness assessment(项目准备)\n\nProject community(项目社区)\n\nProject chartering（项目承租）\n\nTest-driven management （测试驱动管理）\n\nRetrospectives.（回顾）\n\nContinuous learning （持续学习）\n\n## Scrum\n\n## Kanban\n\n## DevOps\n\n\n\n#  Recommended Process Model \n\n\n\n# **Human Aspects of Software** Engineering\n\n# 指导实践的原则\n\n# **Understanding Requirements**\n\n## **需求工程（Requirement engineering）**\n\n**七个任务**\n\n**1.起始（Inception）：**在项目起始阶段，要建立基本的理解，包括对问题、谁需要解决方案、所期望解决方案的性质、与项目利益相关者和开发人员之间达成初步交流合作的效果。\n\n**2.导出（Elicitation –gathering requirements）：**询问客户、用户和其他人，系统或产品的目标是什么，想要实现什么，系统和产品如何满足业务的要求，最终系统或产品如何利用于日常工作。\n\n**3.精化（Elaboration-requirement modeling）：**在起始和导出阶段获得的信息将在精化阶段进行扩展和提炼该任务集中于开发一个精确的需求模型。\n\n**4.协商（Negotiation-win-win）：**使用迭代的方法给需求排序，评估每项需求对项目产生的成本和风险，表述内部冲突，删除、组合和修改需求，以便参与各方均能达到一定的满意度，实现双赢。\n\n**5.规格说明（Specification-document，Model，prototype）：**一个规格说明可以是一份写好的文档、一套图形化的模型、一个形式化的数学模型、一组使用场景、一个原型或上述各项的任意组合。\n\n**6.确认（Validation-Quality assess）：**在确认这一步对需求工程的工作产品进行质量评估。\n\n**7.需求管理（Management-Change）：**基于计算机的系统其需求会变更，并且变更的要求贯穿于系统的整个生存期。需求管理是用于帮助项目组在项目进展中标识、控制和跟踪需求以及需求变更的一组活动。\n\n## **需求建模的元素**\n\n![image-20221012140837195](./SEReview/image-20221012140837195.png)\n\n![image-20221012140842657](./SEReview/image-20221012140842657.png)\n\n# 需求建模—推荐的方法\n\n## 基于场景(Scenario-Based)建模（功能）\n\n使用基于场景的方法可以从用户的视角描述系统。\n\n开发**用例图**时，应列出特定参与者执行的功能或活动。\n\n例：\n\n![image-20221012140858481](./SEReview/image-20221012140858481.png)\n\n![img](软件工程知识点复习总结.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png)\n\n### 用例模板：\n\n|       **用例**       | 在ATM上取款                                                  |\n| :------------------: | :----------------------------------------------------------- |\n|      **参与者**      | 取款人                                                       |\n|       **目标**       | 从ATM中取到钱                                                |\n|     **前提条件**     | ATM机正常工作，取款人持银行卡取款。                          |\n|     **触发条件**     | 取款人将卡插入卡槽                                           |\n|    **基本事件流**    | 1.     触发条件：取款人将卡插入卡槽。<br>  2.     取款人将卡插入卡槽。<br/>  3.     取款人输入密码。 <br/> 4.     取款人选择“取款”。  <br/>5.     取款人取钱。  <br/>6.     取款人选择“退出”。 |\n|    **异常事件流**    | 1. 卡无效或自动柜员机没有所需现金。<br/>  2. 密码不正确:重新输入正确的密码。<br/>  3. 选择提款时ATM机里的现金不足，提款人取不到钱。 <br/> 4. 选择退出时ATM出现问题，卡被吞 |\n|     **后置条件**     | ATM机恢复待机状态，后台数据库更新用户余额，短信提醒取钱成功与剩余余额 |\n|      **优先级**      | 必须执行                                                     |\n|      **可用时**      | 第一个增量                                                   |\n|     **使用频率**     | 每天多次                                                     |\n|    **参与者渠道**    | 通过操作面板。                                               |\n|    **次要参与者**    | 记录数据库                                                   |\n| **次要参与者的渠道** | 记录数据库、互联网                                           |\n|     **开放问题**     | 要有防止用户卡被机器吞食的保护机制。<br>定义一个固定的时间长度，取款可以停留在操作界面上而不进行任何操作 |\n\n## **基于类的建模**\n\n基于类建模表示了系统操作的对象、应用于对象间能有效控制的操作、这些对象间的关系以及已定义类之间的协作。\n\n基于类的分析模型包括类和对象、属性、操作、类的职责协作者（CRC）模型、协作图和包。\n\n### **识别分析类**\n\n7种可能的类：\n\n**外部实体**（其他系统、设备、人员），产生或实验基于计算机系统的信息。\n\n**事物**（报告、显示、字母、信号），问题信息域的一部分。\n\n**偶发事件或事件**（所有权转移或完成机器人的一组移动动作），在系统操作环境内发生。\n\n**角色**（经理，工程师，销售人员），由和系统交互的人员扮演\n\n**组织单元**（部门，组，团队），和某个应用系统相关\n\n**场地**（制作车间或码头），建立问题的环境和系统的整体功能\n\n**结构**（传感器、交通工具、计算机），定义了对象的类或与对象相关的类。\n\n\n\n### **类-职责-协作者建模（*Class-responsibility-collaborator* CRC）**\n\nCRC 模型实际上是表示类的标准索引卡片的集合。每个类一个卡片\n\n**三部分：**顶部写类名，左侧列出类的职责，右侧部分列出了类的协作者。\n\n<img src=\"image-20221019150622381.png\" alt=\"image-20221019150622381\" style=\"zoom:50%;\" />\n\n**类：**\n\nEntity classes **实体类**：一般代表保存在数据库中和贯穿应用程序的事物。\n\nBoundary classes **边界类**：创建用户可见的和在使用软件时交互的接口\n\nController classes **控制类**：管理“控制单元”\n\n**职责：**\n\n职责的基本原则：\n\n**属性**：描述了已经选择包含在需求模型中的类\n\n**操作**：定义了某个对象的行为。\n\n5 个指导原则：\n\n1.智能系统应分布所有类中以求地满足问题的需求。\n\n2.每个职责的说明应尽可能具有普遍性。\n\n3.信息和与之相关的信息应局限于一个类中而不要分布在多个类中。\n\n4.信息和与之相关的行为应该放在同一类中。\n\n5.适合时，职责应由相关类共享。\n\n### UML 图示例\n\n**UML类图**：\n\n类的关系：\n\n- 关联：实例有关系，一对多，一对一等关系\n- 泛化：is kind of,**继承**，空心三角\n- 聚合：is part of，空心菱形\n\n![image-20221214151330971](./SEReview/image-20221214151330971.png)\n\nUML**活动图**在特定场景通过提供迭代流的图形表示来补充用例。例：\n\n- 并行使用同步条\n- 可以用来替代程序流程图，反过来不行\n\n<img src=\"image-20221019161158995.png\" alt=\"image-20221019161158995\" style=\"zoom: 80%;\" />\n\n**UML时序图：**作为时间的函数，表示事件如何从一个对象流向另一个对象。\n\n<img src=\"image-20221019155252489.png\" alt=\"image-20221019155252489\" style=\"zoom:80%;\" />\n\nUML**泳道图**是**活动图的一种有用变化**，可以让建模人员表示用例所描述的活动流，同时指示哪个参与者或分析类是由活动矩形所描述的活动来负责。\n\n<img src=\"image-20221019160521548.png\" alt=\"image-20221019160521548\" style=\"zoom:80%;\" />\n\n## **基于行为模型**\n\n生成行为模型的步骤：\n\n1.评估所有的用例，以保证完全理解系统内的交互顺序\n\n2.识别驱动交互顺序的事件，并理解这些事件如何与特定的对象相互关联\n\n3.为每个用例生成序列\n\n4.创建系统状态图\n\n5.评审行为模型以验证准确性和一致性。\n\n**状态图：**\n\n**UML 状态图**就是一种行为模型，该图为每个类呈现了主动状态和导致这些主动状态变化的事件。\n\n例:\n\n![image-20221214151457611](./SEReview/image-20221214151457611.png)\n\n<img src=\"image-20221019160823423.png\" alt=\"image-20221019160823423\" style=\"zoom:67%;\" />\n\n**时序图**：\n\n![image-20221214152126659](./SEReview/image-20221214152126659.png)\n\n**泳道图：**\n\n\n\n# **设计概念(Design Concepts)**\n\n## 软工语境下的设计\n\n**软件工程设计：**\n\n- 数据/类设计——将分析类转换为实现类和数据结构。\n- 架构设计——定义主要软件结构元素之间的关系。\n- 接口设计——定义软件元素、硬件元素和终端用户之间的通信方式。\n- 组件级设计——将结构元素转换为软件组件的过程描述。\n\n**将需求模型映射到设计模型:**\n\n<img src=\"image-20221019162512098.png\" alt=\"image-20221019162512098\" style=\"zoom: 67%;\" />\n\n## 设计过程\n\n\n\n## 设计原则\n\n1. **抽象（Abstraction）：**\n\n   **过程抽象**是指具有明确和有限的指令序列（描述动作）\n\n   **数据抽象**是描述数据对象的冠名数据集合（描述动作怎么做）\n\n2. **体系结构（Architecture）**：软件的整体结构和这种结构为系统提供概念完整方式。构件表示主要的系统元素及其交互。\n\n3. **模式（Patterns）**：模式承载了已证实的解决方案的精髓。设计模式描述了在某个特定场景与可能影响模式应用和使用方法的“影响力”中解决某个特定的设计问题的设计结构。\n\n4. **关注点分离（Separation of concerns）**：它表明任何复杂问题如果被分解为可以独立解决和优化的若干块，该复杂问题能够更容易的被处理。\n\n5. **模块化（Modularity）**：模块化是关注点分离最常见的表现。模块化设计使得开发工作更易规划。\n\n   <img src=\"image-20221026145144103.png\" alt=\"image-20221026145144103\" style=\"zoom: 50%;\" />\n\n6. **信息隐蔽（Hiding）**信息隐蔽原则[Par72]建议模块应该“具有的特征是：每个模块对其它所有模块都隐藏自己的设计决策”。隐蔽定义并加强了对模块内过程细节的访问约束和对模块所使用的任何局部数据结构的访问约束。\n\n7. **功能独立（Functional independence）**：开发具有“专一”功能和低耦合性的模块即可实现功能独立。\n\n8. **逐步求精（Stepwise refinement）**：通过连续精化过程细节层次来实现程序的开发，通过逐步分解功能的宏观陈述直到形成程序设计语言的语句来进行层次开发。\n\n   <img src=\"image-20221026150156120.png\" alt=\"image-20221026150156120\" style=\"zoom:67%;\" />\n\n   <font>抽象和逐步求精是互补的概念。</font>\n\n9. **方面（Aspects）**：一个方面作为一个独立的模块进行实施，而不是作为“分割的”或者和许多构件“纠缠的”软件片段进行实施。设计体系结构应当支持定义一个方面，该方面即一个模块，该模块能够使该关注点经过它横切的所有其他关注点而得到实施。\n\n10. **重构（Refactoring）**：重构是使用这样一种方式改变软件系统的过程：不改变代码的外部行为而是改进其内部结构。\n\n11. **面向对象的设计概念（OO design concepts）:**面向对象概念（类、对象、继承、消息和多态）\n\n12. **设计类（Design Class**）：提供设计细节，使程序得以实施。\n\n    1. 完整（Complete）—（包括所有必要的属性和方法)和充分(只包含实现类意图所需的方法)。\n    2. 原生性（Primitiveness）——每个类方法都专注于提供一个服务。\n    3. 高内聚（High cohesion）——小的，集中的，专注的class。\n    4. 低耦合（Low coupling）——类的协作保持在最小值\n\n\n**设计概念强调了：**\n\n1. 抽象的必要性，它提供了一种创造可重用软件构件的方法\n2. 体系结构的重要性，它使得能够更好地理解系统整体结构\n3. 基于模式的工程的有益性，它是一项用于已证明能力的软件的设计技术\n4. 关注点分离和有效的模块化的价值，他们使得软件更容易理解、更容易测试以及更容易维护。\n5. 信息隐藏的直接作用，当错误发生时，它能够减少负面影响的传播\n6. 功能独立的影响，他是构造有效模块的标准\n7. 求精作为一种设计方法的作用\n8. 横切系统需求方面的考虑\n9. 重构的应用，他是为了优化已导出的设计\n10. 面向对象的类和与类相关特征的重要性\n\n## 设计模型\n\n![image-20221026150428993](./SEReview/image-20221026150428993.png)\n\n**数据设计元素**：数据设计创建在高级抽象级上表示的数据模型和信息模型。\n\n**体系结构设计元素**：体系结构设计元素通常描述为一组相互关联系统的子系统，且常常从需求模型中的分析包中派生出来。\n\n**接口设计元素**：软件接口设计元素描述了信息如何流入和流出系统以及被定义为体系结构一部分的构件之间是如何通信的。\n\n==接口设计有 3 个重要的元素：==\n\n（1）用户界面\n\n（2）和其他系统、设备、网络或其他信息生成者或使用者的外部接口\n\n（3）各种设计构件之间的内部接口\n\n**构件级设计元素**：软件的构件级设计完整地描述了每个软件构件的内部细节。构件级设计为所以局部数据对象定义数据结构，为所有在构件内发生的处理定义算法细节，并定义允许访问所有构件操作的接口。\n\n**部署级设计元素：**部署级设计元素指明软件功能和子系统将如何在支持软件的物理计算环境内分布。\n\n# **体系结构设计**Architectural Design – A Recommended Approach\n\n## 软件体系结构\n\n### 定义\n\n**程序或计算机系统的软件体系结构是指系统的一个或者多个结构，它包括==软件构件==、==构件的外部可见属性==以及==它们之间的相互联系==**。\n\n**体系结构==并非可运行的程序==。**\n\n确切的说，它是一种表达,是能够：\n\n1. 对设计在满足既定需求方面的**有效性进行分析**\n2. 在设计变更相对容易的阶段，考虑体系结构**可能的替换方案**\n3. **降低**与软件构造相关的**风险**\n\n### **体系结构重要的 3 个关键原因**\n\n1. 软件体系结构的表示有助于对计算机系统开发感兴趣的各方展开交流。\n2. 体系结构突出了早期的设计决策，这些决策对随后所有的软件工程工作有深远影响，同时对系统作为一个可运行实体的最后成功有重要作用\n3. 体系结构“构建了一个相对小的、易于理解的模型，该模型描述了系统如何构成以及其构件如何一起工作\n\n### **体系结构风格**\n\n1. 以数据为中心的体系结构。\n2. 数据流体系结构。\n3. 调用和返回体系结构\n4. 面向对象体系结构\n5. 层次体系结构\n\n### **体系结构环境图（ACD）**\n\n上级系统：这些系统把目标系统作为某些高层处理方案的一部分\n\n下级系统：这些系统被目标系统使用，并为完成目标系统的功能提供必要的数据和处理\n\n同级系统：这些系统在对等的基础上相互作用\n\n参与者：通过产生和消耗必要处理所需的信息，实现与目标系统交互的实体（人，设备）\n\n![image-20221210134301873](./SEReview/image-20221210134301873.png)\n\n# **Component-Level Design**\n\n- 体系设计——建筑平面图、结构、房间和外部环境之间的连接机制\n\n- 构件级设计——每个房间的内部**细节设计**\n\n## 概念\n\n1. 构件是计算机软件中的一个模块化的构造块。\n\n2. OMG 定义构件：系统中模块化的、可部署的和可替换的部件，该部件封装了实现并暴露一组接口。\n\n关于什么是组件的三个重要观点：\n\n- **面向对象的观点（Object-Oriented view）：**构件包括一组协作的类。\n\n\t![image-20221210135030701](./SEReview/image-20221210135030701.png)\n\n- **传统观点（Traditional View）：**一个构件就是程序的一个功能要素，程序由处理逻辑及实现处理逻辑所需的每部数据结构以及能够保证构件被调用和实现数据传递的结构构成。\n\n\t![image-20221210135053957](./SEReview/image-20221210135053957.png)\n\n- **流程相关的观点（Process-related view）**：构建使用现有软件组件或设计模式的系统。\n\n## 设计基于类的构建\n\n### **基本设计原则**\n\n**4个基本设计原则和3个附加打包原则：**\n\n1. **开闭原则（Open-Closed Principle ，OCP）：**模块应该对外延具有开放性，对修改具有封闭性。符合开放封闭原则的模块都有两个主要特性：\n\t1. **它们 \"面向扩展开放（Open For Extension）\"：**也就是说模块的行为是能够被扩展的。当应用程序的需求变化时，我们可以使模块表现出全新的或与以往不同的行为，以满足新的需求。\n\t2. **它们 \"面向修改封闭（Closed For Modification）\"：**模块的源代码是不能被侵犯的，任何人都不允许修改已有源代码。\n2. **依赖倒置原则（Dependency Inversion Principle ，DIP）：**依赖于抽象，而非具体实现。\n3. **Liskov 替换原则（Liskov Substitution Principle (LSP)）：**子类可以替换他们的基类。\n4. **接口分离原则（The Interface Segregation Principle (ISP)）：**多个客户专用接口比一个通用接口好\n5. **发布复用等价性原则（The Release Reuse Equivalency Principle，REP）：**复用的粒度就是发布的粒度\n6. **共同封装原则（The Common Closure Principle (CCP)）：**一同变更的类应该合在一起\n7. **共同复用原则（The Common Reuse Principle (CRP））：**不能一起复用的类不能被分到一组\n\n### 设计准则\n\n- **内聚性（Cohesion）：**内聚性意味着构件或者类只封装那些相互关联密切，以及与构件或类自身有亲密关系的属性和操作。\n\n\t- 功能内聚：主要通过操作来体现，当一个模块只完成某一组特定操作并返回结果时，就称此模块是功能内聚的。\n\n\t- 分层内聚：高层能够访问低层的服务，但低层不能访问高层的服务。\n\n\n\t- 通信内聚：访问相同数据的所有操作被定义在同一个类中。（数据的查询，访问，存储）\n\n\n- **耦合性（Coupling）：**从高到低\n- 耦合是类之间彼此联系程度的一种定性度量。随着类（构件）相互依赖越来越多，类之间的耦合程度亦会增加。\n\t\n- 内容耦合：暗中修改其他构件的内部数据，这违反了信息隐蔽原则\n\t\n- 公用耦合：当大量的构件都要使用同一个全局变量时发生这种耦合\n\t\n- 控制耦合：当操作 A 调用操作 B，并向 B 传递控制标记时，就会发生这种耦合。\n\t\n- 标记耦合：当类 B 被声明为类 A 某一操作中的一个参数类型时，就会发生这种耦合。\n\t\n- 数据耦合：当操作需要传递长串的数据参数时，就会发生这种耦合。\n\t\n- 例程调用耦合：当一个操作调用另一个操作时，就会发生这种耦合。\n\t\n- 类型使用耦合：当构件 A 使用了在构件 B 中定义的一个数据类型时，就会发生这种耦合。\n\t\n- 包含或者导入耦合：当构件 A 引入或者包含一个构件 B 的包或者内容时，就会发生这种耦合。\n\t\n- 外部耦合：当一个构件和基础设施构件进行通信和协作时，就会发生这种耦合。\n\n\n**为什么要高内聚?**\n\n模块之间的关系越紧密,出错就越少!\n\n**为什么要低耦合?**\n\n子程序间的关系越复杂,就会产生更多的意想不到的错误!会给以后的维护工作带来很多麻烦!\n\n高内聚低耦合，是软件工程中的概念，是判断设计好坏的标准，主要是面向对象的设计，主要是看类的内聚性是否高，耦合度是否低。\n\n## 基于O-O的组件设计\n\n![image-20221214155233138](./SEReview/image-20221214155233138.png)\n\n静态类图\n\n动态协作图（等价于时序图）\n\n## 传统组件级设计\n\n![image-20221214155441736](./SEReview/image-20221214155441736.png)\n\n## 执行组件级设计\n\n### 组件级设计\n\n1. 确定与问题域对应的所有设计类。\n\n2. 确定与基础架构域对应的所有设计类。\n\n3. 详细说明所有没有作为可重用组件获得的设计类。\n\n\t1. 指定类或组件协作时的消息细节。\n\t2. 为每个组件确定适当的接口。\n\t3. 详细说明属性并定义实现它们所需的数据类型和数据结构。\n\t4. 详细描述每个操作中的处理流程。\n\n4. 描述持久数据源(数据库和文件)并确定管理它们所需的类。\n\n5. 开发并详细描述一个类或组件的行为表示。\n\n6. 精心设计部署图，以提供额外的实现细节。\n\n\t![image-20221210141113852](./SEReview/image-20221210141113852.png)\n\n7. 考虑每个组件级设计表示形式，并始终考虑备选方案。\n\n## 专门的组件级设计\n\n### WebApps的组件级设计\n\n**WebApp组件是:**\n\n- 定义良好的内聚函数，用于操作内容或为最终用户提供计算或数据处理。\n\n- 内容和功能的内聚包，为最终用户提供一些所需的功能。\n\n## 组件重构（Component refactoring）\n\n# User Experience Design.\n\n## 用户体验元素\n\n![image-20221210142236309](./SEReview/image-20221210142236309.png)\n\n- 信息架构\n- 用户界面设计\n- 可用性工程\n- 可视化设计\n\n![image-20221210142751755](./SEReview/image-20221210142751755.png)\n\n## 黄金原则\n\n### 用户操纵控制\n\n（1）以不强迫用户进入不必要的或不希望的动作的方式来定义交互模式\n\n（2）允许用户交互被中断和撤销\n\n（3）当技能级别增长时可以使交互流线化并允许定制交互\n\n（4）使用用户与内部技术细节隔离开来\n\n（5）设计应允许用户与出现在屏幕上的对象直接交互\n\n### **减少用户的记忆负担**\n\n（1）减少对短期记忆的要求\n\n（2）建立有意义的缺省\n\n（3）定义直观的快捷方式\n\n（4）以不断进展的方式揭晓信息\n\n### **保持界面一致**\n\n（1）允许用户当前任务放入有意义的环境中\n\n（2）在应用系统家族内保持一致性\n\n（3）如果过去的交互模型已经建立起了用户期望，除非有迫不得已的理由，doze 不要改变它。\n\n## UI分析与设计\n\n### UI分析任务\n\n![image-20221214155932626](./SEReview/image-20221214155932626.png)\n\n### UI设计模型\n\n工程师建立**用户模型**。软件工程师创建**设计模型**。最终用户在脑海中对界面产生映像，称为用户的**心理模型**或系统感觉。系统的实现者创建**实现模型**。\n\n- **用户模型：**确定了系统最终用户的轮廓。\n- **设计模型：**用户界面的设计\n- **心理模型：**最终用户在脑海里对系统产生的印象。\n- **实现模型：**组合了计算机系统的外在表现，结合了所有用来描述系统语法和语言的支撑信息。\n\n### 流程\n\n用户界面的分析和设计过程是迭代的，用户界面分析和设计过程**开始于螺旋模型的内部**，并且包括 4 个阶段：\n\n- 界面分析及建模。\n- 界面设计。\n- 界面构造。\n- 界面确认。\n\n![image-20221210143134777](./SEReview/image-20221210143134777.png)\n\n界面设计的目标是定义一组界面对象和动作，使得用户能够以满足系统所定义的每个使用目标的方式完成所有定义对的任务。\n\n## UX分析与设计\n\n## UI设计\n\n### **接口设计步骤**\n\n1. 使用在接口分析期间开发的信息，**定义接口对象和操作**。\n2. 定义将导致用户界面状态改变的事件**(用户操作)**。模仿这种行为。\n3. **描述每个界面状态**，就像它将实际地看给最终用户一样。\n4. 指示用户如何从接口提供的信息中解释系统的状态。\n\n### 例子*SafeHome*\n\n- **用例：**为了远程访问SafeHome，房主提供一个标识符和一个密码。这些定义了访问的级别（如并非所有用户均可以重新配置系统）并提供安全保证。一旦确认身份，用户（具有全部访问权限）检查系统状态并通过启动或关闭系统改变状态。用户通过显示房子的建筑平面图、观察每个安全传感器、显示每个当前配置区域以及必要时修改区域而重新配置系统。用户通过策略地放置的摄像头观察房子内部。用户可以摇动和变焦每个摄像头而提供房子内部的不同视角。\n\n- **定义对象和动作**：\n\n\t![image-20221210144633032](./SEReview/image-20221210144633032-16706547958251.png)\n\n- **分类对象：**\n\n\t![image-20221210144807793](./SEReview/image-20221210144807793.png)\n\n- **屏幕布局：**\n\n\t![image-20221210144917207](./SEReview/image-20221210144917207.png)\n\n\t\n\n### **UI设计模式**\n\n设计模式是为特定的、有良好边界的设计问题规定设计解决方案的一种抽象。\n\n**界面设计模板（win, android, os）**\n\n- 鼠标，滚动条，下拉菜单，弹出窗口，状态栏，图标，进度条，树形列表，触摸操作\n\n## 设计评价\n\n![image-20221210145132156](./SEReview/image-20221210145132156.png)\n\n## 可用性和可访问性\n\n可用性是指用户在使用高科技产品所提供的功能和特性时，对使用的容易程度和有效程度的定量测量。\n\n## 传统软件的用户体验和移动性\n\n# Design for Mobility.\n\n## 挑战\n\n## 移动开发生命周期\n\n## 移动架构设计\n\n## 上下文感知APP\n\n## 网页设计金字塔\n\n## 组件级别设计\n\n## 移动设计质量\n\n质量属性（quality attributes ）\n\n![image-20221210165149285](./SEReview/image-20221210165149285.png)\n\n![image-20221210165247462](./SEReview/image-20221210165247462.png)\n\n**六个特性：功能性、可靠性、易用性、效率、维护性、可移植性**\n\n1. **功能性：**当软件在指定条件下使用时，软件产品提供满足明确和隐含要求的功能的能力\n\t1. 适合性：软件产品为指定的任务和用户目标提供一组合适的功能的能力\n\t2. 准确性：软件产品提供具有所需精度的正确或相符的结果或效果的能力\n\t3. 互操作性：软件产品与一个或更多的规定系统进行交互的能力\n\t4. 安全保密性：软件产品保护信息和数据的能力\n2. **可靠性：**在指定条件使用时，软件产品维护规定的性能级别的能力\n\t1. 成熟性：软件产品为避免由软件中故障而导致失效的能力\n\t2. 容错性：在软件出现故障或者违反其指定接口的情况下，软件产品维持规定的性能级别的能力\n\t3. 易恢复性：在失效发生的情况下，软件产品重建规定的性能级别并恢复受直接影响的数据的能力\n3. **易用性：**在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力\n\t1. 易理解性：使用用户能理解软件是否合适及如何能将软件用于特定的任务的能力\n\t2. 易学性：使用用户能学习其应用的能力\n\t3. 易操作性：使用户能操作和控制它的能力\n\t4. 吸引性：软件产品吸引用户的能力\t\n4. **效率：**在规定条件下，相对于所用资源的数量，软件产品可提供适当性能的能力\n\t1. 时间特性：软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力\n\t2. 资源利用性：软件执行其功能时，使用合适数量和类别的资源的能力\n5. **维护性：**软件产品可被修改的能力。包括纠正、改进或对环境、需求和功能规格说明变化的适应\n\t1. 易分析性：诊断软件中的缺陷或失效原因或识别待修改部分的能力\n\t2. 易改变性：使指定的修改可以被实现的能力\n\t3. 稳定性：避免由于软件修改而造成意外结果的能力\n\t4. 易测试性：使已修改软件能被确认的能力\n6. **可移植性：**软件产品从一种环境迁移到另外一种环境的能力\n\t1. 适应性：无需采用额外的活动或手段就可适应不同指定环境的能力\n\t2. 易安装性：软件产品在指定环境中被安装的能力\n\t3. 共存性：在公共环境中同与其分享公共资源的其他独立软件共存的能力\n\t4. 易替换性：在同样的环境下，替代另一个相同用途的指定软件产品的能力\n\n# Pattern-Based Design\n\n## Design Pattern\n\n## 基于模式的软件设计\n\n## 体系结构设计\n\n## 组件级设计模式\n\n## Anti-patterns\n\n## 移动设计模式\n\n\n\n# **Software Testing Strategies**\n\n## 概述\n\n**测试：**测试是在交付给最终用户之前以特定意图找出错误为目的来执行程序的过程。\n\n**验证与确认**（Verification and Validation，V&V）：\n\n- **验证**是指确保软件正确地实现某一特定功能的一系列活动。\n- **确认**是指确保开发的软件可追溯到客户需求的另外一系列活动。\n\n![image-20221210151413472](./SEReview/image-20221210151413472.png)\n\n## 测试策略：从小到大\n\n![image-20221214160040929](./SEReview/image-20221214160040929.png)\n\n\n\n# **Testing Conventional Applications**\n\n## **单元测试**\n\n### 概念\n\n**侧重点：**\n\n- 单元测试侧重于软件设计的**最小单元（软件构件或模块）的验证工作**。\n\n- 单元测试侧重于**构件的内部处理逻辑和数据结构**。\n\n\n可以对多个构件并行执行。\n\n测试模块的接口是为了保证被测试程序单元的信息能够正常地流入和流出；\n\n检查局部数据结构以确保临时存储的数据在算法的整个执行过程中能维持其完善性。\n\n执行控制结构中的所有独立路径（基本路径）以确保模块中的所有语句至少执行一次。\n\n测试边界条件确保模块在到达边界值得极限或受限处理的情形下仍能正确执行。\n\n最后要对所有的错误处理路径进行测试。\n\n在单元测试期间，选择测试的执行路径是最基本的任务。\n\n边界测试时最重要的单元测试任务之一。\n\n### **单元测试过程**\n\n![image-20221210152614210](./SEReview/image-20221210152614210.png)\n\n**驱动模块：**接收测试用例数据，将这些数据传递给被测模块，并输出结果。\n\n**桩：**替换那些从属于被测模块的模块\n\n当设计高内聚的构件时，就可以简化单元测试。当构件只强调一个功能时，测试用例数就会降低，且比较容易预见错误和发现错误。\n\n## **集成测试**\n\n### 概念\n\n集成测试时构造软件体系结构的系统化技术，同时也是进行一些旨在发现与接口相关的错误的测试。\n\n**集成测试的目标是利用单元测试的构件建立设计中描述的程序结构。**\n\n- **自顶向下集成：**自顶向下集成测试是一种构造软件体系结构的增量方法。\n- **深度优先：**深度优先集成是首先集成位于程序结构中主控路径上的所有控件。\n\n- **广度优先：**广度优先集成首先沿水平方向，将属于同一层的构件集成起来。\n\n### **自顶向下集成过程：**\n\n1. 主控模块作为测试驱动模块，用桩模块代替直接附属的下层模块；\n2. 根据所选的集成策略（深度优先/广度优先），每次用一个实际模块替换一个桩模块；\n\n3. 每集成一个模块都进行测试；\n4. 完成每个测试集之后，用实际模块替换另一个桩模块；\n\n5. 可以进行回归测试（即全部或部分地重复已做过的测试），以避免引入新错误。\n\n6. 回到第 2 步继续执行此过程，直到完成整个程序结构的构造。\n\n\n### **自底向上集成测试：**\n\n就是从原子模块（程序结构的最底层构件）开始进行构造和测试。\n\n**自底向上集成测试过程：**\n\n1.连接底层构件以构成完成特定子功能的簇。\n\n2.编写驱动模块（测试的控制程序）以协调测试用例的输入和输出\n\n3.测试簇\n\n4.去掉驱动程序，沿着程序结构向上逐步连接簇\n\n![image-20221214160510145](./SEReview/image-20221214160510145.png)\n\n## **回归测试**\n\n回归测试重新执行已测试过的某些子集，以确保变更没有传播不期望的副作用。\n\n回归测试有助于保证变更不引入无意思行为或额外的错误。\n\n回归测试可以手工进行，方法是重新执行所以测试用例的子集，或者利用捕捉/回放工具自\n\n动进行。\n\n# **Testing Object-Oriented Applications**\n\n## **面向对象软件的测试策略**\n\n面向对象软件的**类测试**等同于传统软件的**单元测试**。\n\n不同的是：\n\n- 传统软件单元测试侧重于**模块的算法细节和模块接口数据**；\n\n- 面向对象类的测试侧重于封装在该类中的**操作和类的状态行为**。\n\n封装的类是单元测试的重点，但不再孤立地对单个操作进行测试，而是将其作为类的一部分。\n\n簇测试是面向对象软件集成测试中的一个步骤。\n\n## **确认测试（Validation Testing）**\n\n确认测试准则：**软件确认是通过一系列表明与软件需求相符合的测试而获得的。**\n\n### **α测试（Alpha testing）内部测试：**\n\nα测试测试是由代表性的最终用户**在开发者的场所进行**。软件在自然的环境下使用，开发者站在用户的后面观看，并记录错误和使用问题。α测试在受控的环境下测试。\n\n### **β测试（Beta testing）外部测试：**\n\n又称**客户验收测试，Acceptance testing：**β测试在一个或多个最终用户场所进行。与α测试不同，开发者通常不在场，因此，β测试是在不为开发者控制的环境下软件的“现场”应用。是在不可控的环境下测试。\n\n## **系统测试**\n\n系统测试实际上是对整个基于计算机的系统进行一系列不同考验的测试。所有测试都是为了验证系统成分已经正确地集成在一起，并且完成了指派的功能。\n\n**恢复测试（Recovery testing）:**通过各种方式强制让软件以各种方式失败并验证恢复是否正确执行。\n\n**安全测试（Security testing）：**安全测试验证建立在系统内的保护机制是否能够实际保护系统不受非法入侵。\n\n**压力测试（Stress testing）：**压力测试的目的是是软件面对非正常的情形。是一种要求以非正常数量、频率或容量的方式进行彻底评估。\n\n**性能测试（Performance testing）：**性能测试用来测试软件在集成环境中的运行性能。\n\n**部署测试（Deployment testing）：**部有时也将署测试称为配置测试，是在软件将要在其中运行的每一种环境中测试软件。\n\n## **测试技术**\n\n### **白盒测试：**\n\n白盒测试有时也称为玻璃盒测试，是一种测试用例设计方法，它利用作为构件层设计的一部分描述的控制结构来生成测试用例。\n\n白盒测试是在了解模块内部结构的情况下进行的测试。\n\n利用白盒测试方法导出的测试用例可以：\n\n（1）保证一个模块中的所有独立路径至少被执行一次。\n\n（2）对所有的逻辑判定均需要测试取真和取假两个方面。\n\n（3）在上下边界及可操作的范围内执行所有的循环。\n\n（4）检验内部数据结构以确保其有效性。\n\n#### **基本路径测试（Basic path testing）**\n\n基本路径测试时由 TOM 首先提出的一种白盒测试技术。\n\n流图（程序图）是一种简单的控制流表示方法。流程图用于描述程序的控制结构，流程图映射为相应的流图。\n\n- **圆称为流图结点（flow graph node）**，表示一个或多个过程语句。\n- 处理框序列和一个菱形判定框可以映射为单个节点。\n\n- 流图中的箭头称为边或者连接，标识控制刘，类似于流程图中的箭头。\n\n- 由边和结点限定的区域称为域。当计算域时，将图的外部作为一个域。\n\n- 包含条件的结点称为判定结点，其特征是由它发射出两条或多条边。\n\n![image-20221214160934681](./SEReview/image-20221214160934681.png)\n\n![image-20221214160939104](./SEReview/image-20221214160939104.png)\n\n\n\n**独立路径：**是指任何贯穿程序的、至少引入一组新语句或一个新条件的路径。\n\n如果设计测试用例强迫执行这些路径（基本集合），就可以保证程序中的每条语句至少执行一次，同时，每个条件判断的真和假都被执行。\n\n![image-20221214161006496](./SEReview/image-20221214161006496.png)\n\n**环复杂度（Cyclomatic Complexity ）**计算方法：\n\n![image-20221214161011172](./SEReview/image-20221214161011172.png)\n\nV（G）的值提供了组成基本集合的独立路径的上街，并由此得出覆盖所有程序语句所需设计和运行的测试数量的上界。\n\n### **黑盒测试**\n\n\n\n黑盒测试也称为行为测试，侧重软件的功能需求。\n\n黑盒测试使软件工程师能设计出将测试程序所有功能需求的输入条件集。\n\n黑盒测试不是白盒测试的替代品，而是作为发现其他类型错误的辅助方法。\n\n黑盒测试试图发现以下类型的错误：\n\n（1）不正确或遗漏的功能\n\n（2）接口错误\n\n（3）数据用在测试的后期阶段\n\n（4）行为或性能错误\n\n（5）初始化和终止错误\n\n黑盒测试的方法：\n\nGraph-based testing methods 基于图的测试方法\n\nEquivalence partitioning 等价类划分\n\nBoundary value analysis 边界值分析\n\nOrthogonal array testing 正交数组测试\n\n黑盒测试的例子：\n\n![image-20221214161151723](./SEReview/image-20221214161151723.png)\n\n![image-20221214161155755](./SEReview/image-20221214161155755.png)\n\n![image-20221214161201230](./SEReview/image-20221214161201230.png)\n\n# 期末\n\n- 闭卷英文，有部分注解（熟悉状态图、体系结构、部署图、时序图等名称）\n\n- 题型：开放，灵活，无名词解释\n\n\t- 单选20 * 1\n\n\t- 判断分析 2 * 5\n\n\t- 看图分析L:irerative, scrum, XP, stgly等。解释图中原因\n\n\t- 问答 5 * 6：题型丰富，灵活应用。\n\n\t\t- 例如:public string, 违反封装（信息隐藏）概念\n\n\t- 30分：2 * 10 ， 2 * 5，10分开放题，20分画图+答题（活动图、程序流程、类图，UI界面（黄金原则），计算独立路径等）\n\n\t\t- 等价划分\n\n\t\t\t![image-20221228152205055](./SEReview/image-20221228152205055.png)\n\n\n## 重点\n\n![image-20221228152746207](./SEReview/image-20221228152746207.png)\n\n![image-20221228153224604](./SEReview/image-20221228153224604.png)\n\n![image-20221228153416006](./SEReview/image-20221228153416006.png)\n\n![image-20221228153458124](./SEReview/image-20221228153458124.png)\n\n![image-20221228153727751](./SEReview/image-20221228153727751.png)\n\n![image-20221228153813086](./SEReview/image-20221228153813086.png)\n\n![image-20221214162408194](./SEReview/image-20221214162408194.png)\n\n![image-20221214162414853](./SEReview/image-20221214162414853.png)\n\n![image-20221214162419950](./SEReview/image-20221214162419950.png)\n\n![image-20221214162433369](./SEReview/image-20221214162433369.png)\n\n![image-20221214162439934](./SEReview/image-20221214162439934.png)\n","slug":"SEReview","published":1,"updated":"2023-01-15T13:22:23.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcxeqjfa0005m8umb591cmn3","content":"<p><strong>Software：</strong></p>\n<p>（1）指令的集合，通过执行这些指令可以满足预期的特征、功能和性能需求；</p>\n<p>（2）数据结构，使得程序可以合理利用信息</p>\n<p>（3）软件描述信息，它以硬拷贝和虚拟形式存在，用来描述程序操作和使用</p>\n<table>\n<thead>\n<tr>\n<th><strong>出错名称</strong></th>\n<th><strong>系统输出信息</strong></th>\n<th><strong>处理方法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名输入错误</td>\n<td>用户名或密码错误</td>\n<td>返回登录界面</td>\n</tr>\n<tr>\n<td>密码输入错误</td>\n<td>用户名或密码错误</td>\n<td>返回登录界面</td>\n</tr>\n<tr>\n<td>输入格式错误</td>\n<td>输入格式错误，请重新输入</td>\n<td>返回输入界面</td>\n</tr>\n<tr>\n<td>数据库连接失败</td>\n<td>数据库连接失败，请检查连接</td>\n<td>返回操作前的页面</td>\n</tr>\n<tr>\n<td>TCP连接错误</td>\n<td>连接超时，请检查连接</td>\n<td>返回操作前的页面</td>\n</tr>\n<tr>\n<td>不允许为空的输入框输入空字符</td>\n<td>输入为空，请输入</td>\n<td>弹回原输入页面输入处</td>\n</tr>\n<tr>\n<td>系统故障</td>\n<td>服务器出现故障，请联系管理员</td>\n<td>立刻启用备用机</td>\n</tr>\n</tbody></table>\n<h1 id=\"Software-Engineering：\"><a href=\"#Software-Engineering：\" class=\"headerlink\" title=\"Software Engineering：\"></a><strong>Software Engineering：</strong></h1><p>软件工程是：</p>\n<p>（1）将系统化的、规范化、可量化的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。</p>\n<p>（2）在（1）中所述方法的研究</p>\n<h2 id=\"What-the-difference-between-software-and-hardware\"><a href=\"#What-the-difference-between-software-and-hardware\" class=\"headerlink\" title=\"What the difference between software and hardware?\"></a><strong>What the difference between software and hardware?</strong></h2><p>1.软件是设计开发的，而不是传统意义上生产制造的。</p>\n<p>2.软件不会“磨损”</p>\n<p>3.大多数软件根据实际的顾客需求定制的。</p>\n<h2 id=\"Why-does-software-need-Change-or-Evolved\"><a href=\"#Why-does-software-need-Change-or-Evolved\" class=\"headerlink\" title=\"Why does software need Change or Evolved?\"></a><strong>Why does software need Change or Evolved?</strong></h2><p> <strong>遗留软件（legacy software）：</strong></p>\n<blockquote>\n<p>遗留软件系统……在几十年前开发，它们不断被修改以满足商业需要和计算平台的变化。这类系统的繁衍使得大型机构十分头痛，因为它们的维护代价高昂且系统演化风险较高。</p>\n</blockquote>\n<p><strong>发生原因：</strong></p>\n<ul>\n<li>软件需要进行<strong>适应性调整（adapt）</strong>，从而可以满足新的计算环境或者技术的需求。</li>\n<li>软件必须<strong>升级（update）</strong>以实现新的商业需求。</li>\n<li>软件必须<strong>扩展（extend）</strong>使之具有与更多新的系统和数据库的互操作能力。</li>\n<li>软件架构必须进行<strong>改建（re-architect）</strong>使之能适应多样化的网络环境。</li>\n</ul>\n<h2 id=\"层次化技术\"><a href=\"#层次化技术\" class=\"headerlink\" title=\"层次化技术\"></a>层次化技术</h2><p><img src=\"image-20221012135918954.png\" alt=\"image-20221012135918954\"></p>\n<p>支持软件工程的根基在于<strong>质量关注点（quality focus）</strong>：是对软件的组织承诺，是支持软件工程的基石</p>\n<p>软件工程的基础是<strong>过程（process）层</strong>。软件过程将各个技术层次结合在一起，使得合理、及时地开发计算机软件成为可能。</p>\n<p>软件工程<strong>方法（method）</strong>为构建软件提供技术上的解决方法。方法包括：沟通、需求分析、设计模型、编程、测试和技术支持。</p>\n<h1 id=\"Software-Process-：\"><a href=\"#Software-Process-：\" class=\"headerlink\" title=\"Software Process ：\"></a><strong>Software Process ：</strong></h1><p><strong>软件过程：</strong>软件过程是工作产品构建时所执行的一系列活动、动作和任务的集合。层次关系：</p>\n<ul>\n<li>软件过程<ul>\n<li>过程框架<ul>\n<li>普适性活动<ul>\n<li>框架活动<ul>\n<li>软件工程动作<ul>\n<li>任务集<ul>\n<li>质量保证点、项目里程碑等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Generic-Framework-Activity-通用框架活动\"><a href=\"#Generic-Framework-Activity-通用框架活动\" class=\"headerlink\" title=\"Generic Framework Activity(通用框架活动)\"></a><strong>Generic Framework Activity(通用框架活动)</strong></h2><p>适用于所有软件项目，无论其规模和复杂程度如何：</p>\n<p><strong>1. 沟通（Communication）：</strong>目的是理解利益相关者的项目目标，并收集需求以定义软件特性和功能。</p>\n<p><strong>2. 策划（Planning）：</strong>定义和描述了软件工程工作，包括需要执行的技术任务、可能的风险、资源需求、工作产品和工作进度计划。</p>\n<p><strong>3. 建模（Modeling）：</strong>利用模型哎更好地理解软件需求并完成符合这些需求的软件设计。</p>\n<p><strong>4. 构建（Construction）：</strong>它包括编码和测试以发现编码中的错误。</p>\n<p><strong>5. 部署（Deployment）：</strong>软件交付到用户，用户对其进行评测并给出反馈意见。</p>\n<p>在项目的多次迭代过程中，沟通、策划、建模、构建、部署等活动不断重复。每次&#x3D;&#x3D;项目迭代&#x3D;&#x3D;都会产生一个软**件增量( software increment)**，每个软件增量实现了部分的软件特性和功能。随着每一次增量的产生，软件逐渐完善。</p>\n<h2 id=\"Umbrella-Activities（普适性活动）：\"><a href=\"#Umbrella-Activities（普适性活动）：\" class=\"headerlink\" title=\"Umbrella Activities（普适性活动）：\"></a><strong>Umbrella Activities（普适性活动）：</strong></h2><p><strong>普适性活动贯穿软件项目始终。</strong></p>\n<p><strong>1.软件项目跟踪和控制：</strong>项目根据计划评估项目进度，并且采取必要的措施保证项目按进度计划进行。</p>\n<p><strong>2.风险管理：</strong>对可能影响项目成果或者产品质量的风险进行评估。</p>\n<p><strong>3.软件质量保证：</strong>确定和执行软件质量保证的活动</p>\n<p><strong>4.技术评估：</strong>评估软件工程产品、尽量在错误传播到下一个活动之前，发现并清除错误。</p>\n<p><strong>5.测量：</strong>定义和收集过程、项目和产品的度量，以帮助团队在发布软件的时候满足利益相关者要求。同时，测量还可以与其他框架活动和普适性活动配合使用。</p>\n<p><strong>6.软件配置管理：</strong>在整个软件工程中，管理变更所带来的影响。</p>\n<p><strong>7.可复用管理：</strong>定义产品复用的标准，并且建立构建复用机制。</p>\n<p><strong>8.工作产品的准备和生产：</strong>包括了生产产品所必需的活动。</p>\n<h2 id=\"Process-Flow\"><a href=\"#Process-Flow\" class=\"headerlink\" title=\"Process Flow\"></a><strong>Process Flow</strong></h2><p><strong>过程流：</strong>描述了在执行顺序和执时间上，如何组织框架中的活动，动作，任务。</p>\n<ul>\n<li><p><strong>线性过程流（Liner process flow）：</strong>从沟通到部署顺序执行五个框架活动。</p>\n</li>\n<li><p><strong>迭代过程流（iterative process flow）：</strong>在执行下一个活动前重复执行之前一个或多个活动。</p>\n<p><img src=\"image-20221012140248086.png\" alt=\"image-20221012140248086\"></p>\n</li>\n<li><p><strong>演化过程流（evolution process flow）：</strong>采取循环的方式执行各个活动。<img src=\"image-20221012140310071.png\" alt=\"image-20221012140310071\"></p>\n</li>\n<li><p><strong>并行过程流（parallel process flow）：</strong>将一个或是多个活动与其他活动并行执行。<img src=\"image-20221012140314730.png\" alt=\"image-20221012140314730\"></p>\n</li>\n</ul>\n<h2 id=\"过程模式（process-pattern）\"><a href=\"#过程模式（process-pattern）\" class=\"headerlink\" title=\"过程模式（process pattern）\"></a><strong>过程模式（process pattern）</strong></h2><p>描述了软件工程工作中遇到的过程相关的问题、明确了问题环境并给出了针对该问题的一种或几种可证明的解决方式。</p>\n<h2 id=\"Process-Model\"><a href=\"#Process-Model\" class=\"headerlink\" title=\"Process Model\"></a><strong>Process Model</strong></h2><p>惯用过程模型是为了改变软件开发的混乱状态，促使软件开发更加有序。</p>\n<h3 id=\"瀑布模型（waterfall-model）\"><a href=\"#瀑布模型（waterfall-model）\" class=\"headerlink\" title=\"瀑布模型（waterfall model）\"></a><strong>瀑布模型（waterfall model）</strong></h3><p><strong>又被称为经典生命周期（classic life cycle），它提出了一个系统的、顺序的软件开发方法。</strong></p>\n<p><strong>优点：</strong></p>\n<p>有利于大型软件开发过程中人员的组织、管理，从而提高了大型软件项目开发的质量和效</p>\n<p>率。</p>\n<p>当需求确定、工作采用线性的方式完成的时候瀑布模型是一个很有用的过程模型。</p>\n<p>一个有用的过程模型，其中需求是固定的，工作将以线性方式完成。</p>\n<p><strong>缺点:</strong></p>\n<p>过于理想，缺乏灵活性，容易产生需求偏差。</p>\n<p>实际的项目很少遵守瀑布模型提出的顺序。</p>\n<p>客户通常很难清除的描述所有的需求。</p>\n<p>客户必须要有耐心，因为只有在项目接近尾声的时候，他们才能的带执行的程序。</p>\n<p><strong>适用范围：</strong>需求确定，工作能够采用线性的方式完成的软件。</p>\n<p><img src=\"image-20221012140409612.png\" alt=\"image-20221012140409612\"></p>\n<h3 id=\"V-模型（V-model）：\"><a href=\"#V-模型（V-model）：\" class=\"headerlink\" title=\"V 模型（V-model）：\"></a><strong>V 模型（V-model）：</strong></h3><p>描述了质量保证动作同沟通、建模相关动作以及早期构建相关的动作之间的关系。</p>\n<p>V 模型强调软件开发的协作和速度，将软件实现和验证有机地结合起来，在保证较高的软</p>\n<p>件质量情况下缩短开发周期。</p>\n<p><strong>优点：</strong>适合工程量小、人力资源少并且开发过程中改动不大的项目</p>\n<p><strong>缺点：</strong>错误发现时间迟，产生的风险代价高</p>\n<p><img src=\"image-20221012140424181.png\" alt=\"image-20221012140424181\"></p>\n<h3 id=\"增量过程模型（Incremental-Model）\"><a href=\"#增量过程模型（Incremental-Model）\" class=\"headerlink\" title=\"增量过程模型（Incremental Model）\"></a><strong>增量过程模型（Incremental Model）</strong></h3><p>增量过程模型侧重于每一个增量都提交一个可以运行的产品。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>能在较短的时间内向用户提交可完成部分工作的产品。</p>\n</li>\n<li><p>逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。</p>\n</li>\n<li><p>规避技术风险</p>\n</li>\n<li><p>可并行开发构件，加快开发的进度</p>\n</li>\n<li><p>对于在业务截止日期之前完全实施的人员配置非常有用。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<p>（1）并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构；</p>\n<p>（2）增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模</p>\n<p>型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。</p>\n<p><strong>适用范围：</strong></p>\n<p>（1）进行已有产品升级或新版本开发，增量模型是非常适合的；</p>\n<p>（2）对完成期限严格要求的产品，可以使用增量模型；</p>\n<p>（3）对所开发的领域比较熟悉而且已有原型系统，增量模型也是非常适合的。（4） 项目在既定的商业要求期限之前不可能找到足够的开发人员</p>\n<p><img src=\"image-20221012140439333.png\" alt=\"image-20221012140439333\"></p>\n<h3 id=\"演化过程模型（Evolutionary-Model）\"><a href=\"#演化过程模型（Evolutionary-Model）\" class=\"headerlink\" title=\"演化过程模型（Evolutionary Model）\"></a><strong>演化过程模型（Evolutionary Model）</strong></h3><p>演化模型是迭代的过程模型。</p>\n<p><strong>原型开发（prototyping ）</strong>：当需求很模糊的时候，原型开发可以帮助软件开发人员和利益相关者更好地理解究竟需要做什么。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>开发者与用户充分交流，可以澄清模糊需求，需求定义比其他 模型好得多</p>\n</li>\n<li><p>开发过程与用户培训过程同步</p>\n</li>\n<li><p>为用户需求的改变提供了充分的余地</p>\n</li>\n<li><p>开发风险低，产品柔性好</p>\n</li>\n<li><p>开发费用低，时间短</p>\n</li>\n<li><p>系统易维护，对用户更友好</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>没有考虑软件的整体质量和长期的可维护性。</p>\n</li>\n<li><p>大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为它的方便，还有不合适的操作系统被选择等等。</p>\n</li>\n<li><p>由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计。</p>\n</li>\n</ol>\n<p><strong>适用范围：</strong></p>\n<p>尽管原型可以用作独立的流程模型，但它更常用作一种可以在任何流模型的上下文中实现的技术。</p>\n<p><img src=\"image-20221012140506865.png\" alt=\"image-20221012140506865\"></p>\n<h3 id=\"螺旋模型（Spiral-Model）\"><a href=\"#螺旋模型（Spiral-Model）\" class=\"headerlink\" title=\"螺旋模型（Spiral Model）\"></a><strong>螺旋模型（Spiral Model）</strong></h3><p>螺旋模型是一种风险驱动型的过程模型生成器，对于软件集中的系统，它可以指导多个利益相关者的协同工作。</p>\n<p><strong>优点：</strong></p>\n<p>它结合了原型的迭代性质和瀑布模型的系统性和可控性特点。</p>\n<ol>\n<li><p>强调风险</p>\n</li>\n<li><p>强调阶段质量</p>\n</li>\n<li><p>提供纠错的机会</p>\n</li>\n<li><p>使用原型作为风险降低机制，进一步使开发人员能够在产品演变的任何阶段应用原型方法。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>每个阶段都要提出被选方案，进行风险分析，研发周期长，效率低</p>\n</li>\n<li><p>必须要转业的风险分析人员的参与</p>\n</li>\n<li><p>如果没有发现和管理重大风险，问题无疑将会发生。</p>\n</li>\n</ol>\n<p><strong>适用范围：</strong>大型项目</p>\n<p><img src=\"image-20221012140533502.png\" alt=\"image-20221012140533502\"></p>\n<h3 id=\"协同模型（concurrent-development-model）\"><a href=\"#协同模型（concurrent-development-model）\" class=\"headerlink\" title=\"协同模型（concurrent development model）\"></a><strong>协同模型（concurrent development model）</strong></h3><p>有时候又称为协同工程，它允许软件团队表述本章所描述的任何模型中的迭代和并发元素。</p>\n<p>协同建模提供了项目当前状态的准确画面。</p>\n<p><strong>适用范围</strong>：所有类型的软件开发，协同模型通常更适合涉及不同工程团队的产品工程项目。</p>\n<p><img src=\"image-20221012140549113.png\" alt=\"image-20221012140549113\"></p>\n<h3 id=\"统一过程模型（Unified-Process）\"><a href=\"#统一过程模型（Unified-Process）\" class=\"headerlink\" title=\"统一过程模型（Unified Process）\"></a><strong>统一过程模型（Unified Process）</strong></h3><p>统一过程模型是一种“用例驱动、以体系结构为核心、迭代及增量”的软件 过程框架，由UML 方法和工具支持。它是一种增量模型，定义了五个阶段：</p>\n<p>a、起始阶段，包括用户沟通和计划活动，强调定义和细化用例</p>\n<p>b、 细化阶段，包括用户沟通和建模活动，重点是创建分析和设计模型。</p>\n<p>c、构件阶段，细化模型设计，并将设计模型转化为软件构件实现</p>\n<p>d、 转化阶段，将软件从开发人员传递给最终用户，并由用户完成 beta 测试和验收测试</p>\n<p>e、生产阶段，持续地监控软件的运行，并提供技术支持。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>任何功能开发后就进入测试过程，及早进行验证</p>\n</li>\n<li><p>早期风险识别，采取预防措施</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>需求必须在开始之前完全弄清楚，否怎有可能在架构上出现错误</p>\n</li>\n<li><p>必须有严格的过程管理，以免使过程退化为原始的试→错→改模式</p>\n</li>\n<li><p>如果不加控制的让用户过早接触没有测试完全，版本不稳定的产品可能对用 户和开发团队都带来负面的影响。</p>\n<p><img src=\"image-20221012140630219.png\" alt=\"image-20221012140630219\"></p>\n</li>\n</ol>\n<h1 id=\"Agile-Development\"><a href=\"#Agile-Development\" class=\"headerlink\" title=\"Agile Development\"></a><strong>Agile Development</strong></h1><h2 id=\"敏捷与敏捷过程\"><a href=\"#敏捷与敏捷过程\" class=\"headerlink\" title=\"敏捷与敏捷过程\"></a>敏捷与敏捷过程</h2><p>不管怎么定义敏捷，一定离不开<strong>「短周期地频繁交付」</strong></p>\n<p><strong>敏捷宣言（Agile development manifesto）：</strong></p>\n<ul>\n<li><p>个人和这些个人之间的交流胜过了开发过程和工具</p>\n</li>\n<li><p>可运行的软件胜过了宽泛的文档</p>\n</li>\n<li><p>客户合作胜过了合同谈判</p>\n</li>\n<li><p>对变更的良好响应胜过了按部就班地遵循计划</p>\n</li>\n</ul>\n<h2 id=\"极限编程（Extreme-Programming-XP-）\"><a href=\"#极限编程（Extreme-Programming-XP-）\" class=\"headerlink\" title=\"极限编程（Extreme Programming (XP)）\"></a><strong>极限编程（Extreme Programming (XP)）</strong></h2><blockquote>\n<p><strong>极限编程中的「极限(Extreme)」是指将我们认同的有效软件开发原理和实践应用到极限，频繁地去实践，</strong></p>\n<p>极限编程核心是测试驱动开发、持续集成、用户故事等具体落地的实践</p>\n</blockquote>\n<p>极限编程是敏捷软件开发使用最广泛的一个方法。</p>\n<p><strong>极限编程过程:</strong></p>\n<p><strong>1.策划：</strong></p>\n<ol>\n<li><p>开始创造“用户故事”</p>\n</li>\n<li><p>敏捷团队评估每个故事并分配一个成本（开发周数）</p>\n</li>\n<li><p>故事被分组到一个可交付增量</p>\n</li>\n<li><p>承诺在交付日期进行</p>\n</li>\n<li><p>在第一次递增之后，“项目速度”用于帮助估计后续发行版本的发布日期和进度安排，确定是否对整个开发项目中的所有故事有过分承诺。</p>\n</li>\n</ol>\n<p><strong>2.设计</strong></p>\n<ol>\n<li><p>遵循 KIS（保持简洁）原则</p>\n</li>\n<li><p>鼓励使用 CRC（类-责任-协作者）卡（见第 8 章）</p>\n</li>\n<li><p>对于困难的设计问题，建议创建“尖峰解决方案”——一个设计原型</p>\n</li>\n<li><p>鼓励“重构”： 重构是以不改变代码外部行为而改进其内部结构的方式来修改软件系统的过程。</p>\n</li>\n</ol>\n<p><strong>3.编码</strong></p>\n<ol>\n<li><p>在编码开始之前，建议对故事进行单元测试</p>\n</li>\n<li><p>鼓励“结队编程”</p>\n</li>\n</ol>\n<p><strong>4.测试</strong></p>\n<ol>\n<li><p>所有的单元测试每天都执行</p>\n</li>\n<li><p>“验收测试”，由客户规定技术条件，并且着眼于客户可见的、可评审的系统级的特征和功能。</p>\n</li>\n</ol>\n<p><img src=\"image-20221012140748468.png\" alt=\"image-20221012140748468\"></p>\n<h2 id=\"工业极限编程（Industrial-XP-（IPX））\"><a href=\"#工业极限编程（Industrial-XP-（IPX））\" class=\"headerlink\" title=\"工业极限编程（Industrial XP （IPX））\"></a><strong>工业极限编程（Industrial XP （IPX））</strong></h2><p>IXP 是 XP 的一种有机进化。它由 XP 的最低限要求、以客户为中心、测试驱动精神组成。</p>\n<p>IXP 和 XP 的主要差别在于其管理具有更大的包容性，它扩大了用户角色，升级了技术实践。</p>\n<p>IXP 合并了<strong>六个新实践</strong>：</p>\n<p>Readiness assessment(项目准备)</p>\n<p>Project community(项目社区)</p>\n<p>Project chartering（项目承租）</p>\n<p>Test-driven management （测试驱动管理）</p>\n<p>Retrospectives.（回顾）</p>\n<p>Continuous learning （持续学习）</p>\n<h2 id=\"Scrum\"><a href=\"#Scrum\" class=\"headerlink\" title=\"Scrum\"></a>Scrum</h2><h2 id=\"Kanban\"><a href=\"#Kanban\" class=\"headerlink\" title=\"Kanban\"></a>Kanban</h2><h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><h1 id=\"Recommended-Process-Model\"><a href=\"#Recommended-Process-Model\" class=\"headerlink\" title=\"Recommended Process Model\"></a>Recommended Process Model</h1><h1 id=\"Human-Aspects-of-Software-Engineering\"><a href=\"#Human-Aspects-of-Software-Engineering\" class=\"headerlink\" title=\"Human Aspects of Software Engineering\"></a><strong>Human Aspects of Software</strong> Engineering</h1><h1 id=\"指导实践的原则\"><a href=\"#指导实践的原则\" class=\"headerlink\" title=\"指导实践的原则\"></a>指导实践的原则</h1><h1 id=\"Understanding-Requirements\"><a href=\"#Understanding-Requirements\" class=\"headerlink\" title=\"Understanding Requirements\"></a><strong>Understanding Requirements</strong></h1><h2 id=\"需求工程（Requirement-engineering）\"><a href=\"#需求工程（Requirement-engineering）\" class=\"headerlink\" title=\"需求工程（Requirement engineering）\"></a><strong>需求工程（Requirement engineering）</strong></h2><p><strong>七个任务</strong></p>\n<p><strong>1.起始（Inception）：</strong>在项目起始阶段，要建立基本的理解，包括对问题、谁需要解决方案、所期望解决方案的性质、与项目利益相关者和开发人员之间达成初步交流合作的效果。</p>\n<p><strong>2.导出（Elicitation –gathering requirements）：</strong>询问客户、用户和其他人，系统或产品的目标是什么，想要实现什么，系统和产品如何满足业务的要求，最终系统或产品如何利用于日常工作。</p>\n<p><strong>3.精化（Elaboration-requirement modeling）：</strong>在起始和导出阶段获得的信息将在精化阶段进行扩展和提炼该任务集中于开发一个精确的需求模型。</p>\n<p><strong>4.协商（Negotiation-win-win）：</strong>使用迭代的方法给需求排序，评估每项需求对项目产生的成本和风险，表述内部冲突，删除、组合和修改需求，以便参与各方均能达到一定的满意度，实现双赢。</p>\n<p><strong>5.规格说明（Specification-document，Model，prototype）：</strong>一个规格说明可以是一份写好的文档、一套图形化的模型、一个形式化的数学模型、一组使用场景、一个原型或上述各项的任意组合。</p>\n<p><strong>6.确认（Validation-Quality assess）：</strong>在确认这一步对需求工程的工作产品进行质量评估。</p>\n<p><strong>7.需求管理（Management-Change）：</strong>基于计算机的系统其需求会变更，并且变更的要求贯穿于系统的整个生存期。需求管理是用于帮助项目组在项目进展中标识、控制和跟踪需求以及需求变更的一组活动。</p>\n<h2 id=\"需求建模的元素\"><a href=\"#需求建模的元素\" class=\"headerlink\" title=\"需求建模的元素\"></a><strong>需求建模的元素</strong></h2><p><img src=\"image-20221012140837195.png\" alt=\"image-20221012140837195\"></p>\n<p><img src=\"image-20221012140842657.png\" alt=\"image-20221012140842657\"></p>\n<h1 id=\"需求建模—推荐的方法\"><a href=\"#需求建模—推荐的方法\" class=\"headerlink\" title=\"需求建模—推荐的方法\"></a>需求建模—推荐的方法</h1><h2 id=\"基于场景-Scenario-Based-建模（功能）\"><a href=\"#基于场景-Scenario-Based-建模（功能）\" class=\"headerlink\" title=\"基于场景(Scenario-Based)建模（功能）\"></a>基于场景(Scenario-Based)建模（功能）</h2><p>使用基于场景的方法可以从用户的视角描述系统。</p>\n<p>开发<strong>用例图</strong>时，应列出特定参与者执行的功能或活动。</p>\n<p>例：</p>\n<p><img src=\"image-20221012140858481.png\" alt=\"image-20221012140858481\"></p>\n<p><img src=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png\" alt=\"img\"></p>\n<h3 id=\"用例模板：\"><a href=\"#用例模板：\" class=\"headerlink\" title=\"用例模板：\"></a>用例模板：</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>用例</strong></th>\n<th align=\"left\">在ATM上取款</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>参与者</strong></td>\n<td align=\"left\">取款人</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>目标</strong></td>\n<td align=\"left\">从ATM中取到钱</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>前提条件</strong></td>\n<td align=\"left\">ATM机正常工作，取款人持银行卡取款。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>触发条件</strong></td>\n<td align=\"left\">取款人将卡插入卡槽</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>基本事件流</strong></td>\n<td align=\"left\">1.     触发条件：取款人将卡插入卡槽。<br>  2.     取款人将卡插入卡槽。<br>  3.     取款人输入密码。 <br> 4.     取款人选择“取款”。  <br>5.     取款人取钱。  <br>6.     取款人选择“退出”。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>异常事件流</strong></td>\n<td align=\"left\">1. 卡无效或自动柜员机没有所需现金。<br>  2. 密码不正确:重新输入正确的密码。<br>  3. 选择提款时ATM机里的现金不足，提款人取不到钱。 <br> 4. 选择退出时ATM出现问题，卡被吞</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>后置条件</strong></td>\n<td align=\"left\">ATM机恢复待机状态，后台数据库更新用户余额，短信提醒取钱成功与剩余余额</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>优先级</strong></td>\n<td align=\"left\">必须执行</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可用时</strong></td>\n<td align=\"left\">第一个增量</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>使用频率</strong></td>\n<td align=\"left\">每天多次</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>参与者渠道</strong></td>\n<td align=\"left\">通过操作面板。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>次要参与者</strong></td>\n<td align=\"left\">记录数据库</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>次要参与者的渠道</strong></td>\n<td align=\"left\">记录数据库、互联网</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>开放问题</strong></td>\n<td align=\"left\">要有防止用户卡被机器吞食的保护机制。<br>定义一个固定的时间长度，取款可以停留在操作界面上而不进行任何操作</td>\n</tr>\n</tbody></table>\n<h2 id=\"基于类的建模\"><a href=\"#基于类的建模\" class=\"headerlink\" title=\"基于类的建模\"></a><strong>基于类的建模</strong></h2><p>基于类建模表示了系统操作的对象、应用于对象间能有效控制的操作、这些对象间的关系以及已定义类之间的协作。</p>\n<p>基于类的分析模型包括类和对象、属性、操作、类的职责协作者（CRC）模型、协作图和包。</p>\n<h3 id=\"识别分析类\"><a href=\"#识别分析类\" class=\"headerlink\" title=\"识别分析类\"></a><strong>识别分析类</strong></h3><p>7种可能的类：</p>\n<p><strong>外部实体</strong>（其他系统、设备、人员），产生或实验基于计算机系统的信息。</p>\n<p><strong>事物</strong>（报告、显示、字母、信号），问题信息域的一部分。</p>\n<p><strong>偶发事件或事件</strong>（所有权转移或完成机器人的一组移动动作），在系统操作环境内发生。</p>\n<p><strong>角色</strong>（经理，工程师，销售人员），由和系统交互的人员扮演</p>\n<p><strong>组织单元</strong>（部门，组，团队），和某个应用系统相关</p>\n<p><strong>场地</strong>（制作车间或码头），建立问题的环境和系统的整体功能</p>\n<p><strong>结构</strong>（传感器、交通工具、计算机），定义了对象的类或与对象相关的类。</p>\n<h3 id=\"类-职责-协作者建模（Class-responsibility-collaborator-CRC）\"><a href=\"#类-职责-协作者建模（Class-responsibility-collaborator-CRC）\" class=\"headerlink\" title=\"类-职责-协作者建模（Class-responsibility-collaborator CRC）\"></a><strong>类-职责-协作者建模（<em>Class-responsibility-collaborator</em> CRC）</strong></h3><p>CRC 模型实际上是表示类的标准索引卡片的集合。每个类一个卡片</p>\n<p><strong>三部分：</strong>顶部写类名，左侧列出类的职责，右侧部分列出了类的协作者。</p>\n<img src=\"image-20221019150622381.png\" alt=\"image-20221019150622381\" style=\"zoom:50%;\">\n\n<p><strong>类：</strong></p>\n<p>Entity classes <strong>实体类</strong>：一般代表保存在数据库中和贯穿应用程序的事物。</p>\n<p>Boundary classes <strong>边界类</strong>：创建用户可见的和在使用软件时交互的接口</p>\n<p>Controller classes <strong>控制类</strong>：管理“控制单元”</p>\n<p><strong>职责：</strong></p>\n<p>职责的基本原则：</p>\n<p><strong>属性</strong>：描述了已经选择包含在需求模型中的类</p>\n<p><strong>操作</strong>：定义了某个对象的行为。</p>\n<p>5 个指导原则：</p>\n<p>1.智能系统应分布所有类中以求地满足问题的需求。</p>\n<p>2.每个职责的说明应尽可能具有普遍性。</p>\n<p>3.信息和与之相关的信息应局限于一个类中而不要分布在多个类中。</p>\n<p>4.信息和与之相关的行为应该放在同一类中。</p>\n<p>5.适合时，职责应由相关类共享。</p>\n<h3 id=\"UML-图示例\"><a href=\"#UML-图示例\" class=\"headerlink\" title=\"UML 图示例\"></a>UML 图示例</h3><p><strong>UML类图</strong>：</p>\n<p>类的关系：</p>\n<ul>\n<li>关联：实例有关系，一对多，一对一等关系</li>\n<li>泛化：is kind of,<strong>继承</strong>，空心三角</li>\n<li>聚合：is part of，空心菱形</li>\n</ul>\n<p><img src=\"image-20221214151330971.png\" alt=\"image-20221214151330971\"></p>\n<p>UML<strong>活动图</strong>在特定场景通过提供迭代流的图形表示来补充用例。例：</p>\n<ul>\n<li>并行使用同步条</li>\n<li>可以用来替代程序流程图，反过来不行</li>\n</ul>\n<img src=\"image-20221019161158995.png\" alt=\"image-20221019161158995\" style=\"zoom: 80%;\">\n\n<p><strong>UML时序图：</strong>作为时间的函数，表示事件如何从一个对象流向另一个对象。</p>\n<img src=\"image-20221019155252489.png\" alt=\"image-20221019155252489\" style=\"zoom:80%;\">\n\n<p>UML<strong>泳道图</strong>是<strong>活动图的一种有用变化</strong>，可以让建模人员表示用例所描述的活动流，同时指示哪个参与者或分析类是由活动矩形所描述的活动来负责。</p>\n<img src=\"image-20221019160521548.png\" alt=\"image-20221019160521548\" style=\"zoom:80%;\">\n\n<h2 id=\"基于行为模型\"><a href=\"#基于行为模型\" class=\"headerlink\" title=\"基于行为模型\"></a><strong>基于行为模型</strong></h2><p>生成行为模型的步骤：</p>\n<p>1.评估所有的用例，以保证完全理解系统内的交互顺序</p>\n<p>2.识别驱动交互顺序的事件，并理解这些事件如何与特定的对象相互关联</p>\n<p>3.为每个用例生成序列</p>\n<p>4.创建系统状态图</p>\n<p>5.评审行为模型以验证准确性和一致性。</p>\n<p><strong>状态图：</strong></p>\n<p><strong>UML 状态图</strong>就是一种行为模型，该图为每个类呈现了主动状态和导致这些主动状态变化的事件。</p>\n<p>例:</p>\n<p><img src=\"image-20221214151457611.png\" alt=\"image-20221214151457611\"></p>\n<img src=\"image-20221019160823423.png\" alt=\"image-20221019160823423\" style=\"zoom:67%;\">\n\n<p><strong>时序图</strong>：</p>\n<p><img src=\"image-20221214152126659.png\" alt=\"image-20221214152126659\"></p>\n<p><strong>泳道图：</strong></p>\n<h1 id=\"设计概念-Design-Concepts\"><a href=\"#设计概念-Design-Concepts\" class=\"headerlink\" title=\"设计概念(Design Concepts)\"></a><strong>设计概念(Design Concepts)</strong></h1><h2 id=\"软工语境下的设计\"><a href=\"#软工语境下的设计\" class=\"headerlink\" title=\"软工语境下的设计\"></a>软工语境下的设计</h2><p><strong>软件工程设计：</strong></p>\n<ul>\n<li>数据&#x2F;类设计——将分析类转换为实现类和数据结构。</li>\n<li>架构设计——定义主要软件结构元素之间的关系。</li>\n<li>接口设计——定义软件元素、硬件元素和终端用户之间的通信方式。</li>\n<li>组件级设计——将结构元素转换为软件组件的过程描述。</li>\n</ul>\n<p><strong>将需求模型映射到设计模型:</strong></p>\n<img src=\"image-20221019162512098.png\" alt=\"image-20221019162512098\" style=\"zoom: 67%;\">\n\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><ol>\n<li><p><strong>抽象（Abstraction）：</strong></p>\n<p><strong>过程抽象</strong>是指具有明确和有限的指令序列（描述动作）</p>\n<p><strong>数据抽象</strong>是描述数据对象的冠名数据集合（描述动作怎么做）</p>\n</li>\n<li><p><strong>体系结构（Architecture）</strong>：软件的整体结构和这种结构为系统提供概念完整方式。构件表示主要的系统元素及其交互。</p>\n</li>\n<li><p><strong>模式（Patterns）</strong>：模式承载了已证实的解决方案的精髓。设计模式描述了在某个特定场景与可能影响模式应用和使用方法的“影响力”中解决某个特定的设计问题的设计结构。</p>\n</li>\n<li><p><strong>关注点分离（Separation of concerns）</strong>：它表明任何复杂问题如果被分解为可以独立解决和优化的若干块，该复杂问题能够更容易的被处理。</p>\n</li>\n<li><p><strong>模块化（Modularity）</strong>：模块化是关注点分离最常见的表现。模块化设计使得开发工作更易规划。</p>\n<img src=\"image-20221026145144103.png\" alt=\"image-20221026145144103\" style=\"zoom: 50%;\">\n</li>\n<li><p><strong>信息隐蔽（Hiding）</strong>信息隐蔽原则[Par72]建议模块应该“具有的特征是：每个模块对其它所有模块都隐藏自己的设计决策”。隐蔽定义并加强了对模块内过程细节的访问约束和对模块所使用的任何局部数据结构的访问约束。</p>\n</li>\n<li><p><strong>功能独立（Functional independence）</strong>：开发具有“专一”功能和低耦合性的模块即可实现功能独立。</p>\n</li>\n<li><p><strong>逐步求精（Stepwise refinement）</strong>：通过连续精化过程细节层次来实现程序的开发，通过逐步分解功能的宏观陈述直到形成程序设计语言的语句来进行层次开发。</p>\n<img src=\"image-20221026150156120.png\" alt=\"image-20221026150156120\" style=\"zoom:67%;\">\n\n<p><font>抽象和逐步求精是互补的概念。</font></p>\n</li>\n<li><p><strong>方面（Aspects）</strong>：一个方面作为一个独立的模块进行实施，而不是作为“分割的”或者和许多构件“纠缠的”软件片段进行实施。设计体系结构应当支持定义一个方面，该方面即一个模块，该模块能够使该关注点经过它横切的所有其他关注点而得到实施。</p>\n</li>\n<li><p><strong>重构（Refactoring）</strong>：重构是使用这样一种方式改变软件系统的过程：不改变代码的外部行为而是改进其内部结构。</p>\n</li>\n<li><p>**面向对象的设计概念（OO design concepts）:**面向对象概念（类、对象、继承、消息和多态）</p>\n</li>\n<li><p><strong>设计类（Design Class</strong>）：提供设计细节，使程序得以实施。</p>\n<ol>\n<li>完整（Complete）—（包括所有必要的属性和方法)和充分(只包含实现类意图所需的方法)。</li>\n<li>原生性（Primitiveness）——每个类方法都专注于提供一个服务。</li>\n<li>高内聚（High cohesion）——小的，集中的，专注的class。</li>\n<li>低耦合（Low coupling）——类的协作保持在最小值</li>\n</ol>\n</li>\n</ol>\n<p><strong>设计概念强调了：</strong></p>\n<ol>\n<li>抽象的必要性，它提供了一种创造可重用软件构件的方法</li>\n<li>体系结构的重要性，它使得能够更好地理解系统整体结构</li>\n<li>基于模式的工程的有益性，它是一项用于已证明能力的软件的设计技术</li>\n<li>关注点分离和有效的模块化的价值，他们使得软件更容易理解、更容易测试以及更容易维护。</li>\n<li>信息隐藏的直接作用，当错误发生时，它能够减少负面影响的传播</li>\n<li>功能独立的影响，他是构造有效模块的标准</li>\n<li>求精作为一种设计方法的作用</li>\n<li>横切系统需求方面的考虑</li>\n<li>重构的应用，他是为了优化已导出的设计</li>\n<li>面向对象的类和与类相关特征的重要性</li>\n</ol>\n<h2 id=\"设计模型\"><a href=\"#设计模型\" class=\"headerlink\" title=\"设计模型\"></a>设计模型</h2><p><img src=\"image-20221026150428993.png\" alt=\"image-20221026150428993\"></p>\n<p><strong>数据设计元素</strong>：数据设计创建在高级抽象级上表示的数据模型和信息模型。</p>\n<p><strong>体系结构设计元素</strong>：体系结构设计元素通常描述为一组相互关联系统的子系统，且常常从需求模型中的分析包中派生出来。</p>\n<p><strong>接口设计元素</strong>：软件接口设计元素描述了信息如何流入和流出系统以及被定义为体系结构一部分的构件之间是如何通信的。</p>\n<p>&#x3D;&#x3D;接口设计有 3 个重要的元素：&#x3D;&#x3D;</p>\n<p>（1）用户界面</p>\n<p>（2）和其他系统、设备、网络或其他信息生成者或使用者的外部接口</p>\n<p>（3）各种设计构件之间的内部接口</p>\n<p><strong>构件级设计元素</strong>：软件的构件级设计完整地描述了每个软件构件的内部细节。构件级设计为所以局部数据对象定义数据结构，为所有在构件内发生的处理定义算法细节，并定义允许访问所有构件操作的接口。</p>\n<p><strong>部署级设计元素：</strong>部署级设计元素指明软件功能和子系统将如何在支持软件的物理计算环境内分布。</p>\n<h1 id=\"体系结构设计Architectural-Design-–-A-Recommended-Approach\"><a href=\"#体系结构设计Architectural-Design-–-A-Recommended-Approach\" class=\"headerlink\" title=\"体系结构设计Architectural Design – A Recommended Approach\"></a><strong>体系结构设计</strong>Architectural Design – A Recommended Approach</h1><h2 id=\"软件体系结构\"><a href=\"#软件体系结构\" class=\"headerlink\" title=\"软件体系结构\"></a>软件体系结构</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>**程序或计算机系统的软件体系结构是指系统的一个或者多个结构，它包括&#x3D;&#x3D;软件构件&#x3D;&#x3D;、&#x3D;&#x3D;构件的外部可见属性&#x3D;&#x3D;以及&#x3D;&#x3D;它们之间的相互联系&#x3D;&#x3D;**。</p>\n<p><strong>体系结构&#x3D;&#x3D;并非可运行的程序&#x3D;&#x3D;。</strong></p>\n<p>确切的说，它是一种表达,是能够：</p>\n<ol>\n<li>对设计在满足既定需求方面的<strong>有效性进行分析</strong></li>\n<li>在设计变更相对容易的阶段，考虑体系结构<strong>可能的替换方案</strong></li>\n<li><strong>降低</strong>与软件构造相关的<strong>风险</strong></li>\n</ol>\n<h3 id=\"体系结构重要的-3-个关键原因\"><a href=\"#体系结构重要的-3-个关键原因\" class=\"headerlink\" title=\"体系结构重要的 3 个关键原因\"></a><strong>体系结构重要的 3 个关键原因</strong></h3><ol>\n<li>软件体系结构的表示有助于对计算机系统开发感兴趣的各方展开交流。</li>\n<li>体系结构突出了早期的设计决策，这些决策对随后所有的软件工程工作有深远影响，同时对系统作为一个可运行实体的最后成功有重要作用</li>\n<li>体系结构“构建了一个相对小的、易于理解的模型，该模型描述了系统如何构成以及其构件如何一起工作</li>\n</ol>\n<h3 id=\"体系结构风格\"><a href=\"#体系结构风格\" class=\"headerlink\" title=\"体系结构风格\"></a><strong>体系结构风格</strong></h3><ol>\n<li>以数据为中心的体系结构。</li>\n<li>数据流体系结构。</li>\n<li>调用和返回体系结构</li>\n<li>面向对象体系结构</li>\n<li>层次体系结构</li>\n</ol>\n<h3 id=\"体系结构环境图（ACD）\"><a href=\"#体系结构环境图（ACD）\" class=\"headerlink\" title=\"体系结构环境图（ACD）\"></a><strong>体系结构环境图（ACD）</strong></h3><p>上级系统：这些系统把目标系统作为某些高层处理方案的一部分</p>\n<p>下级系统：这些系统被目标系统使用，并为完成目标系统的功能提供必要的数据和处理</p>\n<p>同级系统：这些系统在对等的基础上相互作用</p>\n<p>参与者：通过产生和消耗必要处理所需的信息，实现与目标系统交互的实体（人，设备）</p>\n<p><img src=\"image-20221210134301873.png\" alt=\"image-20221210134301873\"></p>\n<h1 id=\"Component-Level-Design\"><a href=\"#Component-Level-Design\" class=\"headerlink\" title=\"Component-Level Design\"></a><strong>Component-Level Design</strong></h1><ul>\n<li><p>体系设计——建筑平面图、结构、房间和外部环境之间的连接机制</p>\n</li>\n<li><p>构件级设计——每个房间的内部<strong>细节设计</strong></p>\n</li>\n</ul>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol>\n<li><p>构件是计算机软件中的一个模块化的构造块。</p>\n</li>\n<li><p>OMG 定义构件：系统中模块化的、可部署的和可替换的部件，该部件封装了实现并暴露一组接口。</p>\n</li>\n</ol>\n<p>关于什么是组件的三个重要观点：</p>\n<ul>\n<li><p><strong>面向对象的观点（Object-Oriented view）：</strong>构件包括一组协作的类。</p>\n<p>  <img src=\"image-20221210135030701.png\" alt=\"image-20221210135030701\"></p>\n</li>\n<li><p><strong>传统观点（Traditional View）：</strong>一个构件就是程序的一个功能要素，程序由处理逻辑及实现处理逻辑所需的每部数据结构以及能够保证构件被调用和实现数据传递的结构构成。</p>\n<p>  <img src=\"image-20221210135053957.png\" alt=\"image-20221210135053957\"></p>\n</li>\n<li><p><strong>流程相关的观点（Process-related view）</strong>：构建使用现有软件组件或设计模式的系统。</p>\n</li>\n</ul>\n<h2 id=\"设计基于类的构建\"><a href=\"#设计基于类的构建\" class=\"headerlink\" title=\"设计基于类的构建\"></a>设计基于类的构建</h2><h3 id=\"基本设计原则\"><a href=\"#基本设计原则\" class=\"headerlink\" title=\"基本设计原则\"></a><strong>基本设计原则</strong></h3><p><strong>4个基本设计原则和3个附加打包原则：</strong></p>\n<ol>\n<li><strong>开闭原则（Open-Closed Principle ，OCP）：</strong>模块应该对外延具有开放性，对修改具有封闭性。符合开放封闭原则的模块都有两个主要特性：<ol>\n<li><strong>它们 “面向扩展开放（Open For Extension）”：</strong>也就是说模块的行为是能够被扩展的。当应用程序的需求变化时，我们可以使模块表现出全新的或与以往不同的行为，以满足新的需求。</li>\n<li><strong>它们 “面向修改封闭（Closed For Modification）”：</strong>模块的源代码是不能被侵犯的，任何人都不允许修改已有源代码。</li>\n</ol>\n</li>\n<li><strong>依赖倒置原则（Dependency Inversion Principle ，DIP）：</strong>依赖于抽象，而非具体实现。</li>\n<li><strong>Liskov 替换原则（Liskov Substitution Principle (LSP)）：</strong>子类可以替换他们的基类。</li>\n<li><strong>接口分离原则（The Interface Segregation Principle (ISP)）：</strong>多个客户专用接口比一个通用接口好</li>\n<li><strong>发布复用等价性原则（The Release Reuse Equivalency Principle，REP）：</strong>复用的粒度就是发布的粒度</li>\n<li><strong>共同封装原则（The Common Closure Principle (CCP)）：</strong>一同变更的类应该合在一起</li>\n<li><strong>共同复用原则（The Common Reuse Principle (CRP））：</strong>不能一起复用的类不能被分到一组</li>\n</ol>\n<h3 id=\"设计准则\"><a href=\"#设计准则\" class=\"headerlink\" title=\"设计准则\"></a>设计准则</h3><ul>\n<li><p><strong>内聚性（Cohesion）：</strong>内聚性意味着构件或者类只封装那些相互关联密切，以及与构件或类自身有亲密关系的属性和操作。</p>\n<ul>\n<li><p>功能内聚：主要通过操作来体现，当一个模块只完成某一组特定操作并返回结果时，就称此模块是功能内聚的。</p>\n</li>\n<li><p>分层内聚：高层能够访问低层的服务，但低层不能访问高层的服务。</p>\n</li>\n<li><p>通信内聚：访问相同数据的所有操作被定义在同一个类中。（数据的查询，访问，存储）</p>\n</li>\n</ul>\n</li>\n<li><p><strong>耦合性（Coupling）：</strong>从高到低</p>\n</li>\n<li><p>耦合是类之间彼此联系程度的一种定性度量。随着类（构件）相互依赖越来越多，类之间的耦合程度亦会增加。</p>\n</li>\n<li><p>内容耦合：暗中修改其他构件的内部数据，这违反了信息隐蔽原则</p>\n</li>\n<li><p>公用耦合：当大量的构件都要使用同一个全局变量时发生这种耦合</p>\n</li>\n<li><p>控制耦合：当操作 A 调用操作 B，并向 B 传递控制标记时，就会发生这种耦合。</p>\n</li>\n<li><p>标记耦合：当类 B 被声明为类 A 某一操作中的一个参数类型时，就会发生这种耦合。</p>\n</li>\n<li><p>数据耦合：当操作需要传递长串的数据参数时，就会发生这种耦合。</p>\n</li>\n<li><p>例程调用耦合：当一个操作调用另一个操作时，就会发生这种耦合。</p>\n</li>\n<li><p>类型使用耦合：当构件 A 使用了在构件 B 中定义的一个数据类型时，就会发生这种耦合。</p>\n</li>\n<li><p>包含或者导入耦合：当构件 A 引入或者包含一个构件 B 的包或者内容时，就会发生这种耦合。</p>\n</li>\n<li><p>外部耦合：当一个构件和基础设施构件进行通信和协作时，就会发生这种耦合。</p>\n</li>\n</ul>\n<p><strong>为什么要高内聚?</strong></p>\n<p>模块之间的关系越紧密,出错就越少!</p>\n<p><strong>为什么要低耦合?</strong></p>\n<p>子程序间的关系越复杂,就会产生更多的意想不到的错误!会给以后的维护工作带来很多麻烦!</p>\n<p>高内聚低耦合，是软件工程中的概念，是判断设计好坏的标准，主要是面向对象的设计，主要是看类的内聚性是否高，耦合度是否低。</p>\n<h2 id=\"基于O-O的组件设计\"><a href=\"#基于O-O的组件设计\" class=\"headerlink\" title=\"基于O-O的组件设计\"></a>基于O-O的组件设计</h2><p><img src=\"image-20221214155233138.png\" alt=\"image-20221214155233138\"></p>\n<p>静态类图</p>\n<p>动态协作图（等价于时序图）</p>\n<h2 id=\"传统组件级设计\"><a href=\"#传统组件级设计\" class=\"headerlink\" title=\"传统组件级设计\"></a>传统组件级设计</h2><p><img src=\"image-20221214155441736.png\" alt=\"image-20221214155441736\"></p>\n<h2 id=\"执行组件级设计\"><a href=\"#执行组件级设计\" class=\"headerlink\" title=\"执行组件级设计\"></a>执行组件级设计</h2><h3 id=\"组件级设计\"><a href=\"#组件级设计\" class=\"headerlink\" title=\"组件级设计\"></a>组件级设计</h3><ol>\n<li><p>确定与问题域对应的所有设计类。</p>\n</li>\n<li><p>确定与基础架构域对应的所有设计类。</p>\n</li>\n<li><p>详细说明所有没有作为可重用组件获得的设计类。</p>\n<ol>\n<li>指定类或组件协作时的消息细节。</li>\n<li>为每个组件确定适当的接口。</li>\n<li>详细说明属性并定义实现它们所需的数据类型和数据结构。</li>\n<li>详细描述每个操作中的处理流程。</li>\n</ol>\n</li>\n<li><p>描述持久数据源(数据库和文件)并确定管理它们所需的类。</p>\n</li>\n<li><p>开发并详细描述一个类或组件的行为表示。</p>\n</li>\n<li><p>精心设计部署图，以提供额外的实现细节。</p>\n<p> <img src=\"image-20221210141113852.png\" alt=\"image-20221210141113852\"></p>\n</li>\n<li><p>考虑每个组件级设计表示形式，并始终考虑备选方案。</p>\n</li>\n</ol>\n<h2 id=\"专门的组件级设计\"><a href=\"#专门的组件级设计\" class=\"headerlink\" title=\"专门的组件级设计\"></a>专门的组件级设计</h2><h3 id=\"WebApps的组件级设计\"><a href=\"#WebApps的组件级设计\" class=\"headerlink\" title=\"WebApps的组件级设计\"></a>WebApps的组件级设计</h3><p><strong>WebApp组件是:</strong></p>\n<ul>\n<li><p>定义良好的内聚函数，用于操作内容或为最终用户提供计算或数据处理。</p>\n</li>\n<li><p>内容和功能的内聚包，为最终用户提供一些所需的功能。</p>\n</li>\n</ul>\n<h2 id=\"组件重构（Component-refactoring）\"><a href=\"#组件重构（Component-refactoring）\" class=\"headerlink\" title=\"组件重构（Component refactoring）\"></a>组件重构（Component refactoring）</h2><h1 id=\"User-Experience-Design\"><a href=\"#User-Experience-Design\" class=\"headerlink\" title=\"User Experience Design.\"></a>User Experience Design.</h1><h2 id=\"用户体验元素\"><a href=\"#用户体验元素\" class=\"headerlink\" title=\"用户体验元素\"></a>用户体验元素</h2><p><img src=\"image-20221210142236309.png\" alt=\"image-20221210142236309\"></p>\n<ul>\n<li>信息架构</li>\n<li>用户界面设计</li>\n<li>可用性工程</li>\n<li>可视化设计</li>\n</ul>\n<p><img src=\"image-20221210142751755.png\" alt=\"image-20221210142751755\"></p>\n<h2 id=\"黄金原则\"><a href=\"#黄金原则\" class=\"headerlink\" title=\"黄金原则\"></a>黄金原则</h2><h3 id=\"用户操纵控制\"><a href=\"#用户操纵控制\" class=\"headerlink\" title=\"用户操纵控制\"></a>用户操纵控制</h3><p>（1）以不强迫用户进入不必要的或不希望的动作的方式来定义交互模式</p>\n<p>（2）允许用户交互被中断和撤销</p>\n<p>（3）当技能级别增长时可以使交互流线化并允许定制交互</p>\n<p>（4）使用用户与内部技术细节隔离开来</p>\n<p>（5）设计应允许用户与出现在屏幕上的对象直接交互</p>\n<h3 id=\"减少用户的记忆负担\"><a href=\"#减少用户的记忆负担\" class=\"headerlink\" title=\"减少用户的记忆负担\"></a><strong>减少用户的记忆负担</strong></h3><p>（1）减少对短期记忆的要求</p>\n<p>（2）建立有意义的缺省</p>\n<p>（3）定义直观的快捷方式</p>\n<p>（4）以不断进展的方式揭晓信息</p>\n<h3 id=\"保持界面一致\"><a href=\"#保持界面一致\" class=\"headerlink\" title=\"保持界面一致\"></a><strong>保持界面一致</strong></h3><p>（1）允许用户当前任务放入有意义的环境中</p>\n<p>（2）在应用系统家族内保持一致性</p>\n<p>（3）如果过去的交互模型已经建立起了用户期望，除非有迫不得已的理由，doze 不要改变它。</p>\n<h2 id=\"UI分析与设计\"><a href=\"#UI分析与设计\" class=\"headerlink\" title=\"UI分析与设计\"></a>UI分析与设计</h2><h3 id=\"UI分析任务\"><a href=\"#UI分析任务\" class=\"headerlink\" title=\"UI分析任务\"></a>UI分析任务</h3><p><img src=\"image-20221214155932626.png\" alt=\"image-20221214155932626\"></p>\n<h3 id=\"UI设计模型\"><a href=\"#UI设计模型\" class=\"headerlink\" title=\"UI设计模型\"></a>UI设计模型</h3><p>工程师建立<strong>用户模型</strong>。软件工程师创建<strong>设计模型</strong>。最终用户在脑海中对界面产生映像，称为用户的<strong>心理模型</strong>或系统感觉。系统的实现者创建<strong>实现模型</strong>。</p>\n<ul>\n<li><strong>用户模型：</strong>确定了系统最终用户的轮廓。</li>\n<li><strong>设计模型：</strong>用户界面的设计</li>\n<li><strong>心理模型：</strong>最终用户在脑海里对系统产生的印象。</li>\n<li><strong>实现模型：</strong>组合了计算机系统的外在表现，结合了所有用来描述系统语法和语言的支撑信息。</li>\n</ul>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>用户界面的分析和设计过程是迭代的，用户界面分析和设计过程<strong>开始于螺旋模型的内部</strong>，并且包括 4 个阶段：</p>\n<ul>\n<li>界面分析及建模。</li>\n<li>界面设计。</li>\n<li>界面构造。</li>\n<li>界面确认。</li>\n</ul>\n<p><img src=\"image-20221210143134777.png\" alt=\"image-20221210143134777\"></p>\n<p>界面设计的目标是定义一组界面对象和动作，使得用户能够以满足系统所定义的每个使用目标的方式完成所有定义对的任务。</p>\n<h2 id=\"UX分析与设计\"><a href=\"#UX分析与设计\" class=\"headerlink\" title=\"UX分析与设计\"></a>UX分析与设计</h2><h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><h3 id=\"接口设计步骤\"><a href=\"#接口设计步骤\" class=\"headerlink\" title=\"接口设计步骤\"></a><strong>接口设计步骤</strong></h3><ol>\n<li>使用在接口分析期间开发的信息，<strong>定义接口对象和操作</strong>。</li>\n<li>定义将导致用户界面状态改变的事件**(用户操作)**。模仿这种行为。</li>\n<li><strong>描述每个界面状态</strong>，就像它将实际地看给最终用户一样。</li>\n<li>指示用户如何从接口提供的信息中解释系统的状态。</li>\n</ol>\n<h3 id=\"例子SafeHome\"><a href=\"#例子SafeHome\" class=\"headerlink\" title=\"例子SafeHome\"></a>例子<em>SafeHome</em></h3><ul>\n<li><p><strong>用例：</strong>为了远程访问SafeHome，房主提供一个标识符和一个密码。这些定义了访问的级别（如并非所有用户均可以重新配置系统）并提供安全保证。一旦确认身份，用户（具有全部访问权限）检查系统状态并通过启动或关闭系统改变状态。用户通过显示房子的建筑平面图、观察每个安全传感器、显示每个当前配置区域以及必要时修改区域而重新配置系统。用户通过策略地放置的摄像头观察房子内部。用户可以摇动和变焦每个摄像头而提供房子内部的不同视角。</p>\n</li>\n<li><p><strong>定义对象和动作</strong>：</p>\n<p>  <img src=\"image-20221210144633032-16706547958251.png\" alt=\"image-20221210144633032\"></p>\n</li>\n<li><p><strong>分类对象：</strong></p>\n<p>  <img src=\"image-20221210144807793.png\" alt=\"image-20221210144807793\"></p>\n</li>\n<li><p><strong>屏幕布局：</strong></p>\n<p>  <img src=\"image-20221210144917207.png\" alt=\"image-20221210144917207\"></p>\n</li>\n</ul>\n<h3 id=\"UI设计模式\"><a href=\"#UI设计模式\" class=\"headerlink\" title=\"UI设计模式\"></a><strong>UI设计模式</strong></h3><p>设计模式是为特定的、有良好边界的设计问题规定设计解决方案的一种抽象。</p>\n<p><strong>界面设计模板（win, android, os）</strong></p>\n<ul>\n<li>鼠标，滚动条，下拉菜单，弹出窗口，状态栏，图标，进度条，树形列表，触摸操作</li>\n</ul>\n<h2 id=\"设计评价\"><a href=\"#设计评价\" class=\"headerlink\" title=\"设计评价\"></a>设计评价</h2><p><img src=\"image-20221210145132156.png\" alt=\"image-20221210145132156\"></p>\n<h2 id=\"可用性和可访问性\"><a href=\"#可用性和可访问性\" class=\"headerlink\" title=\"可用性和可访问性\"></a>可用性和可访问性</h2><p>可用性是指用户在使用高科技产品所提供的功能和特性时，对使用的容易程度和有效程度的定量测量。</p>\n<h2 id=\"传统软件的用户体验和移动性\"><a href=\"#传统软件的用户体验和移动性\" class=\"headerlink\" title=\"传统软件的用户体验和移动性\"></a>传统软件的用户体验和移动性</h2><h1 id=\"Design-for-Mobility\"><a href=\"#Design-for-Mobility\" class=\"headerlink\" title=\"Design for Mobility.\"></a>Design for Mobility.</h1><h2 id=\"挑战\"><a href=\"#挑战\" class=\"headerlink\" title=\"挑战\"></a>挑战</h2><h2 id=\"移动开发生命周期\"><a href=\"#移动开发生命周期\" class=\"headerlink\" title=\"移动开发生命周期\"></a>移动开发生命周期</h2><h2 id=\"移动架构设计\"><a href=\"#移动架构设计\" class=\"headerlink\" title=\"移动架构设计\"></a>移动架构设计</h2><h2 id=\"上下文感知APP\"><a href=\"#上下文感知APP\" class=\"headerlink\" title=\"上下文感知APP\"></a>上下文感知APP</h2><h2 id=\"网页设计金字塔\"><a href=\"#网页设计金字塔\" class=\"headerlink\" title=\"网页设计金字塔\"></a>网页设计金字塔</h2><h2 id=\"组件级别设计\"><a href=\"#组件级别设计\" class=\"headerlink\" title=\"组件级别设计\"></a>组件级别设计</h2><h2 id=\"移动设计质量\"><a href=\"#移动设计质量\" class=\"headerlink\" title=\"移动设计质量\"></a>移动设计质量</h2><p>质量属性（quality attributes ）</p>\n<p><img src=\"image-20221210165149285.png\" alt=\"image-20221210165149285\"></p>\n<p><img src=\"image-20221210165247462.png\" alt=\"image-20221210165247462\"></p>\n<p><strong>六个特性：功能性、可靠性、易用性、效率、维护性、可移植性</strong></p>\n<ol>\n<li><strong>功能性：</strong>当软件在指定条件下使用时，软件产品提供满足明确和隐含要求的功能的能力<ol>\n<li>适合性：软件产品为指定的任务和用户目标提供一组合适的功能的能力</li>\n<li>准确性：软件产品提供具有所需精度的正确或相符的结果或效果的能力</li>\n<li>互操作性：软件产品与一个或更多的规定系统进行交互的能力</li>\n<li>安全保密性：软件产品保护信息和数据的能力</li>\n</ol>\n</li>\n<li><strong>可靠性：</strong>在指定条件使用时，软件产品维护规定的性能级别的能力<ol>\n<li>成熟性：软件产品为避免由软件中故障而导致失效的能力</li>\n<li>容错性：在软件出现故障或者违反其指定接口的情况下，软件产品维持规定的性能级别的能力</li>\n<li>易恢复性：在失效发生的情况下，软件产品重建规定的性能级别并恢复受直接影响的数据的能力</li>\n</ol>\n</li>\n<li><strong>易用性：</strong>在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力<ol>\n<li>易理解性：使用用户能理解软件是否合适及如何能将软件用于特定的任务的能力</li>\n<li>易学性：使用用户能学习其应用的能力</li>\n<li>易操作性：使用户能操作和控制它的能力</li>\n<li>吸引性：软件产品吸引用户的能力</li>\n</ol>\n<p>\t</p>\n</li>\n<li><strong>效率：</strong>在规定条件下，相对于所用资源的数量，软件产品可提供适当性能的能力<ol>\n<li>时间特性：软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力</li>\n<li>资源利用性：软件执行其功能时，使用合适数量和类别的资源的能力</li>\n</ol>\n</li>\n<li><strong>维护性：</strong>软件产品可被修改的能力。包括纠正、改进或对环境、需求和功能规格说明变化的适应<ol>\n<li>易分析性：诊断软件中的缺陷或失效原因或识别待修改部分的能力</li>\n<li>易改变性：使指定的修改可以被实现的能力</li>\n<li>稳定性：避免由于软件修改而造成意外结果的能力</li>\n<li>易测试性：使已修改软件能被确认的能力</li>\n</ol>\n</li>\n<li><strong>可移植性：</strong>软件产品从一种环境迁移到另外一种环境的能力<ol>\n<li>适应性：无需采用额外的活动或手段就可适应不同指定环境的能力</li>\n<li>易安装性：软件产品在指定环境中被安装的能力</li>\n<li>共存性：在公共环境中同与其分享公共资源的其他独立软件共存的能力</li>\n<li>易替换性：在同样的环境下，替代另一个相同用途的指定软件产品的能力</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Pattern-Based-Design\"><a href=\"#Pattern-Based-Design\" class=\"headerlink\" title=\"Pattern-Based Design\"></a>Pattern-Based Design</h1><h2 id=\"Design-Pattern\"><a href=\"#Design-Pattern\" class=\"headerlink\" title=\"Design Pattern\"></a>Design Pattern</h2><h2 id=\"基于模式的软件设计\"><a href=\"#基于模式的软件设计\" class=\"headerlink\" title=\"基于模式的软件设计\"></a>基于模式的软件设计</h2><h2 id=\"体系结构设计\"><a href=\"#体系结构设计\" class=\"headerlink\" title=\"体系结构设计\"></a>体系结构设计</h2><h2 id=\"组件级设计模式\"><a href=\"#组件级设计模式\" class=\"headerlink\" title=\"组件级设计模式\"></a>组件级设计模式</h2><h2 id=\"Anti-patterns\"><a href=\"#Anti-patterns\" class=\"headerlink\" title=\"Anti-patterns\"></a>Anti-patterns</h2><h2 id=\"移动设计模式\"><a href=\"#移动设计模式\" class=\"headerlink\" title=\"移动设计模式\"></a>移动设计模式</h2><h1 id=\"Software-Testing-Strategies\"><a href=\"#Software-Testing-Strategies\" class=\"headerlink\" title=\"Software Testing Strategies\"></a><strong>Software Testing Strategies</strong></h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>测试：</strong>测试是在交付给最终用户之前以特定意图找出错误为目的来执行程序的过程。</p>\n<p><strong>验证与确认</strong>（Verification and Validation，V&amp;V）：</p>\n<ul>\n<li><strong>验证</strong>是指确保软件正确地实现某一特定功能的一系列活动。</li>\n<li><strong>确认</strong>是指确保开发的软件可追溯到客户需求的另外一系列活动。</li>\n</ul>\n<p><img src=\"image-20221210151413472.png\" alt=\"image-20221210151413472\"></p>\n<h2 id=\"测试策略：从小到大\"><a href=\"#测试策略：从小到大\" class=\"headerlink\" title=\"测试策略：从小到大\"></a>测试策略：从小到大</h2><p><img src=\"image-20221214160040929.png\" alt=\"image-20221214160040929\"></p>\n<h1 id=\"Testing-Conventional-Applications\"><a href=\"#Testing-Conventional-Applications\" class=\"headerlink\" title=\"Testing Conventional Applications\"></a><strong>Testing Conventional Applications</strong></h1><h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a><strong>单元测试</strong></h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><strong>侧重点：</strong></p>\n<ul>\n<li><p>单元测试侧重于软件设计的<strong>最小单元（软件构件或模块）的验证工作</strong>。</p>\n</li>\n<li><p>单元测试侧重于<strong>构件的内部处理逻辑和数据结构</strong>。</p>\n</li>\n</ul>\n<p>可以对多个构件并行执行。</p>\n<p>测试模块的接口是为了保证被测试程序单元的信息能够正常地流入和流出；</p>\n<p>检查局部数据结构以确保临时存储的数据在算法的整个执行过程中能维持其完善性。</p>\n<p>执行控制结构中的所有独立路径（基本路径）以确保模块中的所有语句至少执行一次。</p>\n<p>测试边界条件确保模块在到达边界值得极限或受限处理的情形下仍能正确执行。</p>\n<p>最后要对所有的错误处理路径进行测试。</p>\n<p>在单元测试期间，选择测试的执行路径是最基本的任务。</p>\n<p>边界测试时最重要的单元测试任务之一。</p>\n<h3 id=\"单元测试过程\"><a href=\"#单元测试过程\" class=\"headerlink\" title=\"单元测试过程\"></a><strong>单元测试过程</strong></h3><p><img src=\"image-20221210152614210.png\" alt=\"image-20221210152614210\"></p>\n<p><strong>驱动模块：</strong>接收测试用例数据，将这些数据传递给被测模块，并输出结果。</p>\n<p><strong>桩：</strong>替换那些从属于被测模块的模块</p>\n<p>当设计高内聚的构件时，就可以简化单元测试。当构件只强调一个功能时，测试用例数就会降低，且比较容易预见错误和发现错误。</p>\n<h2 id=\"集成测试\"><a href=\"#集成测试\" class=\"headerlink\" title=\"集成测试\"></a><strong>集成测试</strong></h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>集成测试时构造软件体系结构的系统化技术，同时也是进行一些旨在发现与接口相关的错误的测试。</p>\n<p><strong>集成测试的目标是利用单元测试的构件建立设计中描述的程序结构。</strong></p>\n<ul>\n<li><p><strong>自顶向下集成：</strong>自顶向下集成测试是一种构造软件体系结构的增量方法。</p>\n</li>\n<li><p><strong>深度优先：</strong>深度优先集成是首先集成位于程序结构中主控路径上的所有控件。</p>\n</li>\n<li><p><strong>广度优先：</strong>广度优先集成首先沿水平方向，将属于同一层的构件集成起来。</p>\n</li>\n</ul>\n<h3 id=\"自顶向下集成过程：\"><a href=\"#自顶向下集成过程：\" class=\"headerlink\" title=\"自顶向下集成过程：\"></a><strong>自顶向下集成过程：</strong></h3><ol>\n<li><p>主控模块作为测试驱动模块，用桩模块代替直接附属的下层模块；</p>\n</li>\n<li><p>根据所选的集成策略（深度优先&#x2F;广度优先），每次用一个实际模块替换一个桩模块；</p>\n</li>\n<li><p>每集成一个模块都进行测试；</p>\n</li>\n<li><p>完成每个测试集之后，用实际模块替换另一个桩模块；</p>\n</li>\n<li><p>可以进行回归测试（即全部或部分地重复已做过的测试），以避免引入新错误。</p>\n</li>\n<li><p>回到第 2 步继续执行此过程，直到完成整个程序结构的构造。</p>\n</li>\n</ol>\n<h3 id=\"自底向上集成测试：\"><a href=\"#自底向上集成测试：\" class=\"headerlink\" title=\"自底向上集成测试：\"></a><strong>自底向上集成测试：</strong></h3><p>就是从原子模块（程序结构的最底层构件）开始进行构造和测试。</p>\n<p><strong>自底向上集成测试过程：</strong></p>\n<p>1.连接底层构件以构成完成特定子功能的簇。</p>\n<p>2.编写驱动模块（测试的控制程序）以协调测试用例的输入和输出</p>\n<p>3.测试簇</p>\n<p>4.去掉驱动程序，沿着程序结构向上逐步连接簇</p>\n<p><img src=\"image-20221214160510145.png\" alt=\"image-20221214160510145\"></p>\n<h2 id=\"回归测试\"><a href=\"#回归测试\" class=\"headerlink\" title=\"回归测试\"></a><strong>回归测试</strong></h2><p>回归测试重新执行已测试过的某些子集，以确保变更没有传播不期望的副作用。</p>\n<p>回归测试有助于保证变更不引入无意思行为或额外的错误。</p>\n<p>回归测试可以手工进行，方法是重新执行所以测试用例的子集，或者利用捕捉&#x2F;回放工具自</p>\n<p>动进行。</p>\n<h1 id=\"Testing-Object-Oriented-Applications\"><a href=\"#Testing-Object-Oriented-Applications\" class=\"headerlink\" title=\"Testing Object-Oriented Applications\"></a><strong>Testing Object-Oriented Applications</strong></h1><h2 id=\"面向对象软件的测试策略\"><a href=\"#面向对象软件的测试策略\" class=\"headerlink\" title=\"面向对象软件的测试策略\"></a><strong>面向对象软件的测试策略</strong></h2><p>面向对象软件的<strong>类测试</strong>等同于传统软件的<strong>单元测试</strong>。</p>\n<p>不同的是：</p>\n<ul>\n<li><p>传统软件单元测试侧重于<strong>模块的算法细节和模块接口数据</strong>；</p>\n</li>\n<li><p>面向对象类的测试侧重于封装在该类中的<strong>操作和类的状态行为</strong>。</p>\n</li>\n</ul>\n<p>封装的类是单元测试的重点，但不再孤立地对单个操作进行测试，而是将其作为类的一部分。</p>\n<p>簇测试是面向对象软件集成测试中的一个步骤。</p>\n<h2 id=\"确认测试（Validation-Testing）\"><a href=\"#确认测试（Validation-Testing）\" class=\"headerlink\" title=\"确认测试（Validation Testing）\"></a><strong>确认测试（Validation Testing）</strong></h2><p>确认测试准则：<strong>软件确认是通过一系列表明与软件需求相符合的测试而获得的。</strong></p>\n<h3 id=\"α测试（Alpha-testing）内部测试：\"><a href=\"#α测试（Alpha-testing）内部测试：\" class=\"headerlink\" title=\"α测试（Alpha testing）内部测试：\"></a><strong>α测试（Alpha testing）内部测试：</strong></h3><p>α测试测试是由代表性的最终用户<strong>在开发者的场所进行</strong>。软件在自然的环境下使用，开发者站在用户的后面观看，并记录错误和使用问题。α测试在受控的环境下测试。</p>\n<h3 id=\"β测试（Beta-testing）外部测试：\"><a href=\"#β测试（Beta-testing）外部测试：\" class=\"headerlink\" title=\"β测试（Beta testing）外部测试：\"></a><strong>β测试（Beta testing）外部测试：</strong></h3><p>又称<strong>客户验收测试，Acceptance testing：</strong>β测试在一个或多个最终用户场所进行。与α测试不同，开发者通常不在场，因此，β测试是在不为开发者控制的环境下软件的“现场”应用。是在不可控的环境下测试。</p>\n<h2 id=\"系统测试\"><a href=\"#系统测试\" class=\"headerlink\" title=\"系统测试\"></a><strong>系统测试</strong></h2><p>系统测试实际上是对整个基于计算机的系统进行一系列不同考验的测试。所有测试都是为了验证系统成分已经正确地集成在一起，并且完成了指派的功能。</p>\n<p>**恢复测试（Recovery testing）:**通过各种方式强制让软件以各种方式失败并验证恢复是否正确执行。</p>\n<p><strong>安全测试（Security testing）：</strong>安全测试验证建立在系统内的保护机制是否能够实际保护系统不受非法入侵。</p>\n<p><strong>压力测试（Stress testing）：</strong>压力测试的目的是是软件面对非正常的情形。是一种要求以非正常数量、频率或容量的方式进行彻底评估。</p>\n<p><strong>性能测试（Performance testing）：</strong>性能测试用来测试软件在集成环境中的运行性能。</p>\n<p><strong>部署测试（Deployment testing）：</strong>部有时也将署测试称为配置测试，是在软件将要在其中运行的每一种环境中测试软件。</p>\n<h2 id=\"测试技术\"><a href=\"#测试技术\" class=\"headerlink\" title=\"测试技术\"></a><strong>测试技术</strong></h2><h3 id=\"白盒测试：\"><a href=\"#白盒测试：\" class=\"headerlink\" title=\"白盒测试：\"></a><strong>白盒测试：</strong></h3><p>白盒测试有时也称为玻璃盒测试，是一种测试用例设计方法，它利用作为构件层设计的一部分描述的控制结构来生成测试用例。</p>\n<p>白盒测试是在了解模块内部结构的情况下进行的测试。</p>\n<p>利用白盒测试方法导出的测试用例可以：</p>\n<p>（1）保证一个模块中的所有独立路径至少被执行一次。</p>\n<p>（2）对所有的逻辑判定均需要测试取真和取假两个方面。</p>\n<p>（3）在上下边界及可操作的范围内执行所有的循环。</p>\n<p>（4）检验内部数据结构以确保其有效性。</p>\n<h4 id=\"基本路径测试（Basic-path-testing）\"><a href=\"#基本路径测试（Basic-path-testing）\" class=\"headerlink\" title=\"基本路径测试（Basic path testing）\"></a><strong>基本路径测试（Basic path testing）</strong></h4><p>基本路径测试时由 TOM 首先提出的一种白盒测试技术。</p>\n<p>流图（程序图）是一种简单的控制流表示方法。流程图用于描述程序的控制结构，流程图映射为相应的流图。</p>\n<ul>\n<li><p><strong>圆称为流图结点（flow graph node）</strong>，表示一个或多个过程语句。</p>\n</li>\n<li><p>处理框序列和一个菱形判定框可以映射为单个节点。</p>\n</li>\n<li><p>流图中的箭头称为边或者连接，标识控制刘，类似于流程图中的箭头。</p>\n</li>\n<li><p>由边和结点限定的区域称为域。当计算域时，将图的外部作为一个域。</p>\n</li>\n<li><p>包含条件的结点称为判定结点，其特征是由它发射出两条或多条边。</p>\n</li>\n</ul>\n<p><img src=\"image-20221214160934681.png\" alt=\"image-20221214160934681\"></p>\n<p><img src=\"image-20221214160939104.png\" alt=\"image-20221214160939104\"></p>\n<p><strong>独立路径：</strong>是指任何贯穿程序的、至少引入一组新语句或一个新条件的路径。</p>\n<p>如果设计测试用例强迫执行这些路径（基本集合），就可以保证程序中的每条语句至少执行一次，同时，每个条件判断的真和假都被执行。</p>\n<p><img src=\"image-20221214161006496.png\" alt=\"image-20221214161006496\"></p>\n<p><strong>环复杂度（Cyclomatic Complexity ）</strong>计算方法：</p>\n<p><img src=\"image-20221214161011172.png\" alt=\"image-20221214161011172\"></p>\n<p>V（G）的值提供了组成基本集合的独立路径的上街，并由此得出覆盖所有程序语句所需设计和运行的测试数量的上界。</p>\n<h3 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a><strong>黑盒测试</strong></h3><p>黑盒测试也称为行为测试，侧重软件的功能需求。</p>\n<p>黑盒测试使软件工程师能设计出将测试程序所有功能需求的输入条件集。</p>\n<p>黑盒测试不是白盒测试的替代品，而是作为发现其他类型错误的辅助方法。</p>\n<p>黑盒测试试图发现以下类型的错误：</p>\n<p>（1）不正确或遗漏的功能</p>\n<p>（2）接口错误</p>\n<p>（3）数据用在测试的后期阶段</p>\n<p>（4）行为或性能错误</p>\n<p>（5）初始化和终止错误</p>\n<p>黑盒测试的方法：</p>\n<p>Graph-based testing methods 基于图的测试方法</p>\n<p>Equivalence partitioning 等价类划分</p>\n<p>Boundary value analysis 边界值分析</p>\n<p>Orthogonal array testing 正交数组测试</p>\n<p>黑盒测试的例子：</p>\n<p><img src=\"image-20221214161151723.png\" alt=\"image-20221214161151723\"></p>\n<p><img src=\"image-20221214161155755.png\" alt=\"image-20221214161155755\"></p>\n<p><img src=\"image-20221214161201230.png\" alt=\"image-20221214161201230\"></p>\n<h1 id=\"期末\"><a href=\"#期末\" class=\"headerlink\" title=\"期末\"></a>期末</h1><ul>\n<li><p>闭卷英文，有部分注解（熟悉状态图、体系结构、部署图、时序图等名称）</p>\n</li>\n<li><p>题型：开放，灵活，无名词解释</p>\n<ul>\n<li><p>单选20 * 1</p>\n</li>\n<li><p>判断分析 2 * 5</p>\n</li>\n<li><p>看图分析L:irerative, scrum, XP, stgly等。解释图中原因</p>\n</li>\n<li><p>问答 5 * 6：题型丰富，灵活应用。</p>\n<ul>\n<li>例如:public string, 违反封装（信息隐藏）概念</li>\n</ul>\n</li>\n<li><p>30分：2 * 10 ， 2 * 5，10分开放题，20分画图+答题（活动图、程序流程、类图，UI界面（黄金原则），计算独立路径等）</p>\n<ul>\n<li><p>等价划分</p>\n<p>  <img src=\"image-20221228152205055.png\" alt=\"image-20221228152205055\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h2><p><img src=\"image-20221228152746207.png\" alt=\"image-20221228152746207\"></p>\n<p><img src=\"image-20221228153224604.png\" alt=\"image-20221228153224604\"></p>\n<p><img src=\"image-20221228153416006.png\" alt=\"image-20221228153416006\"></p>\n<p><img src=\"image-20221228153458124.png\" alt=\"image-20221228153458124\"></p>\n<p><img src=\"image-20221228153727751.png\" alt=\"image-20221228153727751\"></p>\n<p><img src=\"image-20221228153813086.png\" alt=\"image-20221228153813086\"></p>\n<p><img src=\"image-20221214162408194.png\" alt=\"image-20221214162408194\"></p>\n<p><img src=\"image-20221214162414853.png\" alt=\"image-20221214162414853\"></p>\n<p><img src=\"image-20221214162419950.png\" alt=\"image-20221214162419950\"></p>\n<p><img src=\"image-20221214162433369.png\" alt=\"image-20221214162433369\"></p>\n<p><img src=\"image-20221214162439934.png\" alt=\"image-20221214162439934\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<p><strong>Software：</strong></p>\n<p>（1）指令的集合，通过执行这些指令可以满足预期的特征、功能和性能需求；</p>\n<p>（2）数据结构，使得程序可以合理利用信息</p>\n<p>（3）软件描述信息，它以硬拷贝和虚拟形式存在，用来描述程序操作和使用</p>\n<table>\n<thead>\n<tr>\n<th><strong>出错名称</strong></th>\n<th><strong>系统输出信息</strong></th>\n<th><strong>处理方法</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名输入错误</td>\n<td>用户名或密码错误</td>\n<td>返回登录界面</td>\n</tr>\n<tr>\n<td>密码输入错误</td>\n<td>用户名或密码错误</td>\n<td>返回登录界面</td>\n</tr>\n<tr>\n<td>输入格式错误</td>\n<td>输入格式错误，请重新输入</td>\n<td>返回输入界面</td>\n</tr>\n<tr>\n<td>数据库连接失败</td>\n<td>数据库连接失败，请检查连接</td>\n<td>返回操作前的页面</td>\n</tr>\n<tr>\n<td>TCP连接错误</td>\n<td>连接超时，请检查连接</td>\n<td>返回操作前的页面</td>\n</tr>\n<tr>\n<td>不允许为空的输入框输入空字符</td>\n<td>输入为空，请输入</td>\n<td>弹回原输入页面输入处</td>\n</tr>\n<tr>\n<td>系统故障</td>\n<td>服务器出现故障，请联系管理员</td>\n<td>立刻启用备用机</td>\n</tr>\n</tbody></table>\n<h1 id=\"Software-Engineering：\"><a href=\"#Software-Engineering：\" class=\"headerlink\" title=\"Software Engineering：\"></a><strong>Software Engineering：</strong></h1><p>软件工程是：</p>\n<p>（1）将系统化的、规范化、可量化的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。</p>\n<p>（2）在（1）中所述方法的研究</p>\n<h2 id=\"What-the-difference-between-software-and-hardware\"><a href=\"#What-the-difference-between-software-and-hardware\" class=\"headerlink\" title=\"What the difference between software and hardware?\"></a><strong>What the difference between software and hardware?</strong></h2><p>1.软件是设计开发的，而不是传统意义上生产制造的。</p>\n<p>2.软件不会“磨损”</p>\n<p>3.大多数软件根据实际的顾客需求定制的。</p>\n<h2 id=\"Why-does-software-need-Change-or-Evolved\"><a href=\"#Why-does-software-need-Change-or-Evolved\" class=\"headerlink\" title=\"Why does software need Change or Evolved?\"></a><strong>Why does software need Change or Evolved?</strong></h2><p> <strong>遗留软件（legacy software）：</strong></p>\n<blockquote>\n<p>遗留软件系统……在几十年前开发，它们不断被修改以满足商业需要和计算平台的变化。这类系统的繁衍使得大型机构十分头痛，因为它们的维护代价高昂且系统演化风险较高。</p>\n</blockquote>\n<p><strong>发生原因：</strong></p>\n<ul>\n<li>软件需要进行<strong>适应性调整（adapt）</strong>，从而可以满足新的计算环境或者技术的需求。</li>\n<li>软件必须<strong>升级（update）</strong>以实现新的商业需求。</li>\n<li>软件必须<strong>扩展（extend）</strong>使之具有与更多新的系统和数据库的互操作能力。</li>\n<li>软件架构必须进行<strong>改建（re-architect）</strong>使之能适应多样化的网络环境。</li>\n</ul>\n<h2 id=\"层次化技术\"><a href=\"#层次化技术\" class=\"headerlink\" title=\"层次化技术\"></a>层次化技术</h2><p><img src=\"image-20221012135918954.png\" alt=\"image-20221012135918954\"></p>\n<p>支持软件工程的根基在于<strong>质量关注点（quality focus）</strong>：是对软件的组织承诺，是支持软件工程的基石</p>\n<p>软件工程的基础是<strong>过程（process）层</strong>。软件过程将各个技术层次结合在一起，使得合理、及时地开发计算机软件成为可能。</p>\n<p>软件工程<strong>方法（method）</strong>为构建软件提供技术上的解决方法。方法包括：沟通、需求分析、设计模型、编程、测试和技术支持。</p>\n<h1 id=\"Software-Process-：\"><a href=\"#Software-Process-：\" class=\"headerlink\" title=\"Software Process ：\"></a><strong>Software Process ：</strong></h1><p><strong>软件过程：</strong>软件过程是工作产品构建时所执行的一系列活动、动作和任务的集合。层次关系：</p>\n<ul>\n<li>软件过程<ul>\n<li>过程框架<ul>\n<li>普适性活动<ul>\n<li>框架活动<ul>\n<li>软件工程动作<ul>\n<li>任务集<ul>\n<li>质量保证点、项目里程碑等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Generic-Framework-Activity-通用框架活动\"><a href=\"#Generic-Framework-Activity-通用框架活动\" class=\"headerlink\" title=\"Generic Framework Activity(通用框架活动)\"></a><strong>Generic Framework Activity(通用框架活动)</strong></h2><p>适用于所有软件项目，无论其规模和复杂程度如何：</p>\n<p><strong>1. 沟通（Communication）：</strong>目的是理解利益相关者的项目目标，并收集需求以定义软件特性和功能。</p>\n<p><strong>2. 策划（Planning）：</strong>定义和描述了软件工程工作，包括需要执行的技术任务、可能的风险、资源需求、工作产品和工作进度计划。</p>\n<p><strong>3. 建模（Modeling）：</strong>利用模型哎更好地理解软件需求并完成符合这些需求的软件设计。</p>\n<p><strong>4. 构建（Construction）：</strong>它包括编码和测试以发现编码中的错误。</p>\n<p><strong>5. 部署（Deployment）：</strong>软件交付到用户，用户对其进行评测并给出反馈意见。</p>\n<p>在项目的多次迭代过程中，沟通、策划、建模、构建、部署等活动不断重复。每次&#x3D;&#x3D;项目迭代&#x3D;&#x3D;都会产生一个软**件增量( software increment)**，每个软件增量实现了部分的软件特性和功能。随着每一次增量的产生，软件逐渐完善。</p>\n<h2 id=\"Umbrella-Activities（普适性活动）：\"><a href=\"#Umbrella-Activities（普适性活动）：\" class=\"headerlink\" title=\"Umbrella Activities（普适性活动）：\"></a><strong>Umbrella Activities（普适性活动）：</strong></h2><p><strong>普适性活动贯穿软件项目始终。</strong></p>\n<p><strong>1.软件项目跟踪和控制：</strong>项目根据计划评估项目进度，并且采取必要的措施保证项目按进度计划进行。</p>\n<p><strong>2.风险管理：</strong>对可能影响项目成果或者产品质量的风险进行评估。</p>\n<p><strong>3.软件质量保证：</strong>确定和执行软件质量保证的活动</p>\n<p><strong>4.技术评估：</strong>评估软件工程产品、尽量在错误传播到下一个活动之前，发现并清除错误。</p>\n<p><strong>5.测量：</strong>定义和收集过程、项目和产品的度量，以帮助团队在发布软件的时候满足利益相关者要求。同时，测量还可以与其他框架活动和普适性活动配合使用。</p>\n<p><strong>6.软件配置管理：</strong>在整个软件工程中，管理变更所带来的影响。</p>\n<p><strong>7.可复用管理：</strong>定义产品复用的标准，并且建立构建复用机制。</p>\n<p><strong>8.工作产品的准备和生产：</strong>包括了生产产品所必需的活动。</p>\n<h2 id=\"Process-Flow\"><a href=\"#Process-Flow\" class=\"headerlink\" title=\"Process Flow\"></a><strong>Process Flow</strong></h2><p><strong>过程流：</strong>描述了在执行顺序和执时间上，如何组织框架中的活动，动作，任务。</p>\n<ul>\n<li><p><strong>线性过程流（Liner process flow）：</strong>从沟通到部署顺序执行五个框架活动。</p>\n</li>\n<li><p><strong>迭代过程流（iterative process flow）：</strong>在执行下一个活动前重复执行之前一个或多个活动。</p>\n<p><img src=\"image-20221012140248086.png\" alt=\"image-20221012140248086\"></p>\n</li>\n<li><p><strong>演化过程流（evolution process flow）：</strong>采取循环的方式执行各个活动。<img src=\"image-20221012140310071.png\" alt=\"image-20221012140310071\"></p>\n</li>\n<li><p><strong>并行过程流（parallel process flow）：</strong>将一个或是多个活动与其他活动并行执行。<img src=\"image-20221012140314730.png\" alt=\"image-20221012140314730\"></p>\n</li>\n</ul>\n<h2 id=\"过程模式（process-pattern）\"><a href=\"#过程模式（process-pattern）\" class=\"headerlink\" title=\"过程模式（process pattern）\"></a><strong>过程模式（process pattern）</strong></h2><p>描述了软件工程工作中遇到的过程相关的问题、明确了问题环境并给出了针对该问题的一种或几种可证明的解决方式。</p>\n<h2 id=\"Process-Model\"><a href=\"#Process-Model\" class=\"headerlink\" title=\"Process Model\"></a><strong>Process Model</strong></h2><p>惯用过程模型是为了改变软件开发的混乱状态，促使软件开发更加有序。</p>\n<h3 id=\"瀑布模型（waterfall-model）\"><a href=\"#瀑布模型（waterfall-model）\" class=\"headerlink\" title=\"瀑布模型（waterfall model）\"></a><strong>瀑布模型（waterfall model）</strong></h3><p><strong>又被称为经典生命周期（classic life cycle），它提出了一个系统的、顺序的软件开发方法。</strong></p>\n<p><strong>优点：</strong></p>\n<p>有利于大型软件开发过程中人员的组织、管理，从而提高了大型软件项目开发的质量和效</p>\n<p>率。</p>\n<p>当需求确定、工作采用线性的方式完成的时候瀑布模型是一个很有用的过程模型。</p>\n<p>一个有用的过程模型，其中需求是固定的，工作将以线性方式完成。</p>\n<p><strong>缺点:</strong></p>\n<p>过于理想，缺乏灵活性，容易产生需求偏差。</p>\n<p>实际的项目很少遵守瀑布模型提出的顺序。</p>\n<p>客户通常很难清除的描述所有的需求。</p>\n<p>客户必须要有耐心，因为只有在项目接近尾声的时候，他们才能的带执行的程序。</p>\n<p><strong>适用范围：</strong>需求确定，工作能够采用线性的方式完成的软件。</p>\n<p><img src=\"image-20221012140409612.png\" alt=\"image-20221012140409612\"></p>\n<h3 id=\"V-模型（V-model）：\"><a href=\"#V-模型（V-model）：\" class=\"headerlink\" title=\"V 模型（V-model）：\"></a><strong>V 模型（V-model）：</strong></h3><p>描述了质量保证动作同沟通、建模相关动作以及早期构建相关的动作之间的关系。</p>\n<p>V 模型强调软件开发的协作和速度，将软件实现和验证有机地结合起来，在保证较高的软</p>\n<p>件质量情况下缩短开发周期。</p>\n<p><strong>优点：</strong>适合工程量小、人力资源少并且开发过程中改动不大的项目</p>\n<p><strong>缺点：</strong>错误发现时间迟，产生的风险代价高</p>\n<p><img src=\"image-20221012140424181.png\" alt=\"image-20221012140424181\"></p>\n<h3 id=\"增量过程模型（Incremental-Model）\"><a href=\"#增量过程模型（Incremental-Model）\" class=\"headerlink\" title=\"增量过程模型（Incremental Model）\"></a><strong>增量过程模型（Incremental Model）</strong></h3><p>增量过程模型侧重于每一个增量都提交一个可以运行的产品。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>能在较短的时间内向用户提交可完成部分工作的产品。</p>\n</li>\n<li><p>逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。</p>\n</li>\n<li><p>规避技术风险</p>\n</li>\n<li><p>可并行开发构件，加快开发的进度</p>\n</li>\n<li><p>对于在业务截止日期之前完全实施的人员配置非常有用。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<p>（1）并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构；</p>\n<p>（2）增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模</p>\n<p>型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。</p>\n<p><strong>适用范围：</strong></p>\n<p>（1）进行已有产品升级或新版本开发，增量模型是非常适合的；</p>\n<p>（2）对完成期限严格要求的产品，可以使用增量模型；</p>\n<p>（3）对所开发的领域比较熟悉而且已有原型系统，增量模型也是非常适合的。（4） 项目在既定的商业要求期限之前不可能找到足够的开发人员</p>\n<p><img src=\"image-20221012140439333.png\" alt=\"image-20221012140439333\"></p>\n<h3 id=\"演化过程模型（Evolutionary-Model）\"><a href=\"#演化过程模型（Evolutionary-Model）\" class=\"headerlink\" title=\"演化过程模型（Evolutionary Model）\"></a><strong>演化过程模型（Evolutionary Model）</strong></h3><p>演化模型是迭代的过程模型。</p>\n<p><strong>原型开发（prototyping ）</strong>：当需求很模糊的时候，原型开发可以帮助软件开发人员和利益相关者更好地理解究竟需要做什么。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>开发者与用户充分交流，可以澄清模糊需求，需求定义比其他 模型好得多</p>\n</li>\n<li><p>开发过程与用户培训过程同步</p>\n</li>\n<li><p>为用户需求的改变提供了充分的余地</p>\n</li>\n<li><p>开发风险低，产品柔性好</p>\n</li>\n<li><p>开发费用低，时间短</p>\n</li>\n<li><p>系统易维护，对用户更友好</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>没有考虑软件的整体质量和长期的可维护性。</p>\n</li>\n<li><p>大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为它的方便，还有不合适的操作系统被选择等等。</p>\n</li>\n<li><p>由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计。</p>\n</li>\n</ol>\n<p><strong>适用范围：</strong></p>\n<p>尽管原型可以用作独立的流程模型，但它更常用作一种可以在任何流模型的上下文中实现的技术。</p>\n<p><img src=\"image-20221012140506865.png\" alt=\"image-20221012140506865\"></p>\n<h3 id=\"螺旋模型（Spiral-Model）\"><a href=\"#螺旋模型（Spiral-Model）\" class=\"headerlink\" title=\"螺旋模型（Spiral Model）\"></a><strong>螺旋模型（Spiral Model）</strong></h3><p>螺旋模型是一种风险驱动型的过程模型生成器，对于软件集中的系统，它可以指导多个利益相关者的协同工作。</p>\n<p><strong>优点：</strong></p>\n<p>它结合了原型的迭代性质和瀑布模型的系统性和可控性特点。</p>\n<ol>\n<li><p>强调风险</p>\n</li>\n<li><p>强调阶段质量</p>\n</li>\n<li><p>提供纠错的机会</p>\n</li>\n<li><p>使用原型作为风险降低机制，进一步使开发人员能够在产品演变的任何阶段应用原型方法。</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>每个阶段都要提出被选方案，进行风险分析，研发周期长，效率低</p>\n</li>\n<li><p>必须要转业的风险分析人员的参与</p>\n</li>\n<li><p>如果没有发现和管理重大风险，问题无疑将会发生。</p>\n</li>\n</ol>\n<p><strong>适用范围：</strong>大型项目</p>\n<p><img src=\"image-20221012140533502.png\" alt=\"image-20221012140533502\"></p>\n<h3 id=\"协同模型（concurrent-development-model）\"><a href=\"#协同模型（concurrent-development-model）\" class=\"headerlink\" title=\"协同模型（concurrent development model）\"></a><strong>协同模型（concurrent development model）</strong></h3><p>有时候又称为协同工程，它允许软件团队表述本章所描述的任何模型中的迭代和并发元素。</p>\n<p>协同建模提供了项目当前状态的准确画面。</p>\n<p><strong>适用范围</strong>：所有类型的软件开发，协同模型通常更适合涉及不同工程团队的产品工程项目。</p>\n<p><img src=\"image-20221012140549113.png\" alt=\"image-20221012140549113\"></p>\n<h3 id=\"统一过程模型（Unified-Process）\"><a href=\"#统一过程模型（Unified-Process）\" class=\"headerlink\" title=\"统一过程模型（Unified Process）\"></a><strong>统一过程模型（Unified Process）</strong></h3><p>统一过程模型是一种“用例驱动、以体系结构为核心、迭代及增量”的软件 过程框架，由UML 方法和工具支持。它是一种增量模型，定义了五个阶段：</p>\n<p>a、起始阶段，包括用户沟通和计划活动，强调定义和细化用例</p>\n<p>b、 细化阶段，包括用户沟通和建模活动，重点是创建分析和设计模型。</p>\n<p>c、构件阶段，细化模型设计，并将设计模型转化为软件构件实现</p>\n<p>d、 转化阶段，将软件从开发人员传递给最终用户，并由用户完成 beta 测试和验收测试</p>\n<p>e、生产阶段，持续地监控软件的运行，并提供技术支持。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><p>任何功能开发后就进入测试过程，及早进行验证</p>\n</li>\n<li><p>早期风险识别，采取预防措施</p>\n</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>需求必须在开始之前完全弄清楚，否怎有可能在架构上出现错误</p>\n</li>\n<li><p>必须有严格的过程管理，以免使过程退化为原始的试→错→改模式</p>\n</li>\n<li><p>如果不加控制的让用户过早接触没有测试完全，版本不稳定的产品可能对用 户和开发团队都带来负面的影响。</p>\n<p><img src=\"image-20221012140630219.png\" alt=\"image-20221012140630219\"></p>\n</li>\n</ol>\n<h1 id=\"Agile-Development\"><a href=\"#Agile-Development\" class=\"headerlink\" title=\"Agile Development\"></a><strong>Agile Development</strong></h1><h2 id=\"敏捷与敏捷过程\"><a href=\"#敏捷与敏捷过程\" class=\"headerlink\" title=\"敏捷与敏捷过程\"></a>敏捷与敏捷过程</h2><p>不管怎么定义敏捷，一定离不开<strong>「短周期地频繁交付」</strong></p>\n<p><strong>敏捷宣言（Agile development manifesto）：</strong></p>\n<ul>\n<li><p>个人和这些个人之间的交流胜过了开发过程和工具</p>\n</li>\n<li><p>可运行的软件胜过了宽泛的文档</p>\n</li>\n<li><p>客户合作胜过了合同谈判</p>\n</li>\n<li><p>对变更的良好响应胜过了按部就班地遵循计划</p>\n</li>\n</ul>\n<h2 id=\"极限编程（Extreme-Programming-XP-）\"><a href=\"#极限编程（Extreme-Programming-XP-）\" class=\"headerlink\" title=\"极限编程（Extreme Programming (XP)）\"></a><strong>极限编程（Extreme Programming (XP)）</strong></h2><blockquote>\n<p><strong>极限编程中的「极限(Extreme)」是指将我们认同的有效软件开发原理和实践应用到极限，频繁地去实践，</strong></p>\n<p>极限编程核心是测试驱动开发、持续集成、用户故事等具体落地的实践</p>\n</blockquote>\n<p>极限编程是敏捷软件开发使用最广泛的一个方法。</p>\n<p><strong>极限编程过程:</strong></p>\n<p><strong>1.策划：</strong></p>\n<ol>\n<li><p>开始创造“用户故事”</p>\n</li>\n<li><p>敏捷团队评估每个故事并分配一个成本（开发周数）</p>\n</li>\n<li><p>故事被分组到一个可交付增量</p>\n</li>\n<li><p>承诺在交付日期进行</p>\n</li>\n<li><p>在第一次递增之后，“项目速度”用于帮助估计后续发行版本的发布日期和进度安排，确定是否对整个开发项目中的所有故事有过分承诺。</p>\n</li>\n</ol>\n<p><strong>2.设计</strong></p>\n<ol>\n<li><p>遵循 KIS（保持简洁）原则</p>\n</li>\n<li><p>鼓励使用 CRC（类-责任-协作者）卡（见第 8 章）</p>\n</li>\n<li><p>对于困难的设计问题，建议创建“尖峰解决方案”——一个设计原型</p>\n</li>\n<li><p>鼓励“重构”： 重构是以不改变代码外部行为而改进其内部结构的方式来修改软件系统的过程。</p>\n</li>\n</ol>\n<p><strong>3.编码</strong></p>\n<ol>\n<li><p>在编码开始之前，建议对故事进行单元测试</p>\n</li>\n<li><p>鼓励“结队编程”</p>\n</li>\n</ol>\n<p><strong>4.测试</strong></p>\n<ol>\n<li><p>所有的单元测试每天都执行</p>\n</li>\n<li><p>“验收测试”，由客户规定技术条件，并且着眼于客户可见的、可评审的系统级的特征和功能。</p>\n</li>\n</ol>\n<p><img src=\"image-20221012140748468.png\" alt=\"image-20221012140748468\"></p>\n<h2 id=\"工业极限编程（Industrial-XP-（IPX））\"><a href=\"#工业极限编程（Industrial-XP-（IPX））\" class=\"headerlink\" title=\"工业极限编程（Industrial XP （IPX））\"></a><strong>工业极限编程（Industrial XP （IPX））</strong></h2><p>IXP 是 XP 的一种有机进化。它由 XP 的最低限要求、以客户为中心、测试驱动精神组成。</p>\n<p>IXP 和 XP 的主要差别在于其管理具有更大的包容性，它扩大了用户角色，升级了技术实践。</p>\n<p>IXP 合并了<strong>六个新实践</strong>：</p>\n<p>Readiness assessment(项目准备)</p>\n<p>Project community(项目社区)</p>\n<p>Project chartering（项目承租）</p>\n<p>Test-driven management （测试驱动管理）</p>\n<p>Retrospectives.（回顾）</p>\n<p>Continuous learning （持续学习）</p>\n<h2 id=\"Scrum\"><a href=\"#Scrum\" class=\"headerlink\" title=\"Scrum\"></a>Scrum</h2><h2 id=\"Kanban\"><a href=\"#Kanban\" class=\"headerlink\" title=\"Kanban\"></a>Kanban</h2><h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><h1 id=\"Recommended-Process-Model\"><a href=\"#Recommended-Process-Model\" class=\"headerlink\" title=\"Recommended Process Model\"></a>Recommended Process Model</h1><h1 id=\"Human-Aspects-of-Software-Engineering\"><a href=\"#Human-Aspects-of-Software-Engineering\" class=\"headerlink\" title=\"Human Aspects of Software Engineering\"></a><strong>Human Aspects of Software</strong> Engineering</h1><h1 id=\"指导实践的原则\"><a href=\"#指导实践的原则\" class=\"headerlink\" title=\"指导实践的原则\"></a>指导实践的原则</h1><h1 id=\"Understanding-Requirements\"><a href=\"#Understanding-Requirements\" class=\"headerlink\" title=\"Understanding Requirements\"></a><strong>Understanding Requirements</strong></h1><h2 id=\"需求工程（Requirement-engineering）\"><a href=\"#需求工程（Requirement-engineering）\" class=\"headerlink\" title=\"需求工程（Requirement engineering）\"></a><strong>需求工程（Requirement engineering）</strong></h2><p><strong>七个任务</strong></p>\n<p><strong>1.起始（Inception）：</strong>在项目起始阶段，要建立基本的理解，包括对问题、谁需要解决方案、所期望解决方案的性质、与项目利益相关者和开发人员之间达成初步交流合作的效果。</p>\n<p><strong>2.导出（Elicitation –gathering requirements）：</strong>询问客户、用户和其他人，系统或产品的目标是什么，想要实现什么，系统和产品如何满足业务的要求，最终系统或产品如何利用于日常工作。</p>\n<p><strong>3.精化（Elaboration-requirement modeling）：</strong>在起始和导出阶段获得的信息将在精化阶段进行扩展和提炼该任务集中于开发一个精确的需求模型。</p>\n<p><strong>4.协商（Negotiation-win-win）：</strong>使用迭代的方法给需求排序，评估每项需求对项目产生的成本和风险，表述内部冲突，删除、组合和修改需求，以便参与各方均能达到一定的满意度，实现双赢。</p>\n<p><strong>5.规格说明（Specification-document，Model，prototype）：</strong>一个规格说明可以是一份写好的文档、一套图形化的模型、一个形式化的数学模型、一组使用场景、一个原型或上述各项的任意组合。</p>\n<p><strong>6.确认（Validation-Quality assess）：</strong>在确认这一步对需求工程的工作产品进行质量评估。</p>\n<p><strong>7.需求管理（Management-Change）：</strong>基于计算机的系统其需求会变更，并且变更的要求贯穿于系统的整个生存期。需求管理是用于帮助项目组在项目进展中标识、控制和跟踪需求以及需求变更的一组活动。</p>\n<h2 id=\"需求建模的元素\"><a href=\"#需求建模的元素\" class=\"headerlink\" title=\"需求建模的元素\"></a><strong>需求建模的元素</strong></h2><p><img src=\"image-20221012140837195.png\" alt=\"image-20221012140837195\"></p>\n<p><img src=\"image-20221012140842657.png\" alt=\"image-20221012140842657\"></p>\n<h1 id=\"需求建模—推荐的方法\"><a href=\"#需求建模—推荐的方法\" class=\"headerlink\" title=\"需求建模—推荐的方法\"></a>需求建模—推荐的方法</h1><h2 id=\"基于场景-Scenario-Based-建模（功能）\"><a href=\"#基于场景-Scenario-Based-建模（功能）\" class=\"headerlink\" title=\"基于场景(Scenario-Based)建模（功能）\"></a>基于场景(Scenario-Based)建模（功能）</h2><p>使用基于场景的方法可以从用户的视角描述系统。</p>\n<p>开发<strong>用例图</strong>时，应列出特定参与者执行的功能或活动。</p>\n<p>例：</p>\n<p><img src=\"image-20221012140858481.png\" alt=\"image-20221012140858481\"></p>\n<p><img src=\"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png\" alt=\"img\"></p>\n<h3 id=\"用例模板：\"><a href=\"#用例模板：\" class=\"headerlink\" title=\"用例模板：\"></a>用例模板：</h3><table>\n<thead>\n<tr>\n<th align=\"center\"><strong>用例</strong></th>\n<th align=\"left\">在ATM上取款</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>参与者</strong></td>\n<td align=\"left\">取款人</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>目标</strong></td>\n<td align=\"left\">从ATM中取到钱</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>前提条件</strong></td>\n<td align=\"left\">ATM机正常工作，取款人持银行卡取款。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>触发条件</strong></td>\n<td align=\"left\">取款人将卡插入卡槽</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>基本事件流</strong></td>\n<td align=\"left\">1.     触发条件：取款人将卡插入卡槽。<br>  2.     取款人将卡插入卡槽。<br>  3.     取款人输入密码。 <br> 4.     取款人选择“取款”。  <br>5.     取款人取钱。  <br>6.     取款人选择“退出”。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>异常事件流</strong></td>\n<td align=\"left\">1. 卡无效或自动柜员机没有所需现金。<br>  2. 密码不正确:重新输入正确的密码。<br>  3. 选择提款时ATM机里的现金不足，提款人取不到钱。 <br> 4. 选择退出时ATM出现问题，卡被吞</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>后置条件</strong></td>\n<td align=\"left\">ATM机恢复待机状态，后台数据库更新用户余额，短信提醒取钱成功与剩余余额</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>优先级</strong></td>\n<td align=\"left\">必须执行</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>可用时</strong></td>\n<td align=\"left\">第一个增量</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>使用频率</strong></td>\n<td align=\"left\">每天多次</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>参与者渠道</strong></td>\n<td align=\"left\">通过操作面板。</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>次要参与者</strong></td>\n<td align=\"left\">记录数据库</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>次要参与者的渠道</strong></td>\n<td align=\"left\">记录数据库、互联网</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>开放问题</strong></td>\n<td align=\"left\">要有防止用户卡被机器吞食的保护机制。<br>定义一个固定的时间长度，取款可以停留在操作界面上而不进行任何操作</td>\n</tr>\n</tbody></table>\n<h2 id=\"基于类的建模\"><a href=\"#基于类的建模\" class=\"headerlink\" title=\"基于类的建模\"></a><strong>基于类的建模</strong></h2><p>基于类建模表示了系统操作的对象、应用于对象间能有效控制的操作、这些对象间的关系以及已定义类之间的协作。</p>\n<p>基于类的分析模型包括类和对象、属性、操作、类的职责协作者（CRC）模型、协作图和包。</p>\n<h3 id=\"识别分析类\"><a href=\"#识别分析类\" class=\"headerlink\" title=\"识别分析类\"></a><strong>识别分析类</strong></h3><p>7种可能的类：</p>\n<p><strong>外部实体</strong>（其他系统、设备、人员），产生或实验基于计算机系统的信息。</p>\n<p><strong>事物</strong>（报告、显示、字母、信号），问题信息域的一部分。</p>\n<p><strong>偶发事件或事件</strong>（所有权转移或完成机器人的一组移动动作），在系统操作环境内发生。</p>\n<p><strong>角色</strong>（经理，工程师，销售人员），由和系统交互的人员扮演</p>\n<p><strong>组织单元</strong>（部门，组，团队），和某个应用系统相关</p>\n<p><strong>场地</strong>（制作车间或码头），建立问题的环境和系统的整体功能</p>\n<p><strong>结构</strong>（传感器、交通工具、计算机），定义了对象的类或与对象相关的类。</p>\n<h3 id=\"类-职责-协作者建模（Class-responsibility-collaborator-CRC）\"><a href=\"#类-职责-协作者建模（Class-responsibility-collaborator-CRC）\" class=\"headerlink\" title=\"类-职责-协作者建模（Class-responsibility-collaborator CRC）\"></a><strong>类-职责-协作者建模（<em>Class-responsibility-collaborator</em> CRC）</strong></h3><p>CRC 模型实际上是表示类的标准索引卡片的集合。每个类一个卡片</p>\n<p><strong>三部分：</strong>顶部写类名，左侧列出类的职责，右侧部分列出了类的协作者。</p>\n<img src=\"image-20221019150622381.png\" alt=\"image-20221019150622381\" style=\"zoom:50%;\">\n\n<p><strong>类：</strong></p>\n<p>Entity classes <strong>实体类</strong>：一般代表保存在数据库中和贯穿应用程序的事物。</p>\n<p>Boundary classes <strong>边界类</strong>：创建用户可见的和在使用软件时交互的接口</p>\n<p>Controller classes <strong>控制类</strong>：管理“控制单元”</p>\n<p><strong>职责：</strong></p>\n<p>职责的基本原则：</p>\n<p><strong>属性</strong>：描述了已经选择包含在需求模型中的类</p>\n<p><strong>操作</strong>：定义了某个对象的行为。</p>\n<p>5 个指导原则：</p>\n<p>1.智能系统应分布所有类中以求地满足问题的需求。</p>\n<p>2.每个职责的说明应尽可能具有普遍性。</p>\n<p>3.信息和与之相关的信息应局限于一个类中而不要分布在多个类中。</p>\n<p>4.信息和与之相关的行为应该放在同一类中。</p>\n<p>5.适合时，职责应由相关类共享。</p>\n<h3 id=\"UML-图示例\"><a href=\"#UML-图示例\" class=\"headerlink\" title=\"UML 图示例\"></a>UML 图示例</h3><p><strong>UML类图</strong>：</p>\n<p>类的关系：</p>\n<ul>\n<li>关联：实例有关系，一对多，一对一等关系</li>\n<li>泛化：is kind of,<strong>继承</strong>，空心三角</li>\n<li>聚合：is part of，空心菱形</li>\n</ul>\n<p><img src=\"image-20221214151330971.png\" alt=\"image-20221214151330971\"></p>\n<p>UML<strong>活动图</strong>在特定场景通过提供迭代流的图形表示来补充用例。例：</p>\n<ul>\n<li>并行使用同步条</li>\n<li>可以用来替代程序流程图，反过来不行</li>\n</ul>\n<img src=\"image-20221019161158995.png\" alt=\"image-20221019161158995\" style=\"zoom: 80%;\">\n\n<p><strong>UML时序图：</strong>作为时间的函数，表示事件如何从一个对象流向另一个对象。</p>\n<img src=\"image-20221019155252489.png\" alt=\"image-20221019155252489\" style=\"zoom:80%;\">\n\n<p>UML<strong>泳道图</strong>是<strong>活动图的一种有用变化</strong>，可以让建模人员表示用例所描述的活动流，同时指示哪个参与者或分析类是由活动矩形所描述的活动来负责。</p>\n<img src=\"image-20221019160521548.png\" alt=\"image-20221019160521548\" style=\"zoom:80%;\">\n\n<h2 id=\"基于行为模型\"><a href=\"#基于行为模型\" class=\"headerlink\" title=\"基于行为模型\"></a><strong>基于行为模型</strong></h2><p>生成行为模型的步骤：</p>\n<p>1.评估所有的用例，以保证完全理解系统内的交互顺序</p>\n<p>2.识别驱动交互顺序的事件，并理解这些事件如何与特定的对象相互关联</p>\n<p>3.为每个用例生成序列</p>\n<p>4.创建系统状态图</p>\n<p>5.评审行为模型以验证准确性和一致性。</p>\n<p><strong>状态图：</strong></p>\n<p><strong>UML 状态图</strong>就是一种行为模型，该图为每个类呈现了主动状态和导致这些主动状态变化的事件。</p>\n<p>例:</p>\n<p><img src=\"image-20221214151457611.png\" alt=\"image-20221214151457611\"></p>\n<img src=\"image-20221019160823423.png\" alt=\"image-20221019160823423\" style=\"zoom:67%;\">\n\n<p><strong>时序图</strong>：</p>\n<p><img src=\"image-20221214152126659.png\" alt=\"image-20221214152126659\"></p>\n<p><strong>泳道图：</strong></p>\n<h1 id=\"设计概念-Design-Concepts\"><a href=\"#设计概念-Design-Concepts\" class=\"headerlink\" title=\"设计概念(Design Concepts)\"></a><strong>设计概念(Design Concepts)</strong></h1><h2 id=\"软工语境下的设计\"><a href=\"#软工语境下的设计\" class=\"headerlink\" title=\"软工语境下的设计\"></a>软工语境下的设计</h2><p><strong>软件工程设计：</strong></p>\n<ul>\n<li>数据&#x2F;类设计——将分析类转换为实现类和数据结构。</li>\n<li>架构设计——定义主要软件结构元素之间的关系。</li>\n<li>接口设计——定义软件元素、硬件元素和终端用户之间的通信方式。</li>\n<li>组件级设计——将结构元素转换为软件组件的过程描述。</li>\n</ul>\n<p><strong>将需求模型映射到设计模型:</strong></p>\n<img src=\"image-20221019162512098.png\" alt=\"image-20221019162512098\" style=\"zoom: 67%;\">\n\n<h2 id=\"设计过程\"><a href=\"#设计过程\" class=\"headerlink\" title=\"设计过程\"></a>设计过程</h2><h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><ol>\n<li><p><strong>抽象（Abstraction）：</strong></p>\n<p><strong>过程抽象</strong>是指具有明确和有限的指令序列（描述动作）</p>\n<p><strong>数据抽象</strong>是描述数据对象的冠名数据集合（描述动作怎么做）</p>\n</li>\n<li><p><strong>体系结构（Architecture）</strong>：软件的整体结构和这种结构为系统提供概念完整方式。构件表示主要的系统元素及其交互。</p>\n</li>\n<li><p><strong>模式（Patterns）</strong>：模式承载了已证实的解决方案的精髓。设计模式描述了在某个特定场景与可能影响模式应用和使用方法的“影响力”中解决某个特定的设计问题的设计结构。</p>\n</li>\n<li><p><strong>关注点分离（Separation of concerns）</strong>：它表明任何复杂问题如果被分解为可以独立解决和优化的若干块，该复杂问题能够更容易的被处理。</p>\n</li>\n<li><p><strong>模块化（Modularity）</strong>：模块化是关注点分离最常见的表现。模块化设计使得开发工作更易规划。</p>\n<img src=\"image-20221026145144103.png\" alt=\"image-20221026145144103\" style=\"zoom: 50%;\">\n</li>\n<li><p><strong>信息隐蔽（Hiding）</strong>信息隐蔽原则[Par72]建议模块应该“具有的特征是：每个模块对其它所有模块都隐藏自己的设计决策”。隐蔽定义并加强了对模块内过程细节的访问约束和对模块所使用的任何局部数据结构的访问约束。</p>\n</li>\n<li><p><strong>功能独立（Functional independence）</strong>：开发具有“专一”功能和低耦合性的模块即可实现功能独立。</p>\n</li>\n<li><p><strong>逐步求精（Stepwise refinement）</strong>：通过连续精化过程细节层次来实现程序的开发，通过逐步分解功能的宏观陈述直到形成程序设计语言的语句来进行层次开发。</p>\n<img src=\"image-20221026150156120.png\" alt=\"image-20221026150156120\" style=\"zoom:67%;\">\n\n<p><font>抽象和逐步求精是互补的概念。</font></p>\n</li>\n<li><p><strong>方面（Aspects）</strong>：一个方面作为一个独立的模块进行实施，而不是作为“分割的”或者和许多构件“纠缠的”软件片段进行实施。设计体系结构应当支持定义一个方面，该方面即一个模块，该模块能够使该关注点经过它横切的所有其他关注点而得到实施。</p>\n</li>\n<li><p><strong>重构（Refactoring）</strong>：重构是使用这样一种方式改变软件系统的过程：不改变代码的外部行为而是改进其内部结构。</p>\n</li>\n<li><p>**面向对象的设计概念（OO design concepts）:**面向对象概念（类、对象、继承、消息和多态）</p>\n</li>\n<li><p><strong>设计类（Design Class</strong>）：提供设计细节，使程序得以实施。</p>\n<ol>\n<li>完整（Complete）—（包括所有必要的属性和方法)和充分(只包含实现类意图所需的方法)。</li>\n<li>原生性（Primitiveness）——每个类方法都专注于提供一个服务。</li>\n<li>高内聚（High cohesion）——小的，集中的，专注的class。</li>\n<li>低耦合（Low coupling）——类的协作保持在最小值</li>\n</ol>\n</li>\n</ol>\n<p><strong>设计概念强调了：</strong></p>\n<ol>\n<li>抽象的必要性，它提供了一种创造可重用软件构件的方法</li>\n<li>体系结构的重要性，它使得能够更好地理解系统整体结构</li>\n<li>基于模式的工程的有益性，它是一项用于已证明能力的软件的设计技术</li>\n<li>关注点分离和有效的模块化的价值，他们使得软件更容易理解、更容易测试以及更容易维护。</li>\n<li>信息隐藏的直接作用，当错误发生时，它能够减少负面影响的传播</li>\n<li>功能独立的影响，他是构造有效模块的标准</li>\n<li>求精作为一种设计方法的作用</li>\n<li>横切系统需求方面的考虑</li>\n<li>重构的应用，他是为了优化已导出的设计</li>\n<li>面向对象的类和与类相关特征的重要性</li>\n</ol>\n<h2 id=\"设计模型\"><a href=\"#设计模型\" class=\"headerlink\" title=\"设计模型\"></a>设计模型</h2><p><img src=\"image-20221026150428993.png\" alt=\"image-20221026150428993\"></p>\n<p><strong>数据设计元素</strong>：数据设计创建在高级抽象级上表示的数据模型和信息模型。</p>\n<p><strong>体系结构设计元素</strong>：体系结构设计元素通常描述为一组相互关联系统的子系统，且常常从需求模型中的分析包中派生出来。</p>\n<p><strong>接口设计元素</strong>：软件接口设计元素描述了信息如何流入和流出系统以及被定义为体系结构一部分的构件之间是如何通信的。</p>\n<p>&#x3D;&#x3D;接口设计有 3 个重要的元素：&#x3D;&#x3D;</p>\n<p>（1）用户界面</p>\n<p>（2）和其他系统、设备、网络或其他信息生成者或使用者的外部接口</p>\n<p>（3）各种设计构件之间的内部接口</p>\n<p><strong>构件级设计元素</strong>：软件的构件级设计完整地描述了每个软件构件的内部细节。构件级设计为所以局部数据对象定义数据结构，为所有在构件内发生的处理定义算法细节，并定义允许访问所有构件操作的接口。</p>\n<p><strong>部署级设计元素：</strong>部署级设计元素指明软件功能和子系统将如何在支持软件的物理计算环境内分布。</p>\n<h1 id=\"体系结构设计Architectural-Design-–-A-Recommended-Approach\"><a href=\"#体系结构设计Architectural-Design-–-A-Recommended-Approach\" class=\"headerlink\" title=\"体系结构设计Architectural Design – A Recommended Approach\"></a><strong>体系结构设计</strong>Architectural Design – A Recommended Approach</h1><h2 id=\"软件体系结构\"><a href=\"#软件体系结构\" class=\"headerlink\" title=\"软件体系结构\"></a>软件体系结构</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>**程序或计算机系统的软件体系结构是指系统的一个或者多个结构，它包括&#x3D;&#x3D;软件构件&#x3D;&#x3D;、&#x3D;&#x3D;构件的外部可见属性&#x3D;&#x3D;以及&#x3D;&#x3D;它们之间的相互联系&#x3D;&#x3D;**。</p>\n<p><strong>体系结构&#x3D;&#x3D;并非可运行的程序&#x3D;&#x3D;。</strong></p>\n<p>确切的说，它是一种表达,是能够：</p>\n<ol>\n<li>对设计在满足既定需求方面的<strong>有效性进行分析</strong></li>\n<li>在设计变更相对容易的阶段，考虑体系结构<strong>可能的替换方案</strong></li>\n<li><strong>降低</strong>与软件构造相关的<strong>风险</strong></li>\n</ol>\n<h3 id=\"体系结构重要的-3-个关键原因\"><a href=\"#体系结构重要的-3-个关键原因\" class=\"headerlink\" title=\"体系结构重要的 3 个关键原因\"></a><strong>体系结构重要的 3 个关键原因</strong></h3><ol>\n<li>软件体系结构的表示有助于对计算机系统开发感兴趣的各方展开交流。</li>\n<li>体系结构突出了早期的设计决策，这些决策对随后所有的软件工程工作有深远影响，同时对系统作为一个可运行实体的最后成功有重要作用</li>\n<li>体系结构“构建了一个相对小的、易于理解的模型，该模型描述了系统如何构成以及其构件如何一起工作</li>\n</ol>\n<h3 id=\"体系结构风格\"><a href=\"#体系结构风格\" class=\"headerlink\" title=\"体系结构风格\"></a><strong>体系结构风格</strong></h3><ol>\n<li>以数据为中心的体系结构。</li>\n<li>数据流体系结构。</li>\n<li>调用和返回体系结构</li>\n<li>面向对象体系结构</li>\n<li>层次体系结构</li>\n</ol>\n<h3 id=\"体系结构环境图（ACD）\"><a href=\"#体系结构环境图（ACD）\" class=\"headerlink\" title=\"体系结构环境图（ACD）\"></a><strong>体系结构环境图（ACD）</strong></h3><p>上级系统：这些系统把目标系统作为某些高层处理方案的一部分</p>\n<p>下级系统：这些系统被目标系统使用，并为完成目标系统的功能提供必要的数据和处理</p>\n<p>同级系统：这些系统在对等的基础上相互作用</p>\n<p>参与者：通过产生和消耗必要处理所需的信息，实现与目标系统交互的实体（人，设备）</p>\n<p><img src=\"image-20221210134301873.png\" alt=\"image-20221210134301873\"></p>\n<h1 id=\"Component-Level-Design\"><a href=\"#Component-Level-Design\" class=\"headerlink\" title=\"Component-Level Design\"></a><strong>Component-Level Design</strong></h1><ul>\n<li><p>体系设计——建筑平面图、结构、房间和外部环境之间的连接机制</p>\n</li>\n<li><p>构件级设计——每个房间的内部<strong>细节设计</strong></p>\n</li>\n</ul>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol>\n<li><p>构件是计算机软件中的一个模块化的构造块。</p>\n</li>\n<li><p>OMG 定义构件：系统中模块化的、可部署的和可替换的部件，该部件封装了实现并暴露一组接口。</p>\n</li>\n</ol>\n<p>关于什么是组件的三个重要观点：</p>\n<ul>\n<li><p><strong>面向对象的观点（Object-Oriented view）：</strong>构件包括一组协作的类。</p>\n<p>  <img src=\"image-20221210135030701.png\" alt=\"image-20221210135030701\"></p>\n</li>\n<li><p><strong>传统观点（Traditional View）：</strong>一个构件就是程序的一个功能要素，程序由处理逻辑及实现处理逻辑所需的每部数据结构以及能够保证构件被调用和实现数据传递的结构构成。</p>\n<p>  <img src=\"image-20221210135053957.png\" alt=\"image-20221210135053957\"></p>\n</li>\n<li><p><strong>流程相关的观点（Process-related view）</strong>：构建使用现有软件组件或设计模式的系统。</p>\n</li>\n</ul>\n<h2 id=\"设计基于类的构建\"><a href=\"#设计基于类的构建\" class=\"headerlink\" title=\"设计基于类的构建\"></a>设计基于类的构建</h2><h3 id=\"基本设计原则\"><a href=\"#基本设计原则\" class=\"headerlink\" title=\"基本设计原则\"></a><strong>基本设计原则</strong></h3><p><strong>4个基本设计原则和3个附加打包原则：</strong></p>\n<ol>\n<li><strong>开闭原则（Open-Closed Principle ，OCP）：</strong>模块应该对外延具有开放性，对修改具有封闭性。符合开放封闭原则的模块都有两个主要特性：<ol>\n<li><strong>它们 “面向扩展开放（Open For Extension）”：</strong>也就是说模块的行为是能够被扩展的。当应用程序的需求变化时，我们可以使模块表现出全新的或与以往不同的行为，以满足新的需求。</li>\n<li><strong>它们 “面向修改封闭（Closed For Modification）”：</strong>模块的源代码是不能被侵犯的，任何人都不允许修改已有源代码。</li>\n</ol>\n</li>\n<li><strong>依赖倒置原则（Dependency Inversion Principle ，DIP）：</strong>依赖于抽象，而非具体实现。</li>\n<li><strong>Liskov 替换原则（Liskov Substitution Principle (LSP)）：</strong>子类可以替换他们的基类。</li>\n<li><strong>接口分离原则（The Interface Segregation Principle (ISP)）：</strong>多个客户专用接口比一个通用接口好</li>\n<li><strong>发布复用等价性原则（The Release Reuse Equivalency Principle，REP）：</strong>复用的粒度就是发布的粒度</li>\n<li><strong>共同封装原则（The Common Closure Principle (CCP)）：</strong>一同变更的类应该合在一起</li>\n<li><strong>共同复用原则（The Common Reuse Principle (CRP））：</strong>不能一起复用的类不能被分到一组</li>\n</ol>\n<h3 id=\"设计准则\"><a href=\"#设计准则\" class=\"headerlink\" title=\"设计准则\"></a>设计准则</h3><ul>\n<li><p><strong>内聚性（Cohesion）：</strong>内聚性意味着构件或者类只封装那些相互关联密切，以及与构件或类自身有亲密关系的属性和操作。</p>\n<ul>\n<li><p>功能内聚：主要通过操作来体现，当一个模块只完成某一组特定操作并返回结果时，就称此模块是功能内聚的。</p>\n</li>\n<li><p>分层内聚：高层能够访问低层的服务，但低层不能访问高层的服务。</p>\n</li>\n<li><p>通信内聚：访问相同数据的所有操作被定义在同一个类中。（数据的查询，访问，存储）</p>\n</li>\n</ul>\n</li>\n<li><p><strong>耦合性（Coupling）：</strong>从高到低</p>\n</li>\n<li><p>耦合是类之间彼此联系程度的一种定性度量。随着类（构件）相互依赖越来越多，类之间的耦合程度亦会增加。</p>\n</li>\n<li><p>内容耦合：暗中修改其他构件的内部数据，这违反了信息隐蔽原则</p>\n</li>\n<li><p>公用耦合：当大量的构件都要使用同一个全局变量时发生这种耦合</p>\n</li>\n<li><p>控制耦合：当操作 A 调用操作 B，并向 B 传递控制标记时，就会发生这种耦合。</p>\n</li>\n<li><p>标记耦合：当类 B 被声明为类 A 某一操作中的一个参数类型时，就会发生这种耦合。</p>\n</li>\n<li><p>数据耦合：当操作需要传递长串的数据参数时，就会发生这种耦合。</p>\n</li>\n<li><p>例程调用耦合：当一个操作调用另一个操作时，就会发生这种耦合。</p>\n</li>\n<li><p>类型使用耦合：当构件 A 使用了在构件 B 中定义的一个数据类型时，就会发生这种耦合。</p>\n</li>\n<li><p>包含或者导入耦合：当构件 A 引入或者包含一个构件 B 的包或者内容时，就会发生这种耦合。</p>\n</li>\n<li><p>外部耦合：当一个构件和基础设施构件进行通信和协作时，就会发生这种耦合。</p>\n</li>\n</ul>\n<p><strong>为什么要高内聚?</strong></p>\n<p>模块之间的关系越紧密,出错就越少!</p>\n<p><strong>为什么要低耦合?</strong></p>\n<p>子程序间的关系越复杂,就会产生更多的意想不到的错误!会给以后的维护工作带来很多麻烦!</p>\n<p>高内聚低耦合，是软件工程中的概念，是判断设计好坏的标准，主要是面向对象的设计，主要是看类的内聚性是否高，耦合度是否低。</p>\n<h2 id=\"基于O-O的组件设计\"><a href=\"#基于O-O的组件设计\" class=\"headerlink\" title=\"基于O-O的组件设计\"></a>基于O-O的组件设计</h2><p><img src=\"image-20221214155233138.png\" alt=\"image-20221214155233138\"></p>\n<p>静态类图</p>\n<p>动态协作图（等价于时序图）</p>\n<h2 id=\"传统组件级设计\"><a href=\"#传统组件级设计\" class=\"headerlink\" title=\"传统组件级设计\"></a>传统组件级设计</h2><p><img src=\"image-20221214155441736.png\" alt=\"image-20221214155441736\"></p>\n<h2 id=\"执行组件级设计\"><a href=\"#执行组件级设计\" class=\"headerlink\" title=\"执行组件级设计\"></a>执行组件级设计</h2><h3 id=\"组件级设计\"><a href=\"#组件级设计\" class=\"headerlink\" title=\"组件级设计\"></a>组件级设计</h3><ol>\n<li><p>确定与问题域对应的所有设计类。</p>\n</li>\n<li><p>确定与基础架构域对应的所有设计类。</p>\n</li>\n<li><p>详细说明所有没有作为可重用组件获得的设计类。</p>\n<ol>\n<li>指定类或组件协作时的消息细节。</li>\n<li>为每个组件确定适当的接口。</li>\n<li>详细说明属性并定义实现它们所需的数据类型和数据结构。</li>\n<li>详细描述每个操作中的处理流程。</li>\n</ol>\n</li>\n<li><p>描述持久数据源(数据库和文件)并确定管理它们所需的类。</p>\n</li>\n<li><p>开发并详细描述一个类或组件的行为表示。</p>\n</li>\n<li><p>精心设计部署图，以提供额外的实现细节。</p>\n<p> <img src=\"image-20221210141113852.png\" alt=\"image-20221210141113852\"></p>\n</li>\n<li><p>考虑每个组件级设计表示形式，并始终考虑备选方案。</p>\n</li>\n</ol>\n<h2 id=\"专门的组件级设计\"><a href=\"#专门的组件级设计\" class=\"headerlink\" title=\"专门的组件级设计\"></a>专门的组件级设计</h2><h3 id=\"WebApps的组件级设计\"><a href=\"#WebApps的组件级设计\" class=\"headerlink\" title=\"WebApps的组件级设计\"></a>WebApps的组件级设计</h3><p><strong>WebApp组件是:</strong></p>\n<ul>\n<li><p>定义良好的内聚函数，用于操作内容或为最终用户提供计算或数据处理。</p>\n</li>\n<li><p>内容和功能的内聚包，为最终用户提供一些所需的功能。</p>\n</li>\n</ul>\n<h2 id=\"组件重构（Component-refactoring）\"><a href=\"#组件重构（Component-refactoring）\" class=\"headerlink\" title=\"组件重构（Component refactoring）\"></a>组件重构（Component refactoring）</h2><h1 id=\"User-Experience-Design\"><a href=\"#User-Experience-Design\" class=\"headerlink\" title=\"User Experience Design.\"></a>User Experience Design.</h1><h2 id=\"用户体验元素\"><a href=\"#用户体验元素\" class=\"headerlink\" title=\"用户体验元素\"></a>用户体验元素</h2><p><img src=\"image-20221210142236309.png\" alt=\"image-20221210142236309\"></p>\n<ul>\n<li>信息架构</li>\n<li>用户界面设计</li>\n<li>可用性工程</li>\n<li>可视化设计</li>\n</ul>\n<p><img src=\"image-20221210142751755.png\" alt=\"image-20221210142751755\"></p>\n<h2 id=\"黄金原则\"><a href=\"#黄金原则\" class=\"headerlink\" title=\"黄金原则\"></a>黄金原则</h2><h3 id=\"用户操纵控制\"><a href=\"#用户操纵控制\" class=\"headerlink\" title=\"用户操纵控制\"></a>用户操纵控制</h3><p>（1）以不强迫用户进入不必要的或不希望的动作的方式来定义交互模式</p>\n<p>（2）允许用户交互被中断和撤销</p>\n<p>（3）当技能级别增长时可以使交互流线化并允许定制交互</p>\n<p>（4）使用用户与内部技术细节隔离开来</p>\n<p>（5）设计应允许用户与出现在屏幕上的对象直接交互</p>\n<h3 id=\"减少用户的记忆负担\"><a href=\"#减少用户的记忆负担\" class=\"headerlink\" title=\"减少用户的记忆负担\"></a><strong>减少用户的记忆负担</strong></h3><p>（1）减少对短期记忆的要求</p>\n<p>（2）建立有意义的缺省</p>\n<p>（3）定义直观的快捷方式</p>\n<p>（4）以不断进展的方式揭晓信息</p>\n<h3 id=\"保持界面一致\"><a href=\"#保持界面一致\" class=\"headerlink\" title=\"保持界面一致\"></a><strong>保持界面一致</strong></h3><p>（1）允许用户当前任务放入有意义的环境中</p>\n<p>（2）在应用系统家族内保持一致性</p>\n<p>（3）如果过去的交互模型已经建立起了用户期望，除非有迫不得已的理由，doze 不要改变它。</p>\n<h2 id=\"UI分析与设计\"><a href=\"#UI分析与设计\" class=\"headerlink\" title=\"UI分析与设计\"></a>UI分析与设计</h2><h3 id=\"UI分析任务\"><a href=\"#UI分析任务\" class=\"headerlink\" title=\"UI分析任务\"></a>UI分析任务</h3><p><img src=\"image-20221214155932626.png\" alt=\"image-20221214155932626\"></p>\n<h3 id=\"UI设计模型\"><a href=\"#UI设计模型\" class=\"headerlink\" title=\"UI设计模型\"></a>UI设计模型</h3><p>工程师建立<strong>用户模型</strong>。软件工程师创建<strong>设计模型</strong>。最终用户在脑海中对界面产生映像，称为用户的<strong>心理模型</strong>或系统感觉。系统的实现者创建<strong>实现模型</strong>。</p>\n<ul>\n<li><strong>用户模型：</strong>确定了系统最终用户的轮廓。</li>\n<li><strong>设计模型：</strong>用户界面的设计</li>\n<li><strong>心理模型：</strong>最终用户在脑海里对系统产生的印象。</li>\n<li><strong>实现模型：</strong>组合了计算机系统的外在表现，结合了所有用来描述系统语法和语言的支撑信息。</li>\n</ul>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>用户界面的分析和设计过程是迭代的，用户界面分析和设计过程<strong>开始于螺旋模型的内部</strong>，并且包括 4 个阶段：</p>\n<ul>\n<li>界面分析及建模。</li>\n<li>界面设计。</li>\n<li>界面构造。</li>\n<li>界面确认。</li>\n</ul>\n<p><img src=\"image-20221210143134777.png\" alt=\"image-20221210143134777\"></p>\n<p>界面设计的目标是定义一组界面对象和动作，使得用户能够以满足系统所定义的每个使用目标的方式完成所有定义对的任务。</p>\n<h2 id=\"UX分析与设计\"><a href=\"#UX分析与设计\" class=\"headerlink\" title=\"UX分析与设计\"></a>UX分析与设计</h2><h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><h3 id=\"接口设计步骤\"><a href=\"#接口设计步骤\" class=\"headerlink\" title=\"接口设计步骤\"></a><strong>接口设计步骤</strong></h3><ol>\n<li>使用在接口分析期间开发的信息，<strong>定义接口对象和操作</strong>。</li>\n<li>定义将导致用户界面状态改变的事件**(用户操作)**。模仿这种行为。</li>\n<li><strong>描述每个界面状态</strong>，就像它将实际地看给最终用户一样。</li>\n<li>指示用户如何从接口提供的信息中解释系统的状态。</li>\n</ol>\n<h3 id=\"例子SafeHome\"><a href=\"#例子SafeHome\" class=\"headerlink\" title=\"例子SafeHome\"></a>例子<em>SafeHome</em></h3><ul>\n<li><p><strong>用例：</strong>为了远程访问SafeHome，房主提供一个标识符和一个密码。这些定义了访问的级别（如并非所有用户均可以重新配置系统）并提供安全保证。一旦确认身份，用户（具有全部访问权限）检查系统状态并通过启动或关闭系统改变状态。用户通过显示房子的建筑平面图、观察每个安全传感器、显示每个当前配置区域以及必要时修改区域而重新配置系统。用户通过策略地放置的摄像头观察房子内部。用户可以摇动和变焦每个摄像头而提供房子内部的不同视角。</p>\n</li>\n<li><p><strong>定义对象和动作</strong>：</p>\n<p>  <img src=\"image-20221210144633032-16706547958251.png\" alt=\"image-20221210144633032\"></p>\n</li>\n<li><p><strong>分类对象：</strong></p>\n<p>  <img src=\"image-20221210144807793.png\" alt=\"image-20221210144807793\"></p>\n</li>\n<li><p><strong>屏幕布局：</strong></p>\n<p>  <img src=\"image-20221210144917207.png\" alt=\"image-20221210144917207\"></p>\n</li>\n</ul>\n<h3 id=\"UI设计模式\"><a href=\"#UI设计模式\" class=\"headerlink\" title=\"UI设计模式\"></a><strong>UI设计模式</strong></h3><p>设计模式是为特定的、有良好边界的设计问题规定设计解决方案的一种抽象。</p>\n<p><strong>界面设计模板（win, android, os）</strong></p>\n<ul>\n<li>鼠标，滚动条，下拉菜单，弹出窗口，状态栏，图标，进度条，树形列表，触摸操作</li>\n</ul>\n<h2 id=\"设计评价\"><a href=\"#设计评价\" class=\"headerlink\" title=\"设计评价\"></a>设计评价</h2><p><img src=\"image-20221210145132156.png\" alt=\"image-20221210145132156\"></p>\n<h2 id=\"可用性和可访问性\"><a href=\"#可用性和可访问性\" class=\"headerlink\" title=\"可用性和可访问性\"></a>可用性和可访问性</h2><p>可用性是指用户在使用高科技产品所提供的功能和特性时，对使用的容易程度和有效程度的定量测量。</p>\n<h2 id=\"传统软件的用户体验和移动性\"><a href=\"#传统软件的用户体验和移动性\" class=\"headerlink\" title=\"传统软件的用户体验和移动性\"></a>传统软件的用户体验和移动性</h2><h1 id=\"Design-for-Mobility\"><a href=\"#Design-for-Mobility\" class=\"headerlink\" title=\"Design for Mobility.\"></a>Design for Mobility.</h1><h2 id=\"挑战\"><a href=\"#挑战\" class=\"headerlink\" title=\"挑战\"></a>挑战</h2><h2 id=\"移动开发生命周期\"><a href=\"#移动开发生命周期\" class=\"headerlink\" title=\"移动开发生命周期\"></a>移动开发生命周期</h2><h2 id=\"移动架构设计\"><a href=\"#移动架构设计\" class=\"headerlink\" title=\"移动架构设计\"></a>移动架构设计</h2><h2 id=\"上下文感知APP\"><a href=\"#上下文感知APP\" class=\"headerlink\" title=\"上下文感知APP\"></a>上下文感知APP</h2><h2 id=\"网页设计金字塔\"><a href=\"#网页设计金字塔\" class=\"headerlink\" title=\"网页设计金字塔\"></a>网页设计金字塔</h2><h2 id=\"组件级别设计\"><a href=\"#组件级别设计\" class=\"headerlink\" title=\"组件级别设计\"></a>组件级别设计</h2><h2 id=\"移动设计质量\"><a href=\"#移动设计质量\" class=\"headerlink\" title=\"移动设计质量\"></a>移动设计质量</h2><p>质量属性（quality attributes ）</p>\n<p><img src=\"image-20221210165149285.png\" alt=\"image-20221210165149285\"></p>\n<p><img src=\"image-20221210165247462.png\" alt=\"image-20221210165247462\"></p>\n<p><strong>六个特性：功能性、可靠性、易用性、效率、维护性、可移植性</strong></p>\n<ol>\n<li><strong>功能性：</strong>当软件在指定条件下使用时，软件产品提供满足明确和隐含要求的功能的能力<ol>\n<li>适合性：软件产品为指定的任务和用户目标提供一组合适的功能的能力</li>\n<li>准确性：软件产品提供具有所需精度的正确或相符的结果或效果的能力</li>\n<li>互操作性：软件产品与一个或更多的规定系统进行交互的能力</li>\n<li>安全保密性：软件产品保护信息和数据的能力</li>\n</ol>\n</li>\n<li><strong>可靠性：</strong>在指定条件使用时，软件产品维护规定的性能级别的能力<ol>\n<li>成熟性：软件产品为避免由软件中故障而导致失效的能力</li>\n<li>容错性：在软件出现故障或者违反其指定接口的情况下，软件产品维持规定的性能级别的能力</li>\n<li>易恢复性：在失效发生的情况下，软件产品重建规定的性能级别并恢复受直接影响的数据的能力</li>\n</ol>\n</li>\n<li><strong>易用性：</strong>在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力<ol>\n<li>易理解性：使用用户能理解软件是否合适及如何能将软件用于特定的任务的能力</li>\n<li>易学性：使用用户能学习其应用的能力</li>\n<li>易操作性：使用户能操作和控制它的能力</li>\n<li>吸引性：软件产品吸引用户的能力</li>\n</ol>\n<p>\t</p>\n</li>\n<li><strong>效率：</strong>在规定条件下，相对于所用资源的数量，软件产品可提供适当性能的能力<ol>\n<li>时间特性：软件执行其功能时，提供适当的响应和处理时间以及吞吐率的能力</li>\n<li>资源利用性：软件执行其功能时，使用合适数量和类别的资源的能力</li>\n</ol>\n</li>\n<li><strong>维护性：</strong>软件产品可被修改的能力。包括纠正、改进或对环境、需求和功能规格说明变化的适应<ol>\n<li>易分析性：诊断软件中的缺陷或失效原因或识别待修改部分的能力</li>\n<li>易改变性：使指定的修改可以被实现的能力</li>\n<li>稳定性：避免由于软件修改而造成意外结果的能力</li>\n<li>易测试性：使已修改软件能被确认的能力</li>\n</ol>\n</li>\n<li><strong>可移植性：</strong>软件产品从一种环境迁移到另外一种环境的能力<ol>\n<li>适应性：无需采用额外的活动或手段就可适应不同指定环境的能力</li>\n<li>易安装性：软件产品在指定环境中被安装的能力</li>\n<li>共存性：在公共环境中同与其分享公共资源的其他独立软件共存的能力</li>\n<li>易替换性：在同样的环境下，替代另一个相同用途的指定软件产品的能力</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Pattern-Based-Design\"><a href=\"#Pattern-Based-Design\" class=\"headerlink\" title=\"Pattern-Based Design\"></a>Pattern-Based Design</h1><h2 id=\"Design-Pattern\"><a href=\"#Design-Pattern\" class=\"headerlink\" title=\"Design Pattern\"></a>Design Pattern</h2><h2 id=\"基于模式的软件设计\"><a href=\"#基于模式的软件设计\" class=\"headerlink\" title=\"基于模式的软件设计\"></a>基于模式的软件设计</h2><h2 id=\"体系结构设计\"><a href=\"#体系结构设计\" class=\"headerlink\" title=\"体系结构设计\"></a>体系结构设计</h2><h2 id=\"组件级设计模式\"><a href=\"#组件级设计模式\" class=\"headerlink\" title=\"组件级设计模式\"></a>组件级设计模式</h2><h2 id=\"Anti-patterns\"><a href=\"#Anti-patterns\" class=\"headerlink\" title=\"Anti-patterns\"></a>Anti-patterns</h2><h2 id=\"移动设计模式\"><a href=\"#移动设计模式\" class=\"headerlink\" title=\"移动设计模式\"></a>移动设计模式</h2><h1 id=\"Software-Testing-Strategies\"><a href=\"#Software-Testing-Strategies\" class=\"headerlink\" title=\"Software Testing Strategies\"></a><strong>Software Testing Strategies</strong></h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>测试：</strong>测试是在交付给最终用户之前以特定意图找出错误为目的来执行程序的过程。</p>\n<p><strong>验证与确认</strong>（Verification and Validation，V&amp;V）：</p>\n<ul>\n<li><strong>验证</strong>是指确保软件正确地实现某一特定功能的一系列活动。</li>\n<li><strong>确认</strong>是指确保开发的软件可追溯到客户需求的另外一系列活动。</li>\n</ul>\n<p><img src=\"image-20221210151413472.png\" alt=\"image-20221210151413472\"></p>\n<h2 id=\"测试策略：从小到大\"><a href=\"#测试策略：从小到大\" class=\"headerlink\" title=\"测试策略：从小到大\"></a>测试策略：从小到大</h2><p><img src=\"image-20221214160040929.png\" alt=\"image-20221214160040929\"></p>\n<h1 id=\"Testing-Conventional-Applications\"><a href=\"#Testing-Conventional-Applications\" class=\"headerlink\" title=\"Testing Conventional Applications\"></a><strong>Testing Conventional Applications</strong></h1><h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a><strong>单元测试</strong></h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><strong>侧重点：</strong></p>\n<ul>\n<li><p>单元测试侧重于软件设计的<strong>最小单元（软件构件或模块）的验证工作</strong>。</p>\n</li>\n<li><p>单元测试侧重于<strong>构件的内部处理逻辑和数据结构</strong>。</p>\n</li>\n</ul>\n<p>可以对多个构件并行执行。</p>\n<p>测试模块的接口是为了保证被测试程序单元的信息能够正常地流入和流出；</p>\n<p>检查局部数据结构以确保临时存储的数据在算法的整个执行过程中能维持其完善性。</p>\n<p>执行控制结构中的所有独立路径（基本路径）以确保模块中的所有语句至少执行一次。</p>\n<p>测试边界条件确保模块在到达边界值得极限或受限处理的情形下仍能正确执行。</p>\n<p>最后要对所有的错误处理路径进行测试。</p>\n<p>在单元测试期间，选择测试的执行路径是最基本的任务。</p>\n<p>边界测试时最重要的单元测试任务之一。</p>\n<h3 id=\"单元测试过程\"><a href=\"#单元测试过程\" class=\"headerlink\" title=\"单元测试过程\"></a><strong>单元测试过程</strong></h3><p><img src=\"image-20221210152614210.png\" alt=\"image-20221210152614210\"></p>\n<p><strong>驱动模块：</strong>接收测试用例数据，将这些数据传递给被测模块，并输出结果。</p>\n<p><strong>桩：</strong>替换那些从属于被测模块的模块</p>\n<p>当设计高内聚的构件时，就可以简化单元测试。当构件只强调一个功能时，测试用例数就会降低，且比较容易预见错误和发现错误。</p>\n<h2 id=\"集成测试\"><a href=\"#集成测试\" class=\"headerlink\" title=\"集成测试\"></a><strong>集成测试</strong></h2><h3 id=\"概念-2\"><a href=\"#概念-2\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>集成测试时构造软件体系结构的系统化技术，同时也是进行一些旨在发现与接口相关的错误的测试。</p>\n<p><strong>集成测试的目标是利用单元测试的构件建立设计中描述的程序结构。</strong></p>\n<ul>\n<li><p><strong>自顶向下集成：</strong>自顶向下集成测试是一种构造软件体系结构的增量方法。</p>\n</li>\n<li><p><strong>深度优先：</strong>深度优先集成是首先集成位于程序结构中主控路径上的所有控件。</p>\n</li>\n<li><p><strong>广度优先：</strong>广度优先集成首先沿水平方向，将属于同一层的构件集成起来。</p>\n</li>\n</ul>\n<h3 id=\"自顶向下集成过程：\"><a href=\"#自顶向下集成过程：\" class=\"headerlink\" title=\"自顶向下集成过程：\"></a><strong>自顶向下集成过程：</strong></h3><ol>\n<li><p>主控模块作为测试驱动模块，用桩模块代替直接附属的下层模块；</p>\n</li>\n<li><p>根据所选的集成策略（深度优先&#x2F;广度优先），每次用一个实际模块替换一个桩模块；</p>\n</li>\n<li><p>每集成一个模块都进行测试；</p>\n</li>\n<li><p>完成每个测试集之后，用实际模块替换另一个桩模块；</p>\n</li>\n<li><p>可以进行回归测试（即全部或部分地重复已做过的测试），以避免引入新错误。</p>\n</li>\n<li><p>回到第 2 步继续执行此过程，直到完成整个程序结构的构造。</p>\n</li>\n</ol>\n<h3 id=\"自底向上集成测试：\"><a href=\"#自底向上集成测试：\" class=\"headerlink\" title=\"自底向上集成测试：\"></a><strong>自底向上集成测试：</strong></h3><p>就是从原子模块（程序结构的最底层构件）开始进行构造和测试。</p>\n<p><strong>自底向上集成测试过程：</strong></p>\n<p>1.连接底层构件以构成完成特定子功能的簇。</p>\n<p>2.编写驱动模块（测试的控制程序）以协调测试用例的输入和输出</p>\n<p>3.测试簇</p>\n<p>4.去掉驱动程序，沿着程序结构向上逐步连接簇</p>\n<p><img src=\"image-20221214160510145.png\" alt=\"image-20221214160510145\"></p>\n<h2 id=\"回归测试\"><a href=\"#回归测试\" class=\"headerlink\" title=\"回归测试\"></a><strong>回归测试</strong></h2><p>回归测试重新执行已测试过的某些子集，以确保变更没有传播不期望的副作用。</p>\n<p>回归测试有助于保证变更不引入无意思行为或额外的错误。</p>\n<p>回归测试可以手工进行，方法是重新执行所以测试用例的子集，或者利用捕捉&#x2F;回放工具自</p>\n<p>动进行。</p>\n<h1 id=\"Testing-Object-Oriented-Applications\"><a href=\"#Testing-Object-Oriented-Applications\" class=\"headerlink\" title=\"Testing Object-Oriented Applications\"></a><strong>Testing Object-Oriented Applications</strong></h1><h2 id=\"面向对象软件的测试策略\"><a href=\"#面向对象软件的测试策略\" class=\"headerlink\" title=\"面向对象软件的测试策略\"></a><strong>面向对象软件的测试策略</strong></h2><p>面向对象软件的<strong>类测试</strong>等同于传统软件的<strong>单元测试</strong>。</p>\n<p>不同的是：</p>\n<ul>\n<li><p>传统软件单元测试侧重于<strong>模块的算法细节和模块接口数据</strong>；</p>\n</li>\n<li><p>面向对象类的测试侧重于封装在该类中的<strong>操作和类的状态行为</strong>。</p>\n</li>\n</ul>\n<p>封装的类是单元测试的重点，但不再孤立地对单个操作进行测试，而是将其作为类的一部分。</p>\n<p>簇测试是面向对象软件集成测试中的一个步骤。</p>\n<h2 id=\"确认测试（Validation-Testing）\"><a href=\"#确认测试（Validation-Testing）\" class=\"headerlink\" title=\"确认测试（Validation Testing）\"></a><strong>确认测试（Validation Testing）</strong></h2><p>确认测试准则：<strong>软件确认是通过一系列表明与软件需求相符合的测试而获得的。</strong></p>\n<h3 id=\"α测试（Alpha-testing）内部测试：\"><a href=\"#α测试（Alpha-testing）内部测试：\" class=\"headerlink\" title=\"α测试（Alpha testing）内部测试：\"></a><strong>α测试（Alpha testing）内部测试：</strong></h3><p>α测试测试是由代表性的最终用户<strong>在开发者的场所进行</strong>。软件在自然的环境下使用，开发者站在用户的后面观看，并记录错误和使用问题。α测试在受控的环境下测试。</p>\n<h3 id=\"β测试（Beta-testing）外部测试：\"><a href=\"#β测试（Beta-testing）外部测试：\" class=\"headerlink\" title=\"β测试（Beta testing）外部测试：\"></a><strong>β测试（Beta testing）外部测试：</strong></h3><p>又称<strong>客户验收测试，Acceptance testing：</strong>β测试在一个或多个最终用户场所进行。与α测试不同，开发者通常不在场，因此，β测试是在不为开发者控制的环境下软件的“现场”应用。是在不可控的环境下测试。</p>\n<h2 id=\"系统测试\"><a href=\"#系统测试\" class=\"headerlink\" title=\"系统测试\"></a><strong>系统测试</strong></h2><p>系统测试实际上是对整个基于计算机的系统进行一系列不同考验的测试。所有测试都是为了验证系统成分已经正确地集成在一起，并且完成了指派的功能。</p>\n<p>**恢复测试（Recovery testing）:**通过各种方式强制让软件以各种方式失败并验证恢复是否正确执行。</p>\n<p><strong>安全测试（Security testing）：</strong>安全测试验证建立在系统内的保护机制是否能够实际保护系统不受非法入侵。</p>\n<p><strong>压力测试（Stress testing）：</strong>压力测试的目的是是软件面对非正常的情形。是一种要求以非正常数量、频率或容量的方式进行彻底评估。</p>\n<p><strong>性能测试（Performance testing）：</strong>性能测试用来测试软件在集成环境中的运行性能。</p>\n<p><strong>部署测试（Deployment testing）：</strong>部有时也将署测试称为配置测试，是在软件将要在其中运行的每一种环境中测试软件。</p>\n<h2 id=\"测试技术\"><a href=\"#测试技术\" class=\"headerlink\" title=\"测试技术\"></a><strong>测试技术</strong></h2><h3 id=\"白盒测试：\"><a href=\"#白盒测试：\" class=\"headerlink\" title=\"白盒测试：\"></a><strong>白盒测试：</strong></h3><p>白盒测试有时也称为玻璃盒测试，是一种测试用例设计方法，它利用作为构件层设计的一部分描述的控制结构来生成测试用例。</p>\n<p>白盒测试是在了解模块内部结构的情况下进行的测试。</p>\n<p>利用白盒测试方法导出的测试用例可以：</p>\n<p>（1）保证一个模块中的所有独立路径至少被执行一次。</p>\n<p>（2）对所有的逻辑判定均需要测试取真和取假两个方面。</p>\n<p>（3）在上下边界及可操作的范围内执行所有的循环。</p>\n<p>（4）检验内部数据结构以确保其有效性。</p>\n<h4 id=\"基本路径测试（Basic-path-testing）\"><a href=\"#基本路径测试（Basic-path-testing）\" class=\"headerlink\" title=\"基本路径测试（Basic path testing）\"></a><strong>基本路径测试（Basic path testing）</strong></h4><p>基本路径测试时由 TOM 首先提出的一种白盒测试技术。</p>\n<p>流图（程序图）是一种简单的控制流表示方法。流程图用于描述程序的控制结构，流程图映射为相应的流图。</p>\n<ul>\n<li><p><strong>圆称为流图结点（flow graph node）</strong>，表示一个或多个过程语句。</p>\n</li>\n<li><p>处理框序列和一个菱形判定框可以映射为单个节点。</p>\n</li>\n<li><p>流图中的箭头称为边或者连接，标识控制刘，类似于流程图中的箭头。</p>\n</li>\n<li><p>由边和结点限定的区域称为域。当计算域时，将图的外部作为一个域。</p>\n</li>\n<li><p>包含条件的结点称为判定结点，其特征是由它发射出两条或多条边。</p>\n</li>\n</ul>\n<p><img src=\"image-20221214160934681.png\" alt=\"image-20221214160934681\"></p>\n<p><img src=\"image-20221214160939104.png\" alt=\"image-20221214160939104\"></p>\n<p><strong>独立路径：</strong>是指任何贯穿程序的、至少引入一组新语句或一个新条件的路径。</p>\n<p>如果设计测试用例强迫执行这些路径（基本集合），就可以保证程序中的每条语句至少执行一次，同时，每个条件判断的真和假都被执行。</p>\n<p><img src=\"image-20221214161006496.png\" alt=\"image-20221214161006496\"></p>\n<p><strong>环复杂度（Cyclomatic Complexity ）</strong>计算方法：</p>\n<p><img src=\"image-20221214161011172.png\" alt=\"image-20221214161011172\"></p>\n<p>V（G）的值提供了组成基本集合的独立路径的上街，并由此得出覆盖所有程序语句所需设计和运行的测试数量的上界。</p>\n<h3 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a><strong>黑盒测试</strong></h3><p>黑盒测试也称为行为测试，侧重软件的功能需求。</p>\n<p>黑盒测试使软件工程师能设计出将测试程序所有功能需求的输入条件集。</p>\n<p>黑盒测试不是白盒测试的替代品，而是作为发现其他类型错误的辅助方法。</p>\n<p>黑盒测试试图发现以下类型的错误：</p>\n<p>（1）不正确或遗漏的功能</p>\n<p>（2）接口错误</p>\n<p>（3）数据用在测试的后期阶段</p>\n<p>（4）行为或性能错误</p>\n<p>（5）初始化和终止错误</p>\n<p>黑盒测试的方法：</p>\n<p>Graph-based testing methods 基于图的测试方法</p>\n<p>Equivalence partitioning 等价类划分</p>\n<p>Boundary value analysis 边界值分析</p>\n<p>Orthogonal array testing 正交数组测试</p>\n<p>黑盒测试的例子：</p>\n<p><img src=\"image-20221214161151723.png\" alt=\"image-20221214161151723\"></p>\n<p><img src=\"image-20221214161155755.png\" alt=\"image-20221214161155755\"></p>\n<p><img src=\"image-20221214161201230.png\" alt=\"image-20221214161201230\"></p>\n<h1 id=\"期末\"><a href=\"#期末\" class=\"headerlink\" title=\"期末\"></a>期末</h1><ul>\n<li><p>闭卷英文，有部分注解（熟悉状态图、体系结构、部署图、时序图等名称）</p>\n</li>\n<li><p>题型：开放，灵活，无名词解释</p>\n<ul>\n<li><p>单选20 * 1</p>\n</li>\n<li><p>判断分析 2 * 5</p>\n</li>\n<li><p>看图分析L:irerative, scrum, XP, stgly等。解释图中原因</p>\n</li>\n<li><p>问答 5 * 6：题型丰富，灵活应用。</p>\n<ul>\n<li>例如:public string, 违反封装（信息隐藏）概念</li>\n</ul>\n</li>\n<li><p>30分：2 * 10 ， 2 * 5，10分开放题，20分画图+答题（活动图、程序流程、类图，UI界面（黄金原则），计算独立路径等）</p>\n<ul>\n<li><p>等价划分</p>\n<p>  <img src=\"image-20221228152205055.png\" alt=\"image-20221228152205055\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a>重点</h2><p><img src=\"image-20221228152746207.png\" alt=\"image-20221228152746207\"></p>\n<p><img src=\"image-20221228153224604.png\" alt=\"image-20221228153224604\"></p>\n<p><img src=\"image-20221228153416006.png\" alt=\"image-20221228153416006\"></p>\n<p><img src=\"image-20221228153458124.png\" alt=\"image-20221228153458124\"></p>\n<p><img src=\"image-20221228153727751.png\" alt=\"image-20221228153727751\"></p>\n<p><img src=\"image-20221228153813086.png\" alt=\"image-20221228153813086\"></p>\n<p><img src=\"image-20221214162408194.png\" alt=\"image-20221214162408194\"></p>\n<p><img src=\"image-20221214162414853.png\" alt=\"image-20221214162414853\"></p>\n<p><img src=\"image-20221214162419950.png\" alt=\"image-20221214162419950\"></p>\n<p><img src=\"image-20221214162433369.png\" alt=\"image-20221214162433369\"></p>\n<p><img src=\"image-20221214162439934.png\" alt=\"image-20221214162439934\"></p>\n"},{"title":"test","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2023-01-15T13:19:20.000Z","password":null,"summary":null,"_content":"\n# image test\n\n![bg](test/bg.png)\n","source":"_posts/test.md","raw":"---\ntitle: test\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2023-01-15 21:19:20\npassword:\nsummary:\ntags:\ncategories:\n---\n\n# image test\n\n![bg](test/bg.png)\n","slug":"test","published":1,"updated":"2023-01-15T13:20:29.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcxeqjfb0006m8umhelj83sa","content":"<h1 id=\"image-test\"><a href=\"#image-test\" class=\"headerlink\" title=\"image test\"></a>image test</h1><p><img src=\"bg.png\" alt=\"bg\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"image-test\"><a href=\"#image-test\" class=\"headerlink\" title=\"image test\"></a>image test</h1><p><img src=\"bg.png\" alt=\"bg\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/test/bg.png","slug":"bg.png","post":"clcxeqjfb0006m8umhelj83sa","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012135918954.png","slug":"image-20221012135918954.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140248086.png","slug":"image-20221012140248086.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140310071.png","slug":"image-20221012140310071.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140314730.png","slug":"image-20221012140314730.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140409612.png","slug":"image-20221012140409612.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140424181.png","slug":"image-20221012140424181.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140439333.png","slug":"image-20221012140439333.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140506865.png","slug":"image-20221012140506865.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140533502.png","slug":"image-20221012140533502.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140549113.png","slug":"image-20221012140549113.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140630219.png","slug":"image-20221012140630219.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140748468.png","slug":"image-20221012140748468.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140837195.png","slug":"image-20221012140837195.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140842657.png","slug":"image-20221012140842657.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140858481.png","slug":"image-20221012140858481.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140929999.png","slug":"image-20221012140929999.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221012140948540.png","slug":"image-20221012140948540.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019150622381.png","slug":"image-20221019150622381.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019150716649.png","slug":"image-20221019150716649.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019150720887.png","slug":"image-20221019150720887.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019155252489.png","slug":"image-20221019155252489.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019160521548.png","slug":"image-20221019160521548.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019160823423.png","slug":"image-20221019160823423.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019161158995.png","slug":"image-20221019161158995.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221019162512098.png","slug":"image-20221019162512098.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221026145144103.png","slug":"image-20221026145144103.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221026150156120.png","slug":"image-20221026150156120.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221026150428993.png","slug":"image-20221026150428993.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210134301873.png","slug":"image-20221210134301873.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210135030701.png","slug":"image-20221210135030701.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210135053957.png","slug":"image-20221210135053957.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210141113852.png","slug":"image-20221210141113852.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210142236309.png","slug":"image-20221210142236309.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210142751755.png","slug":"image-20221210142751755.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210143134777.png","slug":"image-20221210143134777.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210144633032-16706547958251.png","slug":"image-20221210144633032-16706547958251.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210144633032.png","slug":"image-20221210144633032.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210144807793.png","slug":"image-20221210144807793.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210144917207.png","slug":"image-20221210144917207.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210145132156.png","slug":"image-20221210145132156.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210151413472.png","slug":"image-20221210151413472.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210152614210.png","slug":"image-20221210152614210.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210165149285.png","slug":"image-20221210165149285.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221210165247462.png","slug":"image-20221210165247462.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214151259439.png","slug":"image-20221214151259439.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214151330971.png","slug":"image-20221214151330971.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214151457611.png","slug":"image-20221214151457611.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214152126659.png","slug":"image-20221214152126659.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214155233138.png","slug":"image-20221214155233138.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214155441736.png","slug":"image-20221214155441736.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214155932626.png","slug":"image-20221214155932626.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214160040929.png","slug":"image-20221214160040929.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214160510145.png","slug":"image-20221214160510145.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214160934681.png","slug":"image-20221214160934681.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214160939104.png","slug":"image-20221214160939104.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161006496.png","slug":"image-20221214161006496.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161011172.png","slug":"image-20221214161011172.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161151723.png","slug":"image-20221214161151723.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161155755.png","slug":"image-20221214161155755.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161201230.png","slug":"image-20221214161201230.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214161539773.png","slug":"image-20221214161539773.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214162408194.png","slug":"image-20221214162408194.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214162414853.png","slug":"image-20221214162414853.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214162419950.png","slug":"image-20221214162419950.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214162433369.png","slug":"image-20221214162433369.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221214162439934.png","slug":"image-20221214162439934.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228152205055.png","slug":"image-20221228152205055.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228152746207.png","slug":"image-20221228152746207.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228153224604.png","slug":"image-20221228153224604.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228153416006.png","slug":"image-20221228153416006.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228153458124.png","slug":"image-20221228153458124.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228153727751.png","slug":"image-20221228153727751.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/image-20221228153813086.png","slug":"image-20221228153813086.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0},{"_id":"source/_posts/SEReview/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png","slug":"watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hzbV9KYXNtaW5l,size_16,color_FFFFFF,t_70.png","post":"clcxeqjfa0005m8umb591cmn3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clcxeqjfa0005m8umb591cmn3","category_id":"clcxeqjfc0007m8umd0fnaizf","_id":"clcxeqjfe0008m8um1jmdhnqq"}],"PostTag":[],"Tag":[]}}